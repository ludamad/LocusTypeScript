                         if ((<CatchClause>location).name.text) {
@@ -9242,6 +9930,8 @@ module ts {
             switch (node.kind) {
                 case SyntaxKind.AnyKeyword:
                 case SyntaxKind.NumberKeyword:
+                case SyntaxKind.FloatNumberKeyword: // [ConcreteTypeScript]
+                case SyntaxKind.IntNumberKeyword: // [ConcreteTypeScript]
                 case SyntaxKind.StringKeyword:
                 case SyntaxKind.BooleanKeyword:
                     return true;
@@ -9550,13 +10240,6 @@ module ts {
             return symbol.flags & SymbolFlags.ValueModule && symbol.declarations.length === 1 && symbol.declarations[0].kind === SyntaxKind.SourceFile;
         }
 
-        function isNodeDescendentOf(node: Node, ancestor: Node): boolean {
-            while (node) {
-                if (node === ancestor) return true;
-                node = node.parent;
-            }
-            return false;
-        }
 
         function isUniqueLocalName(name: string, container: Node): boolean {
             for (let node = container; isNodeDescendentOf(node, container); node = node.nextContainer) {
