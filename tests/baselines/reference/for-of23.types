=== tests/cases/conformance/es6/for-ofStatements/for-of23.ts ===
for (const v of new FooIterator) {
>v : Foo, Symbol(v, Decl(for-of23.ts, 0, 10))
>new FooIterator : FooIterator
>FooIterator : typeof FooIterator, Symbol(FooIterator, Decl(for-of23.ts, 4, 13))

    const v = 0; // new scope
>v : number, Symbol(v, Decl(for-of23.ts, 1, 9))
>0 : number
}

class Foo { }
>Foo : Foo, Symbol(Foo, Decl(for-of23.ts, 2, 1))

class FooIterator {
>FooIterator : FooIterator, Symbol(FooIterator, Decl(for-of23.ts, 4, 13))

    next() {
>next : () => { value: Foo; done: boolean; }, Symbol(next, Decl(for-of23.ts, 5, 19))

        return {
>{            value: new Foo,            done: false        } : { value: Foo; done: boolean; }

            value: new Foo,
>value : Foo, Symbol(value, Decl(for-of23.ts, 7, 16))
>new Foo : Foo
>Foo : typeof Foo, Symbol(Foo, Decl(for-of23.ts, 2, 1))

            done: false
>done : boolean, Symbol(done, Decl(for-of23.ts, 8, 27))
>false : boolean

        };
    }
    [Symbol.iterator]() {
>Symbol.iterator : symbol, Symbol(SymbolConstructor.iterator, Decl(lib.d.ts, 1236, 31))
>Symbol : SymbolConstructor, Symbol(Symbol, Decl(lib.d.ts, 1186, 52), Decl(lib.d.ts, 1262, 11))
>iterator : symbol, Symbol(SymbolConstructor.iterator, Decl(lib.d.ts, 1236, 31))

        return this;
>this : FooIterator, Symbol(FooIterator, Decl(for-of23.ts, 4, 13))
    }
}
