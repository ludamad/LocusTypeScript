=== tests/cases/conformance/jsx/jsxReactTestSuite.tsx ===

declare var React: any;
>React : Symbol(React, Decl(jsxReactTestSuite.tsx, 1, 11))

declare var Component:any;
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))

declare var Composite:any;
>Composite : Symbol(Composite, Decl(jsxReactTestSuite.tsx, 3, 11))

declare var Composite2:any;
>Composite2 : Symbol(Composite2, Decl(jsxReactTestSuite.tsx, 4, 11))

declare var Child:any;
>Child : Symbol(Child, Decl(jsxReactTestSuite.tsx, 5, 11))

declare var Namespace:any;
>Namespace : Symbol(Namespace, Decl(jsxReactTestSuite.tsx, 6, 11))

declare var foo: any;
>foo : Symbol(foo, Decl(jsxReactTestSuite.tsx, 7, 11))

declare var bar: any;
>bar : Symbol(bar, Decl(jsxReactTestSuite.tsx, 8, 11))

declare var y:any;
>y : Symbol(y, Decl(jsxReactTestSuite.tsx, 9, 11))

declare var x:any;
>x : Symbol(x, Decl(jsxReactTestSuite.tsx, 10, 11), Decl(jsxReactTestSuite.tsx, 35, 3))

declare var z:any;
>z : Symbol(z, Decl(jsxReactTestSuite.tsx, 11, 11))

declare var hasOwnProperty:any;
>hasOwnProperty : Symbol(hasOwnProperty, Decl(jsxReactTestSuite.tsx, 12, 11))

<div>text</div>;

<div>
  {this.props.children}
</div>;

<div>
  <div><br /></div>
  <Component>{foo}<br />{bar}</Component>
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))
>foo : Symbol(foo, Decl(jsxReactTestSuite.tsx, 7, 11))
>bar : Symbol(bar, Decl(jsxReactTestSuite.tsx, 8, 11))
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))

  <br />
</div>;


<Composite>
>Composite : Symbol(Composite, Decl(jsxReactTestSuite.tsx, 3, 11))

    {this.props.children}
</Composite>;
>Composite : Symbol(Composite, Decl(jsxReactTestSuite.tsx, 3, 11))

<Composite>
>Composite : Symbol(Composite, Decl(jsxReactTestSuite.tsx, 3, 11))

    <Composite2 />
>Composite2 : Symbol(Composite2, Decl(jsxReactTestSuite.tsx, 4, 11))

</Composite>;
>Composite : Symbol(Composite, Decl(jsxReactTestSuite.tsx, 3, 11))

var x =
>x : Symbol(x, Decl(jsxReactTestSuite.tsx, 10, 11), Decl(jsxReactTestSuite.tsx, 35, 3))

  <div
    attr1={
>attr1 : Symbol(unknown)

      "foo" + "bar"
    }
    attr2={
>attr2 : Symbol(unknown)

      "foo" + "bar" +
      
      "baz" + "bug"
    }
    attr3={
>attr3 : Symbol(unknown)

      "foo" + "bar" +
      "baz" + "bug"
      // Extra line here.
    }
    attr4="baz">
>attr4 : Symbol(unknown)

  </div>;

(
  <div>
    {/* A comment at the beginning */}
    {/* A second comment at the beginning */}
    <span>
      {/* A nested comment */}
    </span>
    {/* A sandwiched comment */}
    <br />
    {/* A comment at the end */}
    {/* A second comment at the end */}
  </div>
);

(
  <div
    /* a multi-line
       comment */
    attr1="foo">
>attr1 : Symbol(unknown)

    <span // a double-slash comment
      attr2="bar"
>attr2 : Symbol(unknown)

    />
  </div>
);

<div>&nbsp;</div>;

<div>&nbsp; </div>;

<hasOwnProperty>testing</hasOwnProperty>;

<Component constructor="foo" />;
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))
>constructor : Symbol(unknown)

<Namespace.Component />;
>Component : Symbol(unknown)

<Namespace.DeepNamespace.Component />;
>Component : Symbol(unknown)

<Component { ... x } y
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))
>y : Symbol(unknown)

={2 } z />;
>z : Symbol(unknown)

<Component
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))

    {...this.props} sound="moo" />;
>sound : Symbol(unknown)

<font-face />;

<Component x={y} />;
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))
>x : Symbol(unknown)
>y : Symbol(y, Decl(jsxReactTestSuite.tsx, 9, 11))

<x-component />;

<Component {...x} />;
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))

<Component { ...x } y={2} />;
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))
>y : Symbol(unknown)

<Component { ... x } y={2} z />;
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))
>y : Symbol(unknown)
>z : Symbol(unknown)

<Component x={1} {...y} />;
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))
>x : Symbol(unknown)


<Component x={1} y="2" {...z} {...z}><Child /></Component>;
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))
>x : Symbol(unknown)
>y : Symbol(unknown)
>Child : Symbol(Child, Decl(jsxReactTestSuite.tsx, 5, 11))
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))

<Component x="1" {...(z = { y: 2 }, z)} z={3}>Text</Component>;
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))
>x : Symbol(unknown)
>z : Symbol(z, Decl(jsxReactTestSuite.tsx, 11, 11))
>y : Symbol(y, Decl(jsxReactTestSuite.tsx, 113, 27))
>z : Symbol(z, Decl(jsxReactTestSuite.tsx, 11, 11))
>z : Symbol(unknown)
>Component : Symbol(Component, Decl(jsxReactTestSuite.tsx, 2, 11))



