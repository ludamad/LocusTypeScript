=== tests/cases/compiler/declarationEmit_nameConflicts2.ts ===
module X.Y.base {
>X : typeof X, Symbol(X, Decl(declarationEmit_nameConflicts2.ts, 0, 0), Decl(declarationEmit_nameConflicts2.ts, 7, 1))
>Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))

    export function f() { }
>f : () => void, Symbol(f, Decl(declarationEmit_nameConflicts2.ts, 0, 17))

    export class C { }
>C : C, Symbol(C, Decl(declarationEmit_nameConflicts2.ts, 1, 27))

    export module M {
>M : typeof M, Symbol(M, Decl(declarationEmit_nameConflicts2.ts, 2, 22))

        export var v;
>v : any, Symbol(v, Decl(declarationEmit_nameConflicts2.ts, 4, 18))
    }
    export enum E { }
>E : E, Symbol(E, Decl(declarationEmit_nameConflicts2.ts, 5, 5))
}

module X.Y.base.Z {
>X : typeof X, Symbol(X, Decl(declarationEmit_nameConflicts2.ts, 0, 0), Decl(declarationEmit_nameConflicts2.ts, 7, 1))
>Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))
>Z : typeof Z, Symbol(Z, Decl(declarationEmit_nameConflicts2.ts, 9, 16))

    export var f = X.Y.base.f; // Should be base.f
>f : () => void, Symbol(f, Decl(declarationEmit_nameConflicts2.ts, 10, 14))
>X.Y.base.f : () => void, Symbol(f, Decl(declarationEmit_nameConflicts2.ts, 0, 17))
>X.Y.base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))
>X.Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>X : typeof X, Symbol(X, Decl(declarationEmit_nameConflicts2.ts, 0, 0), Decl(declarationEmit_nameConflicts2.ts, 7, 1))
>Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))
>f : () => void, Symbol(f, Decl(declarationEmit_nameConflicts2.ts, 0, 17))

    export var C = X.Y.base.C; // Should be base.C
>C : typeof base.C, Symbol(C, Decl(declarationEmit_nameConflicts2.ts, 11, 14))
>X.Y.base.C : typeof base.C, Symbol(C, Decl(declarationEmit_nameConflicts2.ts, 1, 27))
>X.Y.base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))
>X.Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>X : typeof X, Symbol(X, Decl(declarationEmit_nameConflicts2.ts, 0, 0), Decl(declarationEmit_nameConflicts2.ts, 7, 1))
>Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))
>C : typeof base.C, Symbol(C, Decl(declarationEmit_nameConflicts2.ts, 1, 27))

    export var M = X.Y.base.M; // Should be base.M
>M : typeof base.M, Symbol(M, Decl(declarationEmit_nameConflicts2.ts, 12, 14))
>X.Y.base.M : typeof base.M, Symbol(M, Decl(declarationEmit_nameConflicts2.ts, 2, 22))
>X.Y.base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))
>X.Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>X : typeof X, Symbol(X, Decl(declarationEmit_nameConflicts2.ts, 0, 0), Decl(declarationEmit_nameConflicts2.ts, 7, 1))
>Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))
>M : typeof base.M, Symbol(M, Decl(declarationEmit_nameConflicts2.ts, 2, 22))

    export var E = X.Y.base.E; // Should be base.E
>E : typeof base.E, Symbol(E, Decl(declarationEmit_nameConflicts2.ts, 13, 14))
>X.Y.base.E : typeof base.E, Symbol(E, Decl(declarationEmit_nameConflicts2.ts, 5, 5))
>X.Y.base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))
>X.Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>X : typeof X, Symbol(X, Decl(declarationEmit_nameConflicts2.ts, 0, 0), Decl(declarationEmit_nameConflicts2.ts, 7, 1))
>Y : typeof Y, Symbol(Y, Decl(declarationEmit_nameConflicts2.ts, 0, 9), Decl(declarationEmit_nameConflicts2.ts, 9, 9))
>base : typeof base, Symbol(base, Decl(declarationEmit_nameConflicts2.ts, 0, 11), Decl(declarationEmit_nameConflicts2.ts, 9, 11))
>E : typeof base.E, Symbol(E, Decl(declarationEmit_nameConflicts2.ts, 5, 5))
}
