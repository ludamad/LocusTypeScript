=== tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithEnumType.ts ===
// void  operator on enum type

enum ENUM { };
>ENUM : ENUM, Symbol(ENUM,Decl(voidOperatorWithEnumType.ts,0,0))

enum ENUM1 { A, B, "" };
>ENUM1 : ENUM1, Symbol(ENUM1,Decl(voidOperatorWithEnumType.ts,2,14))
>A : ENUM1, Symbol(ENUM1.A,Decl(voidOperatorWithEnumType.ts,3,12))
>B : ENUM1, Symbol(ENUM1.B,Decl(voidOperatorWithEnumType.ts,3,15))

// enum type var
var ResultIsAny1 = void ENUM;
>ResultIsAny1 : any, Symbol(ResultIsAny1,Decl(voidOperatorWithEnumType.ts,6,3))
>void ENUM : undefined
>ENUM : typeof ENUM, Symbol(ENUM,Decl(voidOperatorWithEnumType.ts,0,0))

var ResultIsAny2 = void ENUM1;
>ResultIsAny2 : any, Symbol(ResultIsAny2,Decl(voidOperatorWithEnumType.ts,7,3))
>void ENUM1 : undefined
>ENUM1 : typeof ENUM1, Symbol(ENUM1,Decl(voidOperatorWithEnumType.ts,2,14))

// enum type expressions
var ResultIsAny3 = void ENUM1["A"];
>ResultIsAny3 : any, Symbol(ResultIsAny3,Decl(voidOperatorWithEnumType.ts,10,3))
>void ENUM1["A"] : undefined
>ENUM1["A"] : ENUM1
>ENUM1 : typeof ENUM1, Symbol(ENUM1,Decl(voidOperatorWithEnumType.ts,2,14))
>"A" : string, Symbol(ENUM1.A,Decl(voidOperatorWithEnumType.ts,3,12))

var ResultIsAny4 = void (ENUM[0] + ENUM1["B"]);
>ResultIsAny4 : any, Symbol(ResultIsAny4,Decl(voidOperatorWithEnumType.ts,11,3))
>void (ENUM[0] + ENUM1["B"]) : undefined
>(ENUM[0] + ENUM1["B"]) : string
>ENUM[0] + ENUM1["B"] : string
>ENUM[0] : string
>ENUM : typeof ENUM, Symbol(ENUM,Decl(voidOperatorWithEnumType.ts,0,0))
>0 : number
>ENUM1["B"] : ENUM1
>ENUM1 : typeof ENUM1, Symbol(ENUM1,Decl(voidOperatorWithEnumType.ts,2,14))
>"B" : string, Symbol(ENUM1.B,Decl(voidOperatorWithEnumType.ts,3,15))

// multiple void  operators
var ResultIsAny5 = void void ENUM;
>ResultIsAny5 : any, Symbol(ResultIsAny5,Decl(voidOperatorWithEnumType.ts,14,3))
>void void ENUM : undefined
>void ENUM : undefined
>ENUM : typeof ENUM, Symbol(ENUM,Decl(voidOperatorWithEnumType.ts,0,0))

var ResultIsAny6 = void void void (ENUM[0] + ENUM1.B);
>ResultIsAny6 : any, Symbol(ResultIsAny6,Decl(voidOperatorWithEnumType.ts,15,3))
>void void void (ENUM[0] + ENUM1.B) : undefined
>void void (ENUM[0] + ENUM1.B) : undefined
>void (ENUM[0] + ENUM1.B) : undefined
>(ENUM[0] + ENUM1.B) : string
>ENUM[0] + ENUM1.B : string
>ENUM[0] : string
>ENUM : typeof ENUM, Symbol(ENUM,Decl(voidOperatorWithEnumType.ts,0,0))
>0 : number
>ENUM1.B : ENUM1, Symbol(ENUM1.B,Decl(voidOperatorWithEnumType.ts,3,15))
>ENUM1 : typeof ENUM1, Symbol(ENUM1,Decl(voidOperatorWithEnumType.ts,2,14))
>B : ENUM1, Symbol(ENUM1.B,Decl(voidOperatorWithEnumType.ts,3,15))

// miss assignment operators
void ENUM;
>void ENUM : undefined
>ENUM : typeof ENUM, Symbol(ENUM,Decl(voidOperatorWithEnumType.ts,0,0))

void ENUM1;
>void ENUM1 : undefined
>ENUM1 : typeof ENUM1, Symbol(ENUM1,Decl(voidOperatorWithEnumType.ts,2,14))

void ENUM1["B"];
>void ENUM1["B"] : undefined
>ENUM1["B"] : ENUM1
>ENUM1 : typeof ENUM1, Symbol(ENUM1,Decl(voidOperatorWithEnumType.ts,2,14))
>"B" : string, Symbol(ENUM1.B,Decl(voidOperatorWithEnumType.ts,3,15))

void ENUM, ENUM1;
>void ENUM, ENUM1 : typeof ENUM1
>void ENUM : undefined
>ENUM : typeof ENUM, Symbol(ENUM,Decl(voidOperatorWithEnumType.ts,0,0))
>ENUM1 : typeof ENUM1, Symbol(ENUM1,Decl(voidOperatorWithEnumType.ts,2,14))

