=== tests/cases/compiler/detachedCommentAtStartOfConstructor2.ts ===
class TestFile {
>TestFile : TestFile, Symbol(TestFile,Decl(detachedCommentAtStartOfConstructor2.ts,0,0))

    public message: string;
>message : string, Symbol(message,Decl(detachedCommentAtStartOfConstructor2.ts,0,16))

    public name: string;
>name : string, Symbol(name,Decl(detachedCommentAtStartOfConstructor2.ts,1,27))

    constructor(message: string) {
>message : string, Symbol(message,Decl(detachedCommentAtStartOfConstructor2.ts,3,16))

        /// <summary>Test summary</summary>
        /// <param name="message" type="String" />

        var getMessage = () => message + this.name;
>getMessage : () => string, Symbol(getMessage,Decl(detachedCommentAtStartOfConstructor2.ts,7,11))
>() => message + this.name : () => string
>message + this.name : string
>message : string, Symbol(message,Decl(detachedCommentAtStartOfConstructor2.ts,3,16))
>this.name : string, Symbol(name,Decl(detachedCommentAtStartOfConstructor2.ts,1,27))
>this : TestFile, Symbol(TestFile,Decl(detachedCommentAtStartOfConstructor2.ts,0,0))
>name : string, Symbol(name,Decl(detachedCommentAtStartOfConstructor2.ts,1,27))

        this.message = getMessage();
>this.message = getMessage() : string
>this.message : string, Symbol(message,Decl(detachedCommentAtStartOfConstructor2.ts,0,16))
>this : TestFile, Symbol(TestFile,Decl(detachedCommentAtStartOfConstructor2.ts,0,0))
>message : string, Symbol(message,Decl(detachedCommentAtStartOfConstructor2.ts,0,16))
>getMessage() : string
>getMessage : () => string, Symbol(getMessage,Decl(detachedCommentAtStartOfConstructor2.ts,7,11))
    }
}
