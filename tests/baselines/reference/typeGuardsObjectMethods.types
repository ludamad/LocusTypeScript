=== tests/cases/conformance/expressions/typeGuards/typeGuardsObjectMethods.ts ===

// Note that type guards affect types of variables and parameters only and 
// have no effect on members of objects such as properties. 

// variables in global
var num: number;
>num : number, Symbol(num,Decl(typeGuardsObjectMethods.ts,5,3))

var strOrNum: string | number;
>strOrNum : string | number, Symbol(strOrNum,Decl(typeGuardsObjectMethods.ts,6,3))

var var1: string | number;
>var1 : string | number, Symbol(var1,Decl(typeGuardsObjectMethods.ts,7,3))

var obj1 = {
>obj1 : { method(param: string | number): string | number; prop: string | number; }, Symbol(obj1,Decl(typeGuardsObjectMethods.ts,8,3))
>{    // Inside method    method(param: string | number) {        // global vars in function declaration        num = typeof var1 === "string" && var1.length; // string        // variables in function declaration        var var2: string | number;        num = typeof var2 === "string" && var2.length; // string        // parameters in function declaration        num = typeof param === "string" && param.length; // string        return strOrNum;    },    get prop() {        // global vars in function declaration        num = typeof var1 === "string" && var1.length; // string        // variables in function declaration        var var2: string | number;        num = typeof var2 === "string" && var2.length; // string        return strOrNum;    },    set prop(param: string | number) {        // global vars in function declaration        num = typeof var1 === "string" && var1.length; // string        // variables in function declaration        var var2: string | number;        num = typeof var2 === "string" && var2.length; // string        // parameters in function declaration        num = typeof param === "string" && param.length; // string    }} : { method(param: string | number): string | number; prop: string | number; }

    // Inside method
    method(param: string | number) {
>method : (param: string | number) => string | number, Symbol(method,Decl(typeGuardsObjectMethods.ts,8,12))
>param : string | number, Symbol(param,Decl(typeGuardsObjectMethods.ts,10,11))

        // global vars in function declaration
        num = typeof var1 === "string" && var1.length; // string
>num = typeof var1 === "string" && var1.length : number
>num : number, Symbol(num,Decl(typeGuardsObjectMethods.ts,5,3))
>typeof var1 === "string" && var1.length : number
>typeof var1 === "string" : boolean
>typeof var1 : string
>var1 : string | number, Symbol(var1,Decl(typeGuardsObjectMethods.ts,7,3))
>"string" : string
>var1.length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
>var1 : string, Symbol(var1,Decl(typeGuardsObjectMethods.ts,7,3))
>length : number, Symbol(String.length,Decl(lib.d.ts,414,19))

        // variables in function declaration
        var var2: string | number;
>var2 : string | number, Symbol(var2,Decl(typeGuardsObjectMethods.ts,15,11))

        num = typeof var2 === "string" && var2.length; // string
>num = typeof var2 === "string" && var2.length : number
>num : number, Symbol(num,Decl(typeGuardsObjectMethods.ts,5,3))
>typeof var2 === "string" && var2.length : number
>typeof var2 === "string" : boolean
>typeof var2 : string
>var2 : string | number, Symbol(var2,Decl(typeGuardsObjectMethods.ts,15,11))
>"string" : string
>var2.length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
>var2 : string, Symbol(var2,Decl(typeGuardsObjectMethods.ts,15,11))
>length : number, Symbol(String.length,Decl(lib.d.ts,414,19))

        // parameters in function declaration
        num = typeof param === "string" && param.length; // string
>num = typeof param === "string" && param.length : number
>num : number, Symbol(num,Decl(typeGuardsObjectMethods.ts,5,3))
>typeof param === "string" && param.length : number
>typeof param === "string" : boolean
>typeof param : string
>param : string | number, Symbol(param,Decl(typeGuardsObjectMethods.ts,10,11))
>"string" : string
>param.length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
>param : string, Symbol(param,Decl(typeGuardsObjectMethods.ts,10,11))
>length : number, Symbol(String.length,Decl(lib.d.ts,414,19))

        return strOrNum;
>strOrNum : string | number, Symbol(strOrNum,Decl(typeGuardsObjectMethods.ts,6,3))

    },
    get prop() {
>prop : string | number, Symbol(prop,Decl(typeGuardsObjectMethods.ts,22,6),Decl(typeGuardsObjectMethods.ts,32,6))

        // global vars in function declaration
        num = typeof var1 === "string" && var1.length; // string
>num = typeof var1 === "string" && var1.length : number
>num : number, Symbol(num,Decl(typeGuardsObjectMethods.ts,5,3))
>typeof var1 === "string" && var1.length : number
>typeof var1 === "string" : boolean
>typeof var1 : string
>var1 : string | number, Symbol(var1,Decl(typeGuardsObjectMethods.ts,7,3))
>"string" : string
>var1.length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
>var1 : string, Symbol(var1,Decl(typeGuardsObjectMethods.ts,7,3))
>length : number, Symbol(String.length,Decl(lib.d.ts,414,19))

        // variables in function declaration
        var var2: string | number;
>var2 : string | number, Symbol(var2,Decl(typeGuardsObjectMethods.ts,28,11))

        num = typeof var2 === "string" && var2.length; // string
>num = typeof var2 === "string" && var2.length : number
>num : number, Symbol(num,Decl(typeGuardsObjectMethods.ts,5,3))
>typeof var2 === "string" && var2.length : number
>typeof var2 === "string" : boolean
>typeof var2 : string
>var2 : string | number, Symbol(var2,Decl(typeGuardsObjectMethods.ts,28,11))
>"string" : string
>var2.length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
>var2 : string, Symbol(var2,Decl(typeGuardsObjectMethods.ts,28,11))
>length : number, Symbol(String.length,Decl(lib.d.ts,414,19))

        return strOrNum;
>strOrNum : string | number, Symbol(strOrNum,Decl(typeGuardsObjectMethods.ts,6,3))

    },
    set prop(param: string | number) {
>prop : string | number, Symbol(prop,Decl(typeGuardsObjectMethods.ts,22,6),Decl(typeGuardsObjectMethods.ts,32,6))
>param : string | number, Symbol(param,Decl(typeGuardsObjectMethods.ts,33,13))

        // global vars in function declaration
        num = typeof var1 === "string" && var1.length; // string
>num = typeof var1 === "string" && var1.length : number
>num : number, Symbol(num,Decl(typeGuardsObjectMethods.ts,5,3))
>typeof var1 === "string" && var1.length : number
>typeof var1 === "string" : boolean
>typeof var1 : string
>var1 : string | number, Symbol(var1,Decl(typeGuardsObjectMethods.ts,7,3))
>"string" : string
>var1.length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
>var1 : string, Symbol(var1,Decl(typeGuardsObjectMethods.ts,7,3))
>length : number, Symbol(String.length,Decl(lib.d.ts,414,19))

        // variables in function declaration
        var var2: string | number;
>var2 : string | number, Symbol(var2,Decl(typeGuardsObjectMethods.ts,38,11))

        num = typeof var2 === "string" && var2.length; // string
>num = typeof var2 === "string" && var2.length : number
>num : number, Symbol(num,Decl(typeGuardsObjectMethods.ts,5,3))
>typeof var2 === "string" && var2.length : number
>typeof var2 === "string" : boolean
>typeof var2 : string
>var2 : string | number, Symbol(var2,Decl(typeGuardsObjectMethods.ts,38,11))
>"string" : string
>var2.length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
>var2 : string, Symbol(var2,Decl(typeGuardsObjectMethods.ts,38,11))
>length : number, Symbol(String.length,Decl(lib.d.ts,414,19))

        // parameters in function declaration
        num = typeof param === "string" && param.length; // string
>num = typeof param === "string" && param.length : number
>num : number, Symbol(num,Decl(typeGuardsObjectMethods.ts,5,3))
>typeof param === "string" && param.length : number
>typeof param === "string" : boolean
>typeof param : string
>param : string | number, Symbol(param,Decl(typeGuardsObjectMethods.ts,33,13))
>"string" : string
>param.length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
>param : string, Symbol(param,Decl(typeGuardsObjectMethods.ts,33,13))
>length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
    }
};
// return expression of the method
strOrNum = typeof obj1.method(strOrNum) === "string" && obj1.method(strOrNum); 
>strOrNum = typeof obj1.method(strOrNum) === "string" && obj1.method(strOrNum) : string | number
>strOrNum : string | number, Symbol(strOrNum,Decl(typeGuardsObjectMethods.ts,6,3))
>typeof obj1.method(strOrNum) === "string" && obj1.method(strOrNum) : string | number
>typeof obj1.method(strOrNum) === "string" : boolean
>typeof obj1.method(strOrNum) : string
>obj1.method(strOrNum) : string | number
>obj1.method : (param: string | number) => string | number, Symbol(method,Decl(typeGuardsObjectMethods.ts,8,12))
>obj1 : { method(param: string | number): string | number; prop: string | number; }, Symbol(obj1,Decl(typeGuardsObjectMethods.ts,8,3))
>method : (param: string | number) => string | number, Symbol(method,Decl(typeGuardsObjectMethods.ts,8,12))
>strOrNum : string | number, Symbol(strOrNum,Decl(typeGuardsObjectMethods.ts,6,3))
>"string" : string
>obj1.method(strOrNum) : string | number
>obj1.method : (param: string | number) => string | number, Symbol(method,Decl(typeGuardsObjectMethods.ts,8,12))
>obj1 : { method(param: string | number): string | number; prop: string | number; }, Symbol(obj1,Decl(typeGuardsObjectMethods.ts,8,3))
>method : (param: string | number) => string | number, Symbol(method,Decl(typeGuardsObjectMethods.ts,8,12))
>strOrNum : string | number, Symbol(strOrNum,Decl(typeGuardsObjectMethods.ts,6,3))

// accessing getter property
strOrNum = typeof obj1.prop === "string" && obj1.prop; 
>strOrNum = typeof obj1.prop === "string" && obj1.prop : string | number
>strOrNum : string | number, Symbol(strOrNum,Decl(typeGuardsObjectMethods.ts,6,3))
>typeof obj1.prop === "string" && obj1.prop : string | number
>typeof obj1.prop === "string" : boolean
>typeof obj1.prop : string
>obj1.prop : string | number, Symbol(prop,Decl(typeGuardsObjectMethods.ts,22,6),Decl(typeGuardsObjectMethods.ts,32,6))
>obj1 : { method(param: string | number): string | number; prop: string | number; }, Symbol(obj1,Decl(typeGuardsObjectMethods.ts,8,3))
>prop : string | number, Symbol(prop,Decl(typeGuardsObjectMethods.ts,22,6),Decl(typeGuardsObjectMethods.ts,32,6))
>"string" : string
>obj1.prop : string | number, Symbol(prop,Decl(typeGuardsObjectMethods.ts,22,6),Decl(typeGuardsObjectMethods.ts,32,6))
>obj1 : { method(param: string | number): string | number; prop: string | number; }, Symbol(obj1,Decl(typeGuardsObjectMethods.ts,8,3))
>prop : string | number, Symbol(prop,Decl(typeGuardsObjectMethods.ts,22,6),Decl(typeGuardsObjectMethods.ts,32,6))

