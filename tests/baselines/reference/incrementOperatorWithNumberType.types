=== tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithNumberType.ts ===
// ++ operator on number type
var NUMBER: number;
>NUMBER : number, Symbol(NUMBER, Decl(incrementOperatorWithNumberType.ts, 1, 3))

var NUMBER1: number[] = [1, 2];
>NUMBER1 : number[], Symbol(NUMBER1, Decl(incrementOperatorWithNumberType.ts, 2, 3))
>[1, 2] : number[]
>1 : number
>2 : number

class A {
>A : A, Symbol(A, Decl(incrementOperatorWithNumberType.ts, 2, 31))

    public a: number;
>a : number, Symbol(a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
}
module M {
>M : typeof M, Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))

    export var n: number;
>n : number, Symbol(n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
}

var objA = new A();
>objA : A, Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
>new A() : A
>A : typeof A, Symbol(A, Decl(incrementOperatorWithNumberType.ts, 2, 31))

// number type var
var ResultIsNumber1 = ++NUMBER;
>ResultIsNumber1 : number, Symbol(ResultIsNumber1, Decl(incrementOperatorWithNumberType.ts, 14, 3))
>++NUMBER : number
>NUMBER : number, Symbol(NUMBER, Decl(incrementOperatorWithNumberType.ts, 1, 3))

var ResultIsNumber2 = NUMBER++;
>ResultIsNumber2 : number, Symbol(ResultIsNumber2, Decl(incrementOperatorWithNumberType.ts, 16, 3))
>NUMBER++ : number
>NUMBER : number, Symbol(NUMBER, Decl(incrementOperatorWithNumberType.ts, 1, 3))

// expressions
var ResultIsNumber3 = ++objA.a;
>ResultIsNumber3 : number, Symbol(ResultIsNumber3, Decl(incrementOperatorWithNumberType.ts, 19, 3))
>++objA.a : number
>objA.a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
>objA : A, Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
>a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))

var ResultIsNumber4 = ++M.n;
>ResultIsNumber4 : number, Symbol(ResultIsNumber4, Decl(incrementOperatorWithNumberType.ts, 20, 3))
>++M.n : number
>M.n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
>M : typeof M, Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
>n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))

var ResultIsNumber5 = objA.a++;
>ResultIsNumber5 : number, Symbol(ResultIsNumber5, Decl(incrementOperatorWithNumberType.ts, 22, 3))
>objA.a++ : number
>objA.a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
>objA : A, Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
>a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))

var ResultIsNumber6 = M.n++;
>ResultIsNumber6 : number, Symbol(ResultIsNumber6, Decl(incrementOperatorWithNumberType.ts, 23, 3))
>M.n++ : number
>M.n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
>M : typeof M, Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
>n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))

var ResultIsNumber7 = NUMBER1[0]++;
>ResultIsNumber7 : number, Symbol(ResultIsNumber7, Decl(incrementOperatorWithNumberType.ts, 24, 3))
>NUMBER1[0]++ : number
>NUMBER1[0] : number
>NUMBER1 : number[], Symbol(NUMBER1, Decl(incrementOperatorWithNumberType.ts, 2, 3))
>0 : number

// miss assignment operators
++NUMBER;
>++NUMBER : number
>NUMBER : number, Symbol(NUMBER, Decl(incrementOperatorWithNumberType.ts, 1, 3))

++NUMBER1[0];
>++NUMBER1[0] : number
>NUMBER1[0] : number
>NUMBER1 : number[], Symbol(NUMBER1, Decl(incrementOperatorWithNumberType.ts, 2, 3))
>0 : number

++objA.a;
>++objA.a : number
>objA.a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
>objA : A, Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
>a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))

++M.n;
>++M.n : number
>M.n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
>M : typeof M, Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
>n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))

++objA.a, M.n;
>++objA.a, M.n : number
>++objA.a : number
>objA.a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
>objA : A, Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
>a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
>M.n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
>M : typeof M, Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
>n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))

NUMBER++;
>NUMBER++ : number
>NUMBER : number, Symbol(NUMBER, Decl(incrementOperatorWithNumberType.ts, 1, 3))

NUMBER1[0]++;
>NUMBER1[0]++ : number
>NUMBER1[0] : number
>NUMBER1 : number[], Symbol(NUMBER1, Decl(incrementOperatorWithNumberType.ts, 2, 3))
>0 : number

objA.a++;
>objA.a++ : number
>objA.a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
>objA : A, Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
>a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))

M.n++;
>M.n++ : number
>M.n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
>M : typeof M, Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
>n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))

objA.a++, M.n++;
>objA.a++, M.n++ : number
>objA.a++ : number
>objA.a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
>objA : A, Symbol(objA, Decl(incrementOperatorWithNumberType.ts, 11, 3))
>a : number, Symbol(A.a, Decl(incrementOperatorWithNumberType.ts, 4, 9))
>M.n++ : number
>M.n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))
>M : typeof M, Symbol(M, Decl(incrementOperatorWithNumberType.ts, 6, 1))
>n : number, Symbol(M.n, Decl(incrementOperatorWithNumberType.ts, 8, 14))

