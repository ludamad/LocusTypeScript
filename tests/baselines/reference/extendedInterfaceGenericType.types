=== tests/cases/compiler/extendedInterfaceGenericType.ts ===
interface Alpha<T> {
>Alpha : Alpha<T>, Symbol(Alpha,Decl(extendedInterfaceGenericType.ts,0,0))
>T : T, Symbol(T,Decl(extendedInterfaceGenericType.ts,0,16))

    takesArgOfT(arg: T): Alpha<T>;
>takesArgOfT : (arg: T) => Alpha<T>, Symbol(takesArgOfT,Decl(extendedInterfaceGenericType.ts,0,20))
>arg : T, Symbol(arg,Decl(extendedInterfaceGenericType.ts,1,16))
>T : T, Symbol(T,Decl(extendedInterfaceGenericType.ts,0,16))
>Alpha : Alpha<T>, Symbol(Alpha,Decl(extendedInterfaceGenericType.ts,0,0))
>T : T, Symbol(T,Decl(extendedInterfaceGenericType.ts,0,16))

    makeBetaOfNumber(): Beta<number>;
>makeBetaOfNumber : () => Beta<number>, Symbol(makeBetaOfNumber,Decl(extendedInterfaceGenericType.ts,1,34))
>Beta : Beta<T>, Symbol(Beta,Decl(extendedInterfaceGenericType.ts,3,1))
}
interface Beta<T> extends Alpha<T> {
>Beta : Beta<T>, Symbol(Beta,Decl(extendedInterfaceGenericType.ts,3,1))
>T : T, Symbol(T,Decl(extendedInterfaceGenericType.ts,4,15))
>Alpha : Alpha<T>, Symbol(Alpha,Decl(extendedInterfaceGenericType.ts,0,0))
>T : T, Symbol(T,Decl(extendedInterfaceGenericType.ts,4,15))
}

var alpha: Alpha<number>;
>alpha : Alpha<number>, Symbol(alpha,Decl(extendedInterfaceGenericType.ts,7,3))
>Alpha : Alpha<T>, Symbol(Alpha,Decl(extendedInterfaceGenericType.ts,0,0))

var betaOfNumber = alpha.makeBetaOfNumber();
>betaOfNumber : Beta<number>, Symbol(betaOfNumber,Decl(extendedInterfaceGenericType.ts,8,3))
>alpha.makeBetaOfNumber() : Beta<number>
>alpha.makeBetaOfNumber : () => Beta<number>, Symbol(Alpha.makeBetaOfNumber,Decl(extendedInterfaceGenericType.ts,1,34))
>alpha : Alpha<number>, Symbol(alpha,Decl(extendedInterfaceGenericType.ts,7,3))
>makeBetaOfNumber : () => Beta<number>, Symbol(Alpha.makeBetaOfNumber,Decl(extendedInterfaceGenericType.ts,1,34))

betaOfNumber.takesArgOfT(5);
>betaOfNumber.takesArgOfT(5) : Alpha<number>
>betaOfNumber.takesArgOfT : (arg: number) => Alpha<number>, Symbol(Alpha.takesArgOfT,Decl(extendedInterfaceGenericType.ts,0,20))
>betaOfNumber : Beta<number>, Symbol(betaOfNumber,Decl(extendedInterfaceGenericType.ts,8,3))
>takesArgOfT : (arg: number) => Alpha<number>, Symbol(Alpha.takesArgOfT,Decl(extendedInterfaceGenericType.ts,0,20))
>5 : number

