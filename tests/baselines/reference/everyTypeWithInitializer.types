=== tests/cases/conformance/statements/VariableStatements/everyTypeWithInitializer.ts ===
interface I {
>I : I, Symbol(I, Decl(everyTypeWithInitializer.ts, 0, 0))

    id: number;
>id : number, Symbol(id, Decl(everyTypeWithInitializer.ts, 0, 13))
}

class C implements I {
>C : C, Symbol(C, Decl(everyTypeWithInitializer.ts, 2, 1))
>I : I, Symbol(I, Decl(everyTypeWithInitializer.ts, 0, 0))

    id: number;
>id : number, Symbol(id, Decl(everyTypeWithInitializer.ts, 4, 22))
}

class D<T>{
>D : D<T>, Symbol(D, Decl(everyTypeWithInitializer.ts, 6, 1))
>T : T, Symbol(T, Decl(everyTypeWithInitializer.ts, 8, 8))

    source: T;
>source : T, Symbol(source, Decl(everyTypeWithInitializer.ts, 8, 11))
>T : T, Symbol(T, Decl(everyTypeWithInitializer.ts, 8, 8))

    recurse: D<T>;
>recurse : D<T>, Symbol(recurse, Decl(everyTypeWithInitializer.ts, 9, 14))
>D : D<T>, Symbol(D, Decl(everyTypeWithInitializer.ts, 6, 1))
>T : T, Symbol(T, Decl(everyTypeWithInitializer.ts, 8, 8))

    wrapped: D<D<T>>
>wrapped : D<D<T>>, Symbol(wrapped, Decl(everyTypeWithInitializer.ts, 10, 18))
>D : D<T>, Symbol(D, Decl(everyTypeWithInitializer.ts, 6, 1))
>D : D<T>, Symbol(D, Decl(everyTypeWithInitializer.ts, 6, 1))
>T : T, Symbol(T, Decl(everyTypeWithInitializer.ts, 8, 8))
}

function F(x: string): number { return 42; }
>F : (x: string) => number, Symbol(F, Decl(everyTypeWithInitializer.ts, 12, 1))
>x : string, Symbol(x, Decl(everyTypeWithInitializer.ts, 14, 11))
>42 : number

module M {
>M : typeof M, Symbol(M, Decl(everyTypeWithInitializer.ts, 14, 44))

    export class A {
>A : A, Symbol(A, Decl(everyTypeWithInitializer.ts, 16, 10))

        name: string;
>name : string, Symbol(name, Decl(everyTypeWithInitializer.ts, 17, 20))
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : (x: number) => string, Symbol(F2, Decl(everyTypeWithInitializer.ts, 19, 5))
>x : number, Symbol(x, Decl(everyTypeWithInitializer.ts, 21, 23))
>x.toString() : string
>x.toString : (radix?: number) => string, Symbol(Number.toString, Decl(lib.d.ts, 458, 18))
>x : number, Symbol(x, Decl(everyTypeWithInitializer.ts, 21, 23))
>toString : (radix?: number) => string, Symbol(Number.toString, Decl(lib.d.ts, 458, 18))
}

var aNumber = 9.9;
>aNumber : number, Symbol(aNumber, Decl(everyTypeWithInitializer.ts, 24, 3))
>9.9 : number

var aString = 'this is a string';
>aString : string, Symbol(aString, Decl(everyTypeWithInitializer.ts, 25, 3))
>'this is a string' : string

var aDate = new Date(12);
>aDate : Date, Symbol(aDate, Decl(everyTypeWithInitializer.ts, 26, 3))
>new Date(12) : Date
>Date : DateConstructor, Symbol(Date, Decl(lib.d.ts, 633, 23), Decl(lib.d.ts, 815, 11))
>12 : number

var anObject = new Object();
>anObject : Object, Symbol(anObject, Decl(everyTypeWithInitializer.ts, 27, 3))
>new Object() : Object
>Object : ObjectConstructor, Symbol(Object, Decl(lib.d.ts, 92, 1), Decl(lib.d.ts, 223, 11))

var anAny = null;
>anAny : any, Symbol(anAny, Decl(everyTypeWithInitializer.ts, 29, 3))
>null : null

var anOtherAny = <any> new C();
>anOtherAny : any, Symbol(anOtherAny, Decl(everyTypeWithInitializer.ts, 30, 3))
><any> new C() : any
>new C() : C
>C : typeof C, Symbol(C, Decl(everyTypeWithInitializer.ts, 2, 1))

var anUndefined = undefined;
>anUndefined : any, Symbol(anUndefined, Decl(everyTypeWithInitializer.ts, 31, 3))
>undefined : undefined, Symbol(undefined)


var aClass = new C();
>aClass : C, Symbol(aClass, Decl(everyTypeWithInitializer.ts, 34, 3))
>new C() : C
>C : typeof C, Symbol(C, Decl(everyTypeWithInitializer.ts, 2, 1))

var aGenericClass = new D<string>();
>aGenericClass : D<string>, Symbol(aGenericClass, Decl(everyTypeWithInitializer.ts, 35, 3))
>new D<string>() : D<string>
>D : typeof D, Symbol(D, Decl(everyTypeWithInitializer.ts, 6, 1))

var anObjectLiteral = { id: 12 };
>anObjectLiteral : { id: number; }, Symbol(anObjectLiteral, Decl(everyTypeWithInitializer.ts, 36, 3))
>{ id: 12 } : { id: number; }
>id : number, Symbol(id, Decl(everyTypeWithInitializer.ts, 36, 23))
>12 : number

var aFunction = F;
>aFunction : (x: string) => number, Symbol(aFunction, Decl(everyTypeWithInitializer.ts, 38, 3))
>F : (x: string) => number, Symbol(F, Decl(everyTypeWithInitializer.ts, 12, 1))

var aLambda = (x) => 2;
>aLambda : (x: any) => number, Symbol(aLambda, Decl(everyTypeWithInitializer.ts, 39, 3))
>(x) => 2 : (x: any) => number
>x : any, Symbol(x, Decl(everyTypeWithInitializer.ts, 39, 15))
>2 : number

var aModule = M;
>aModule : typeof M, Symbol(aModule, Decl(everyTypeWithInitializer.ts, 41, 3))
>M : typeof M, Symbol(M, Decl(everyTypeWithInitializer.ts, 14, 44))

var aClassInModule = new M.A();
>aClassInModule : M.A, Symbol(aClassInModule, Decl(everyTypeWithInitializer.ts, 42, 3))
>new M.A() : M.A
>M.A : typeof M.A, Symbol(M.A, Decl(everyTypeWithInitializer.ts, 16, 10))
>M : typeof M, Symbol(M, Decl(everyTypeWithInitializer.ts, 14, 44))
>A : typeof M.A, Symbol(M.A, Decl(everyTypeWithInitializer.ts, 16, 10))

var aFunctionInModule = M.F2;
>aFunctionInModule : (x: number) => string, Symbol(aFunctionInModule, Decl(everyTypeWithInitializer.ts, 43, 3))
>M.F2 : (x: number) => string, Symbol(M.F2, Decl(everyTypeWithInitializer.ts, 19, 5))
>M : typeof M, Symbol(M, Decl(everyTypeWithInitializer.ts, 14, 44))
>F2 : (x: number) => string, Symbol(M.F2, Decl(everyTypeWithInitializer.ts, 19, 5))

// no initializer or annotation, so this is an 'any'
var x;
>x : any, Symbol(x, Decl(everyTypeWithInitializer.ts, 46, 3))


