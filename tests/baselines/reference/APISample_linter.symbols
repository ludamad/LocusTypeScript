=== tests/cases/compiler/APISample_linter.ts ===

/*
 * Note: This test is a public API sample. The sample sources can be found 
         at: https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#traversing-the-ast-with-a-little-linter
 *       Please log a "breaking change" issue for any API breaking change affecting this issue
 */

declare var process: any;
>process : Symbol(process, Decl(APISample_linter.ts, 7, 11))

declare var console: any;
>console : Symbol(console, Decl(APISample_linter.ts, 8, 11))

declare var readFileSync: any;
>readFileSync : Symbol(readFileSync, Decl(APISample_linter.ts, 9, 11))

import * as ts from "typescript";
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))

export function delint(sourceFile: ts.SourceFile) {
>delint : Symbol(delint, Decl(APISample_linter.ts, 11, 33))
>sourceFile : Symbol(sourceFile, Decl(APISample_linter.ts, 13, 23))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SourceFile : Symbol(ts.SourceFile, Decl(typescript.d.ts, 740, 5), Decl(typescript.d.ts, 1285, 5))

    delintNode(sourceFile);
>delintNode : Symbol(delintNode, Decl(APISample_linter.ts, 14, 27))
>sourceFile : Symbol(sourceFile, Decl(APISample_linter.ts, 13, 23))

    function delintNode(node: ts.Node) {
>delintNode : Symbol(delintNode, Decl(APISample_linter.ts, 14, 27))
>node : Symbol(node, Decl(APISample_linter.ts, 16, 24))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>Node : Symbol(ts.Node, Decl(typescript.d.ts, 296, 5), Decl(typescript.d.ts, 1245, 32))

        switch (node.kind) {
>node.kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>node : Symbol(node, Decl(APISample_linter.ts, 16, 24))
>kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))

            case ts.SyntaxKind.ForStatement:
>ts.SyntaxKind.ForStatement : Symbol(ts.SyntaxKind.ForStatement, Decl(typescript.d.ts, 209, 29))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ForStatement : Symbol(ts.SyntaxKind.ForStatement, Decl(typescript.d.ts, 209, 29))

            case ts.SyntaxKind.ForInStatement:
>ts.SyntaxKind.ForInStatement : Symbol(ts.SyntaxKind.ForInStatement, Decl(typescript.d.ts, 210, 27))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ForInStatement : Symbol(ts.SyntaxKind.ForInStatement, Decl(typescript.d.ts, 210, 27))

            case ts.SyntaxKind.WhileStatement:
>ts.SyntaxKind.WhileStatement : Symbol(ts.SyntaxKind.WhileStatement, Decl(typescript.d.ts, 208, 26))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>WhileStatement : Symbol(ts.SyntaxKind.WhileStatement, Decl(typescript.d.ts, 208, 26))

            case ts.SyntaxKind.DoStatement:
>ts.SyntaxKind.DoStatement : Symbol(ts.SyntaxKind.DoStatement, Decl(typescript.d.ts, 207, 26))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>DoStatement : Symbol(ts.SyntaxKind.DoStatement, Decl(typescript.d.ts, 207, 26))

                if ((<ts.IterationStatement>node).statement.kind !== ts.SyntaxKind.Block) {
>(<ts.IterationStatement>node).statement.kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>(<ts.IterationStatement>node).statement : Symbol(ts.IterationStatement.statement, Decl(typescript.d.ts, 589, 52))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>IterationStatement : Symbol(ts.IterationStatement, Decl(typescript.d.ts, 588, 5))
>node : Symbol(node, Decl(APISample_linter.ts, 16, 24))
>statement : Symbol(ts.IterationStatement.statement, Decl(typescript.d.ts, 589, 52))
>kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>ts.SyntaxKind.Block : Symbol(ts.SyntaxKind.Block, Decl(typescript.d.ts, 202, 36))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>Block : Symbol(ts.SyntaxKind.Block, Decl(typescript.d.ts, 202, 36))

                    report(node, "A looping statement's contents should be wrapped in a block body.");
>report : Symbol(report, Decl(APISample_linter.ts, 48, 5))
>node : Symbol(node, Decl(APISample_linter.ts, 16, 24))
                }
                break;

            case ts.SyntaxKind.IfStatement:
>ts.SyntaxKind.IfStatement : Symbol(ts.SyntaxKind.IfStatement, Decl(typescript.d.ts, 206, 34))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>IfStatement : Symbol(ts.SyntaxKind.IfStatement, Decl(typescript.d.ts, 206, 34))

                let ifStatement = (<ts.IfStatement>node);
>ifStatement : Symbol(ifStatement, Decl(APISample_linter.ts, 28, 19))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>IfStatement : Symbol(ts.IfStatement, Decl(typescript.d.ts, 583, 5))
>node : Symbol(node, Decl(APISample_linter.ts, 16, 24))

                if (ifStatement.thenStatement.kind !== ts.SyntaxKind.Block) {
>ifStatement.thenStatement.kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>ifStatement.thenStatement : Symbol(ts.IfStatement.thenStatement, Decl(typescript.d.ts, 585, 31))
>ifStatement : Symbol(ifStatement, Decl(APISample_linter.ts, 28, 19))
>thenStatement : Symbol(ts.IfStatement.thenStatement, Decl(typescript.d.ts, 585, 31))
>kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>ts.SyntaxKind.Block : Symbol(ts.SyntaxKind.Block, Decl(typescript.d.ts, 202, 36))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>Block : Symbol(ts.SyntaxKind.Block, Decl(typescript.d.ts, 202, 36))

                    report(ifStatement.thenStatement, "An if statement's contents should be wrapped in a block body.");
>report : Symbol(report, Decl(APISample_linter.ts, 48, 5))
>ifStatement.thenStatement : Symbol(ts.IfStatement.thenStatement, Decl(typescript.d.ts, 585, 31))
>ifStatement : Symbol(ifStatement, Decl(APISample_linter.ts, 28, 19))
>thenStatement : Symbol(ts.IfStatement.thenStatement, Decl(typescript.d.ts, 585, 31))
                }
                if (ifStatement.elseStatement &&
>ifStatement.elseStatement : Symbol(ts.IfStatement.elseStatement, Decl(typescript.d.ts, 586, 33))
>ifStatement : Symbol(ifStatement, Decl(APISample_linter.ts, 28, 19))
>elseStatement : Symbol(ts.IfStatement.elseStatement, Decl(typescript.d.ts, 586, 33))

                    ifStatement.elseStatement.kind !== ts.SyntaxKind.Block &&
>ifStatement.elseStatement.kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>ifStatement.elseStatement : Symbol(ts.IfStatement.elseStatement, Decl(typescript.d.ts, 586, 33))
>ifStatement : Symbol(ifStatement, Decl(APISample_linter.ts, 28, 19))
>elseStatement : Symbol(ts.IfStatement.elseStatement, Decl(typescript.d.ts, 586, 33))
>kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>ts.SyntaxKind.Block : Symbol(ts.SyntaxKind.Block, Decl(typescript.d.ts, 202, 36))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>Block : Symbol(ts.SyntaxKind.Block, Decl(typescript.d.ts, 202, 36))

                    ifStatement.elseStatement.kind !== ts.SyntaxKind.IfStatement) {
>ifStatement.elseStatement.kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>ifStatement.elseStatement : Symbol(ts.IfStatement.elseStatement, Decl(typescript.d.ts, 586, 33))
>ifStatement : Symbol(ifStatement, Decl(APISample_linter.ts, 28, 19))
>elseStatement : Symbol(ts.IfStatement.elseStatement, Decl(typescript.d.ts, 586, 33))
>kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>ts.SyntaxKind.IfStatement : Symbol(ts.SyntaxKind.IfStatement, Decl(typescript.d.ts, 206, 34))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>IfStatement : Symbol(ts.SyntaxKind.IfStatement, Decl(typescript.d.ts, 206, 34))

                    report(ifStatement.elseStatement, "An else statement's contents should be wrapped in a block body.");
>report : Symbol(report, Decl(APISample_linter.ts, 48, 5))
>ifStatement.elseStatement : Symbol(ts.IfStatement.elseStatement, Decl(typescript.d.ts, 586, 33))
>ifStatement : Symbol(ifStatement, Decl(APISample_linter.ts, 28, 19))
>elseStatement : Symbol(ts.IfStatement.elseStatement, Decl(typescript.d.ts, 586, 33))
                }
                break;

            case ts.SyntaxKind.BinaryExpression:
>ts.SyntaxKind.BinaryExpression : Symbol(ts.SyntaxKind.BinaryExpression, Decl(typescript.d.ts, 192, 37))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>BinaryExpression : Symbol(ts.SyntaxKind.BinaryExpression, Decl(typescript.d.ts, 192, 37))

                let op = (<ts.BinaryExpression>node).operatorToken.kind;
>op : Symbol(op, Decl(APISample_linter.ts, 40, 19))
>(<ts.BinaryExpression>node).operatorToken.kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))
>(<ts.BinaryExpression>node).operatorToken : Symbol(ts.BinaryExpression.operatorToken, Decl(typescript.d.ts, 497, 25))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>BinaryExpression : Symbol(ts.BinaryExpression, Decl(typescript.d.ts, 495, 5))
>node : Symbol(node, Decl(APISample_linter.ts, 16, 24))
>operatorToken : Symbol(ts.BinaryExpression.operatorToken, Decl(typescript.d.ts, 497, 25))
>kind : Symbol(ts.Node.kind, Decl(typescript.d.ts, 297, 38))

                if (op === ts.SyntaxKind.EqualsEqualsToken || op == ts.SyntaxKind.ExclamationEqualsToken) {
>op : Symbol(op, Decl(APISample_linter.ts, 40, 19))
>ts.SyntaxKind.EqualsEqualsToken : Symbol(ts.SyntaxKind.EqualsEqualsToken, Decl(typescript.d.ts, 51, 36))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>EqualsEqualsToken : Symbol(ts.SyntaxKind.EqualsEqualsToken, Decl(typescript.d.ts, 51, 36))
>op : Symbol(op, Decl(APISample_linter.ts, 40, 19))
>ts.SyntaxKind.ExclamationEqualsToken : Symbol(ts.SyntaxKind.ExclamationEqualsToken, Decl(typescript.d.ts, 52, 31))
>ts.SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>SyntaxKind : Symbol(ts.SyntaxKind, Decl(typescript.d.ts, 22, 5))
>ExclamationEqualsToken : Symbol(ts.SyntaxKind.ExclamationEqualsToken, Decl(typescript.d.ts, 52, 31))

                    report(node, "Use '===' and '!=='.")
>report : Symbol(report, Decl(APISample_linter.ts, 48, 5))
>node : Symbol(node, Decl(APISample_linter.ts, 16, 24))
                }
                break;
        }

        ts.forEachChild(node, delintNode);
>ts.forEachChild : Symbol(ts.forEachChild, Decl(typescript.d.ts, 1214, 48))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>forEachChild : Symbol(ts.forEachChild, Decl(typescript.d.ts, 1214, 48))
>node : Symbol(node, Decl(APISample_linter.ts, 16, 24))
>delintNode : Symbol(delintNode, Decl(APISample_linter.ts, 14, 27))
    }

    function report(node: ts.Node, message: string) {
>report : Symbol(report, Decl(APISample_linter.ts, 48, 5))
>node : Symbol(node, Decl(APISample_linter.ts, 50, 20))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>Node : Symbol(ts.Node, Decl(typescript.d.ts, 296, 5), Decl(typescript.d.ts, 1245, 32))
>message : Symbol(message, Decl(APISample_linter.ts, 50, 34))

        let { line, character } = sourceFile.getLineAndCharacterOfPosition(node.getStart());
>line : Symbol(line, Decl(APISample_linter.ts, 51, 13))
>character : Symbol(character, Decl(APISample_linter.ts, 51, 19))
>sourceFile.getLineAndCharacterOfPosition : Symbol(ts.SourceFile.getLineAndCharacterOfPosition, Decl(typescript.d.ts, 1286, 26))
>sourceFile : Symbol(sourceFile, Decl(APISample_linter.ts, 13, 23))
>getLineAndCharacterOfPosition : Symbol(ts.SourceFile.getLineAndCharacterOfPosition, Decl(typescript.d.ts, 1286, 26))
>node.getStart : Symbol(ts.Node.getStart, Decl(typescript.d.ts, 1250, 53))
>node : Symbol(node, Decl(APISample_linter.ts, 50, 20))
>getStart : Symbol(ts.Node.getStart, Decl(typescript.d.ts, 1250, 53))

        console.log(`${sourceFile.fileName} (${line + 1},${character + 1}): ${message}`);
>console : Symbol(console, Decl(APISample_linter.ts, 8, 11))
>sourceFile.fileName : Symbol(ts.SourceFile.fileName, Decl(typescript.d.ts, 743, 29))
>sourceFile : Symbol(sourceFile, Decl(APISample_linter.ts, 13, 23))
>fileName : Symbol(ts.SourceFile.fileName, Decl(typescript.d.ts, 743, 29))
>line : Symbol(line, Decl(APISample_linter.ts, 51, 13))
>character : Symbol(character, Decl(APISample_linter.ts, 51, 19))
>message : Symbol(message, Decl(APISample_linter.ts, 50, 34))
    }
}

const fileNames = process.argv.slice(2);
>fileNames : Symbol(fileNames, Decl(APISample_linter.ts, 56, 5))
>process : Symbol(process, Decl(APISample_linter.ts, 7, 11))

fileNames.forEach(fileName => {
>fileNames : Symbol(fileNames, Decl(APISample_linter.ts, 56, 5))
>fileName : Symbol(fileName, Decl(APISample_linter.ts, 57, 18))

    // Parse a file
    let sourceFile = ts.createSourceFile(fileName, readFileSync(fileName).toString(), ts.ScriptTarget.ES6, /*setParentNodes */ true);
>sourceFile : Symbol(sourceFile, Decl(APISample_linter.ts, 59, 7))
>ts.createSourceFile : Symbol(ts.createSourceFile, Decl(typescript.d.ts, 1215, 107))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>createSourceFile : Symbol(ts.createSourceFile, Decl(typescript.d.ts, 1215, 107))
>fileName : Symbol(fileName, Decl(APISample_linter.ts, 57, 18))
>readFileSync : Symbol(readFileSync, Decl(APISample_linter.ts, 9, 11))
>fileName : Symbol(fileName, Decl(APISample_linter.ts, 57, 18))
>ts.ScriptTarget.ES6 : Symbol(ts.ScriptTarget.ES6, Decl(typescript.d.ts, 1118, 16))
>ts.ScriptTarget : Symbol(ts.ScriptTarget, Decl(typescript.d.ts, 1115, 5))
>ts : Symbol(ts, Decl(APISample_linter.ts, 11, 6))
>ScriptTarget : Symbol(ts.ScriptTarget, Decl(typescript.d.ts, 1115, 5))
>ES6 : Symbol(ts.ScriptTarget.ES6, Decl(typescript.d.ts, 1118, 16))

    // delint it
    delint(sourceFile);
>delint : Symbol(delint, Decl(APISample_linter.ts, 11, 33))
>sourceFile : Symbol(sourceFile, Decl(APISample_linter.ts, 59, 7))

});
