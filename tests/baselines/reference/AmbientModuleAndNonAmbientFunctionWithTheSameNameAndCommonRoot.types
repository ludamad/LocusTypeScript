=== tests/cases/conformance/internalModules/DeclarationMerging/module.d.ts ===
declare module Point {
>Point : typeof Point, Symbol(Point,Decl(module.d.ts,0,0),Decl(function.ts,0,0))

    export var Origin: { x: number; y: number; }
>Origin : { x: number; y: number; }, Symbol(Origin,Decl(module.d.ts,1,14))
>x : number, Symbol(x,Decl(module.d.ts,1,24))
>y : number, Symbol(y,Decl(module.d.ts,1,35))
}

=== tests/cases/conformance/internalModules/DeclarationMerging/function.ts ===
function Point() {
>Point : typeof Point, Symbol(Point,Decl(module.d.ts,0,0),Decl(function.ts,0,0))

    return { x: 0, y: 0 };
>{ x: 0, y: 0 } : { x: number; y: number; }
>x : number, Symbol(x,Decl(function.ts,1,12))
>0 : number
>y : number, Symbol(y,Decl(function.ts,1,18))
>0 : number
}

=== tests/cases/conformance/internalModules/DeclarationMerging/test.ts ===
var cl: { x: number; y: number; }
>cl : { x: number; y: number; }, Symbol(cl,Decl(test.ts,0,3),Decl(test.ts,1,3),Decl(test.ts,2,3))
>x : number, Symbol(x,Decl(test.ts,0,9))
>y : number, Symbol(y,Decl(test.ts,0,20))

var cl = Point();
>cl : { x: number; y: number; }, Symbol(cl,Decl(test.ts,0,3),Decl(test.ts,1,3),Decl(test.ts,2,3))
>Point() : { x: number; y: number; }
>Point : typeof Point, Symbol(Point,Decl(module.d.ts,0,0),Decl(function.ts,0,0))

var cl = Point.Origin;
>cl : { x: number; y: number; }, Symbol(cl,Decl(test.ts,0,3),Decl(test.ts,1,3),Decl(test.ts,2,3))
>Point.Origin : { x: number; y: number; }, Symbol(Point.Origin,Decl(module.d.ts,1,14))
>Point : typeof Point, Symbol(Point,Decl(module.d.ts,0,0),Decl(function.ts,0,0))
>Origin : { x: number; y: number; }, Symbol(Point.Origin,Decl(module.d.ts,1,14))

