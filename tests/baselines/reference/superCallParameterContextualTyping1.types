=== tests/cases/conformance/expressions/contextualTyping/superCallParameterContextualTyping1.ts ===

class A<T1, T2> {
>A : A<T1, T2>, Symbol(A, Decl(superCallParameterContextualTyping1.ts, 0, 0))
>T1 : T1, Symbol(T1, Decl(superCallParameterContextualTyping1.ts, 1, 8))
>T2 : T2, Symbol(T2, Decl(superCallParameterContextualTyping1.ts, 1, 11))

    constructor(private map: (value: T1) => T2) {
>map : (value: T1) => T2, Symbol(map, Decl(superCallParameterContextualTyping1.ts, 2, 16))
>value : T1, Symbol(value, Decl(superCallParameterContextualTyping1.ts, 2, 30))
>T1 : T1, Symbol(T1, Decl(superCallParameterContextualTyping1.ts, 1, 8))
>T2 : T2, Symbol(T2, Decl(superCallParameterContextualTyping1.ts, 1, 11))

    }
}

class B extends A<number, string> {
>B : B, Symbol(B, Decl(superCallParameterContextualTyping1.ts, 5, 1))
>A : A<T1, T2>, Symbol(A, Decl(superCallParameterContextualTyping1.ts, 0, 0))

    // Ensure 'value' is of type 'number (and not '{}') by using its 'toExponential()' method.
    constructor() { super(value => String(value.toExponential())); }
>super(value => String(value.toExponential())) : void
>super : typeof A, Symbol(A, Decl(superCallParameterContextualTyping1.ts, 0, 0))
>value => String(value.toExponential()) : (value: number) => string
>value : number, Symbol(value, Decl(superCallParameterContextualTyping1.ts, 9, 26))
>String(value.toExponential()) : string
>String : StringConstructor, Symbol(String, Decl(lib.d.ts, 275, 1), Decl(lib.d.ts, 443, 11))
>value.toExponential() : string
>value.toExponential : (fractionDigits?: number) => string, Symbol(Number.toExponential, Decl(lib.d.ts, 469, 45))
>value : number, Symbol(value, Decl(superCallParameterContextualTyping1.ts, 9, 26))
>toExponential : (fractionDigits?: number) => string, Symbol(Number.toExponential, Decl(lib.d.ts, 469, 45))
}

