=== tests/cases/conformance/types/typeRelationships/typeInference/unionTypeInference.ts ===
// Verify that inferences made *to* a type parameter in a union type are secondary
// to inferences made directly to that type parameter

function f<T>(x: T, y: string|T): T {
>f : <T>(x: T, y: string | T) => T, Symbol(f,Decl(unionTypeInference.ts,0,0))
>T : T, Symbol(T,Decl(unionTypeInference.ts,3,11))
>x : T, Symbol(x,Decl(unionTypeInference.ts,3,14))
>T : T, Symbol(T,Decl(unionTypeInference.ts,3,11))
>y : string | T, Symbol(y,Decl(unionTypeInference.ts,3,19))
>T : T, Symbol(T,Decl(unionTypeInference.ts,3,11))
>T : T, Symbol(T,Decl(unionTypeInference.ts,3,11))

    return x;
>x : T, Symbol(x,Decl(unionTypeInference.ts,3,14))
}

var a1: number;
>a1 : number, Symbol(a1,Decl(unionTypeInference.ts,7,3),Decl(unionTypeInference.ts,8,3))

var a1 = f(1, 2);
>a1 : number, Symbol(a1,Decl(unionTypeInference.ts,7,3),Decl(unionTypeInference.ts,8,3))
>f(1, 2) : number
>f : <T>(x: T, y: string | T) => T, Symbol(f,Decl(unionTypeInference.ts,0,0))
>1 : number
>2 : number

var a2: number;
>a2 : number, Symbol(a2,Decl(unionTypeInference.ts,9,3),Decl(unionTypeInference.ts,10,3))

var a2 = f(1, "hello");
>a2 : number, Symbol(a2,Decl(unionTypeInference.ts,9,3),Decl(unionTypeInference.ts,10,3))
>f(1, "hello") : number
>f : <T>(x: T, y: string | T) => T, Symbol(f,Decl(unionTypeInference.ts,0,0))
>1 : number
>"hello" : string

var a3: number;
>a3 : number, Symbol(a3,Decl(unionTypeInference.ts,11,3),Decl(unionTypeInference.ts,12,3))

var a3 = f(1, a1 || "hello");
>a3 : number, Symbol(a3,Decl(unionTypeInference.ts,11,3),Decl(unionTypeInference.ts,12,3))
>f(1, a1 || "hello") : number
>f : <T>(x: T, y: string | T) => T, Symbol(f,Decl(unionTypeInference.ts,0,0))
>1 : number
>a1 || "hello" : string | number
>a1 : number, Symbol(a1,Decl(unionTypeInference.ts,7,3),Decl(unionTypeInference.ts,8,3))
>"hello" : string

var a4: any;
>a4 : any, Symbol(a4,Decl(unionTypeInference.ts,13,3),Decl(unionTypeInference.ts,14,3))

var a4 = f(undefined, "abc");
>a4 : any, Symbol(a4,Decl(unionTypeInference.ts,13,3),Decl(unionTypeInference.ts,14,3))
>f(undefined, "abc") : any
>f : <T>(x: T, y: string | T) => T, Symbol(f,Decl(unionTypeInference.ts,0,0))
>undefined : undefined, Symbol(undefined)
>"abc" : string

function g<T>(value: [string, T]): T {
>g : <T>(value: [string, T]) => T, Symbol(g,Decl(unionTypeInference.ts,14,29))
>T : T, Symbol(T,Decl(unionTypeInference.ts,16,11))
>value : [string, T], Symbol(value,Decl(unionTypeInference.ts,16,14))
>T : T, Symbol(T,Decl(unionTypeInference.ts,16,11))
>T : T, Symbol(T,Decl(unionTypeInference.ts,16,11))

    return value[1];
>value[1] : T
>value : [string, T], Symbol(value,Decl(unionTypeInference.ts,16,14))
>1 : number, Symbol(1)
}

var b1: boolean;
>b1 : boolean, Symbol(b1,Decl(unionTypeInference.ts,20,3),Decl(unionTypeInference.ts,21,3))

var b1 = g(["string", true]);
>b1 : boolean, Symbol(b1,Decl(unionTypeInference.ts,20,3),Decl(unionTypeInference.ts,21,3))
>g(["string", true]) : boolean
>g : <T>(value: [string, T]) => T, Symbol(g,Decl(unionTypeInference.ts,14,29))
>["string", true] : [string, boolean]
>"string" : string
>true : boolean

function h<T>(x: string|boolean|T): T {
>h : <T>(x: string | boolean | T) => T, Symbol(h,Decl(unionTypeInference.ts,21,29))
>T : T, Symbol(T,Decl(unionTypeInference.ts,23,11))
>x : string | boolean | T, Symbol(x,Decl(unionTypeInference.ts,23,14))
>T : T, Symbol(T,Decl(unionTypeInference.ts,23,11))
>T : T, Symbol(T,Decl(unionTypeInference.ts,23,11))

    return typeof x === "string" || typeof x === "boolean" ? undefined : x;
>typeof x === "string" || typeof x === "boolean" ? undefined : x : T
>typeof x === "string" || typeof x === "boolean" : boolean
>typeof x === "string" : boolean
>typeof x : string
>x : string | boolean | T, Symbol(x,Decl(unionTypeInference.ts,23,14))
>"string" : string
>typeof x === "boolean" : boolean
>typeof x : string
>x : boolean | T, Symbol(x,Decl(unionTypeInference.ts,23,14))
>"boolean" : string
>undefined : undefined, Symbol(undefined)
>x : T, Symbol(x,Decl(unionTypeInference.ts,23,14))
}

var c1: number;
>c1 : number, Symbol(c1,Decl(unionTypeInference.ts,27,3),Decl(unionTypeInference.ts,28,3))

var c1 = h(5);
>c1 : number, Symbol(c1,Decl(unionTypeInference.ts,27,3),Decl(unionTypeInference.ts,28,3))
>h(5) : number
>h : <T>(x: string | boolean | T) => T, Symbol(h,Decl(unionTypeInference.ts,21,29))
>5 : number

var c2: string;
>c2 : string, Symbol(c2,Decl(unionTypeInference.ts,29,3),Decl(unionTypeInference.ts,30,3))

var c2 = h("abc");
>c2 : string, Symbol(c2,Decl(unionTypeInference.ts,29,3),Decl(unionTypeInference.ts,30,3))
>h("abc") : string
>h : <T>(x: string | boolean | T) => T, Symbol(h,Decl(unionTypeInference.ts,21,29))
>"abc" : string

