=== tests/cases/conformance/es6/spread/iteratorSpreadInCall11.ts ===
foo(...new SymbolIterator);
>foo : Symbol(foo, Decl(iteratorSpreadInCall11.ts, 0, 27))
>SymbolIterator : Symbol(SymbolIterator, Decl(iteratorSpreadInCall11.ts, 2, 42))

function foo<T>(...s: T[]) { return s[0] }
>foo : Symbol(foo, Decl(iteratorSpreadInCall11.ts, 0, 27))
>T : Symbol(T, Decl(iteratorSpreadInCall11.ts, 2, 13))
>s : Symbol(s, Decl(iteratorSpreadInCall11.ts, 2, 16))
>T : Symbol(T, Decl(iteratorSpreadInCall11.ts, 2, 13))
>s : Symbol(s, Decl(iteratorSpreadInCall11.ts, 2, 16))

class SymbolIterator {
>SymbolIterator : Symbol(SymbolIterator, Decl(iteratorSpreadInCall11.ts, 2, 42))

    next() {
>next : Symbol(next, Decl(iteratorSpreadInCall11.ts, 4, 22))

        return {
            value: Symbol(),
>value : Symbol(value, Decl(iteratorSpreadInCall11.ts, 6, 16))
>Symbol : Symbol(Symbol, Decl(lib.d.ts, 3840, 52), Decl(lib.d.ts, 3946, 11))

            done: false
>done : Symbol(done, Decl(iteratorSpreadInCall11.ts, 7, 28))

        };
    }

    [Symbol.iterator]() {
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.d.ts, 3890, 31))
>Symbol : Symbol(Symbol, Decl(lib.d.ts, 3840, 52), Decl(lib.d.ts, 3946, 11))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.d.ts, 3890, 31))

        return this;
>this : Symbol(SymbolIterator, Decl(iteratorSpreadInCall11.ts, 2, 42))
    }
}
