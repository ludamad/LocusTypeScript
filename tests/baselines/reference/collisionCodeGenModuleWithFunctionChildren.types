=== tests/cases/compiler/collisionCodeGenModuleWithFunctionChildren.ts ===
module M {
>M : typeof M, Symbol(M,Decl(collisionCodeGenModuleWithFunctionChildren.ts,0,0),Decl(collisionCodeGenModuleWithFunctionChildren.ts,3,1),Decl(collisionCodeGenModuleWithFunctionChildren.ts,10,1))

    export var x = 3;
>x : number, Symbol(x,Decl(collisionCodeGenModuleWithFunctionChildren.ts,1,14))
>3 : number

    function fn(M, p = x) { }
>fn : (M: any, p?: number) => void, Symbol(fn,Decl(collisionCodeGenModuleWithFunctionChildren.ts,1,21))
>M : any, Symbol(M,Decl(collisionCodeGenModuleWithFunctionChildren.ts,2,16))
>p : number, Symbol(p,Decl(collisionCodeGenModuleWithFunctionChildren.ts,2,18))
>x : number, Symbol(x,Decl(collisionCodeGenModuleWithFunctionChildren.ts,1,14))
}

module M {
>M : typeof M, Symbol(M,Decl(collisionCodeGenModuleWithFunctionChildren.ts,0,0),Decl(collisionCodeGenModuleWithFunctionChildren.ts,3,1),Decl(collisionCodeGenModuleWithFunctionChildren.ts,10,1))

    function fn2() {
>fn2 : () => void, Symbol(fn2,Decl(collisionCodeGenModuleWithFunctionChildren.ts,5,10))

        var M;
>M : any, Symbol(M,Decl(collisionCodeGenModuleWithFunctionChildren.ts,7,11))

        var p = x;
>p : number, Symbol(p,Decl(collisionCodeGenModuleWithFunctionChildren.ts,8,11))
>x : number, Symbol(x,Decl(collisionCodeGenModuleWithFunctionChildren.ts,1,14))
    }
}

module M {
>M : typeof M, Symbol(M,Decl(collisionCodeGenModuleWithFunctionChildren.ts,0,0),Decl(collisionCodeGenModuleWithFunctionChildren.ts,3,1),Decl(collisionCodeGenModuleWithFunctionChildren.ts,10,1))

    function fn3() {
>fn3 : () => void, Symbol(fn3,Decl(collisionCodeGenModuleWithFunctionChildren.ts,12,10))

        function M() {
>M : () => void, Symbol(M,Decl(collisionCodeGenModuleWithFunctionChildren.ts,13,20))

            var p = x;
>p : number, Symbol(p,Decl(collisionCodeGenModuleWithFunctionChildren.ts,15,15))
>x : number, Symbol(x,Decl(collisionCodeGenModuleWithFunctionChildren.ts,1,14))
        }
    }
}
