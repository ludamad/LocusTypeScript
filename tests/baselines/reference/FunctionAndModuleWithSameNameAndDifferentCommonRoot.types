=== tests/cases/conformance/internalModules/DeclarationMerging/function.ts ===
module A {
>A : typeof A, Symbol(A, Decl(function.ts, 0, 0))

    export function Point() {
>Point : () => { x: number; y: number; }, Symbol(Point, Decl(function.ts, 0, 10))

        return { x: 0, y: 0 };
>{ x: 0, y: 0 } : { x: number; y: number; }
>x : number, Symbol(x, Decl(function.ts, 2, 16))
>0 : number
>y : number, Symbol(y, Decl(function.ts, 2, 22))
>0 : number
    }
}

=== tests/cases/conformance/internalModules/DeclarationMerging/module.ts ===
module B {
>B : typeof B, Symbol(B, Decl(module.ts, 0, 0))

    export module Point {
>Point : typeof Point, Symbol(Point, Decl(module.ts, 0, 10))

        export var Origin = { x: 0, y: 0 };
>Origin : { x: number; y: number; }, Symbol(Origin, Decl(module.ts, 2, 18))
>{ x: 0, y: 0 } : { x: number; y: number; }
>x : number, Symbol(x, Decl(module.ts, 2, 29))
>0 : number
>y : number, Symbol(y, Decl(module.ts, 2, 35))
>0 : number
    }
}

=== tests/cases/conformance/internalModules/DeclarationMerging/test.ts ===
var fn: () => { x: number; y: number };
>fn : () => { x: number; y: number; }, Symbol(fn, Decl(test.ts, 0, 3), Decl(test.ts, 1, 3))
>x : number, Symbol(x, Decl(test.ts, 0, 15))
>y : number, Symbol(y, Decl(test.ts, 0, 26))

var fn = A.Point;
>fn : () => { x: number; y: number; }, Symbol(fn, Decl(test.ts, 0, 3), Decl(test.ts, 1, 3))
>A.Point : () => { x: number; y: number; }, Symbol(A.Point, Decl(function.ts, 0, 10))
>A : typeof A, Symbol(A, Decl(function.ts, 0, 0))
>Point : () => { x: number; y: number; }, Symbol(A.Point, Decl(function.ts, 0, 10))

var cl: { x: number; y: number; }
>cl : { x: number; y: number; }, Symbol(cl, Decl(test.ts, 3, 3), Decl(test.ts, 4, 3))
>x : number, Symbol(x, Decl(test.ts, 3, 9))
>y : number, Symbol(y, Decl(test.ts, 3, 20))

var cl = B.Point.Origin;
>cl : { x: number; y: number; }, Symbol(cl, Decl(test.ts, 3, 3), Decl(test.ts, 4, 3))
>B.Point.Origin : { x: number; y: number; }, Symbol(B.Point.Origin, Decl(module.ts, 2, 18))
>B.Point : typeof B.Point, Symbol(B.Point, Decl(module.ts, 0, 10))
>B : typeof B, Symbol(B, Decl(module.ts, 0, 0))
>Point : typeof B.Point, Symbol(B.Point, Decl(module.ts, 0, 10))
>Origin : { x: number; y: number; }, Symbol(B.Point.Origin, Decl(module.ts, 2, 18))

