=== tests/cases/conformance/es6/Symbols/symbolProperty21.ts ===
interface I<T, U> {
>I : I<T, U>, Symbol(I,Decl(symbolProperty21.ts,0,0))
>T : T, Symbol(T,Decl(symbolProperty21.ts,0,12))
>U : U, Symbol(U,Decl(symbolProperty21.ts,0,14))

    [Symbol.unscopables]: T;
>Symbol.unscopables : symbol, Symbol(SymbolConstructor.unscopables,Decl(lib.d.ts,1254,24))
>Symbol : SymbolConstructor, Symbol(Symbol,Decl(lib.d.ts,1186,52),Decl(lib.d.ts,1262,11))
>unscopables : symbol, Symbol(SymbolConstructor.unscopables,Decl(lib.d.ts,1254,24))
>T : T, Symbol(T,Decl(symbolProperty21.ts,0,12))

    [Symbol.isConcatSpreadable]: U;
>Symbol.isConcatSpreadable : symbol, Symbol(SymbolConstructor.isConcatSpreadable,Decl(lib.d.ts,1230,24))
>Symbol : SymbolConstructor, Symbol(Symbol,Decl(lib.d.ts,1186,52),Decl(lib.d.ts,1262,11))
>isConcatSpreadable : symbol, Symbol(SymbolConstructor.isConcatSpreadable,Decl(lib.d.ts,1230,24))
>U : U, Symbol(U,Decl(symbolProperty21.ts,0,14))
}

declare function foo<T, U>(p: I<T, U>): { t: T; u: U };
>foo : <T, U>(p: I<T, U>) => { t: T; u: U; }, Symbol(foo,Decl(symbolProperty21.ts,3,1))
>T : T, Symbol(T,Decl(symbolProperty21.ts,5,21))
>U : U, Symbol(U,Decl(symbolProperty21.ts,5,23))
>p : I<T, U>, Symbol(p,Decl(symbolProperty21.ts,5,27))
>I : I<T, U>, Symbol(I,Decl(symbolProperty21.ts,0,0))
>T : T, Symbol(T,Decl(symbolProperty21.ts,5,21))
>U : U, Symbol(U,Decl(symbolProperty21.ts,5,23))
>t : T, Symbol(t,Decl(symbolProperty21.ts,5,41))
>T : T, Symbol(T,Decl(symbolProperty21.ts,5,21))
>u : U, Symbol(u,Decl(symbolProperty21.ts,5,47))
>U : U, Symbol(U,Decl(symbolProperty21.ts,5,23))

foo({
>foo({    [Symbol.isConcatSpreadable]: "",    [Symbol.toPrimitive]: 0,    [Symbol.unscopables]: true}) : { t: boolean; u: string; }
>foo : <T, U>(p: I<T, U>) => { t: T; u: U; }, Symbol(foo,Decl(symbolProperty21.ts,3,1))
>{    [Symbol.isConcatSpreadable]: "",    [Symbol.toPrimitive]: 0,    [Symbol.unscopables]: true} : { [Symbol.isConcatSpreadable]: string; [Symbol.toPrimitive]: number; [Symbol.unscopables]: boolean; }

    [Symbol.isConcatSpreadable]: "",
>Symbol.isConcatSpreadable : symbol, Symbol(SymbolConstructor.isConcatSpreadable,Decl(lib.d.ts,1230,24))
>Symbol : SymbolConstructor, Symbol(Symbol,Decl(lib.d.ts,1186,52),Decl(lib.d.ts,1262,11))
>isConcatSpreadable : symbol, Symbol(SymbolConstructor.isConcatSpreadable,Decl(lib.d.ts,1230,24))
>"" : string

    [Symbol.toPrimitive]: 0,
>Symbol.toPrimitive : symbol, Symbol(SymbolConstructor.toPrimitive,Decl(lib.d.ts,1242,21))
>Symbol : SymbolConstructor, Symbol(Symbol,Decl(lib.d.ts,1186,52),Decl(lib.d.ts,1262,11))
>toPrimitive : symbol, Symbol(SymbolConstructor.toPrimitive,Decl(lib.d.ts,1242,21))
>0 : number

    [Symbol.unscopables]: true
>Symbol.unscopables : symbol, Symbol(SymbolConstructor.unscopables,Decl(lib.d.ts,1254,24))
>Symbol : SymbolConstructor, Symbol(Symbol,Decl(lib.d.ts,1186,52),Decl(lib.d.ts,1262,11))
>unscopables : symbol, Symbol(SymbolConstructor.unscopables,Decl(lib.d.ts,1254,24))
>true : boolean

});
