=== tests/cases/compiler/specializationError.ts ===
interface Promise<T> {
>Promise : Promise<T>, Symbol(Promise,Decl(specializationError.ts,0,0))
>T : T, Symbol(T,Decl(specializationError.ts,0,18))

    then<U>(value: T): void;
>then : <U>(value: T) => void, Symbol(then,Decl(specializationError.ts,0,22))
>U : U, Symbol(U,Decl(specializationError.ts,1,9))
>value : T, Symbol(value,Decl(specializationError.ts,1,12))
>T : T, Symbol(T,Decl(specializationError.ts,0,18))
}

interface Bar {
>Bar : Bar, Symbol(Bar,Decl(specializationError.ts,2,1))

    bar(value: "Menu"): Promise<string>;
>bar : { (value: "Menu"): Promise<string>; <T>(value: string, element: string): Promise<T>; <T>(value: string): Promise<T>; }, Symbol(bar,Decl(specializationError.ts,4,15),Decl(specializationError.ts,5,40),Decl(specializationError.ts,6,55))
>value : "Menu", Symbol(value,Decl(specializationError.ts,5,8))
>Promise : Promise<T>, Symbol(Promise,Decl(specializationError.ts,0,0))

    bar<T>(value: string, element: string): Promise<T>;
>bar : { (value: "Menu"): Promise<string>; <T>(value: string, element: string): Promise<T>; <T>(value: string): Promise<T>; }, Symbol(bar,Decl(specializationError.ts,4,15),Decl(specializationError.ts,5,40),Decl(specializationError.ts,6,55))
>T : T, Symbol(T,Decl(specializationError.ts,6,8))
>value : string, Symbol(value,Decl(specializationError.ts,6,11))
>element : string, Symbol(element,Decl(specializationError.ts,6,25))
>Promise : Promise<T>, Symbol(Promise,Decl(specializationError.ts,0,0))
>T : T, Symbol(T,Decl(specializationError.ts,6,8))

    bar<T>(value: string): Promise<T>;
>bar : { (value: "Menu"): Promise<string>; <T>(value: string, element: string): Promise<T>; <T>(value: string): Promise<T>; }, Symbol(bar,Decl(specializationError.ts,4,15),Decl(specializationError.ts,5,40),Decl(specializationError.ts,6,55))
>T : T, Symbol(T,Decl(specializationError.ts,7,8))
>value : string, Symbol(value,Decl(specializationError.ts,7,11))
>Promise : Promise<T>, Symbol(Promise,Decl(specializationError.ts,0,0))
>T : T, Symbol(T,Decl(specializationError.ts,7,8))
}

