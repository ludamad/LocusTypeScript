=== tests/cases/conformance/types/typeRelationships/recursiveTypes/arrayLiteralsWithRecursiveGenerics.ts ===
class List<T> {
>List : List<T>, Symbol(List,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,0))
>T : T, Symbol(T,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,11))

    data: T;
>data : T, Symbol(data,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,15))
>T : T, Symbol(T,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,11))

    next: List<List<T>>;
>next : List<List<T>>, Symbol(next,Decl(arrayLiteralsWithRecursiveGenerics.ts,1,12))
>List : List<T>, Symbol(List,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,0))
>List : List<T>, Symbol(List,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,0))
>T : T, Symbol(T,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,11))
}

class DerivedList<U> extends List<U> {
>DerivedList : DerivedList<U>, Symbol(DerivedList,Decl(arrayLiteralsWithRecursiveGenerics.ts,3,1))
>U : U, Symbol(U,Decl(arrayLiteralsWithRecursiveGenerics.ts,5,18))
>List : List<T>, Symbol(List,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,0))
>U : U, Symbol(U,Decl(arrayLiteralsWithRecursiveGenerics.ts,5,18))

    foo: U;
>foo : U, Symbol(foo,Decl(arrayLiteralsWithRecursiveGenerics.ts,5,38))
>U : U, Symbol(U,Decl(arrayLiteralsWithRecursiveGenerics.ts,5,18))

    // next: List<List<U>>
}

class MyList<T> {
>MyList : MyList<T>, Symbol(MyList,Decl(arrayLiteralsWithRecursiveGenerics.ts,8,1))
>T : T, Symbol(T,Decl(arrayLiteralsWithRecursiveGenerics.ts,10,13))

    data: T;
>data : T, Symbol(data,Decl(arrayLiteralsWithRecursiveGenerics.ts,10,17))
>T : T, Symbol(T,Decl(arrayLiteralsWithRecursiveGenerics.ts,10,13))

    next: MyList<MyList<T>>;
>next : MyList<MyList<T>>, Symbol(next,Decl(arrayLiteralsWithRecursiveGenerics.ts,11,12))
>MyList : MyList<T>, Symbol(MyList,Decl(arrayLiteralsWithRecursiveGenerics.ts,8,1))
>MyList : MyList<T>, Symbol(MyList,Decl(arrayLiteralsWithRecursiveGenerics.ts,8,1))
>T : T, Symbol(T,Decl(arrayLiteralsWithRecursiveGenerics.ts,10,13))
}

var list: List<number>;
>list : List<number>, Symbol(list,Decl(arrayLiteralsWithRecursiveGenerics.ts,15,3))
>List : List<T>, Symbol(List,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,0))

var list2: List<string>;
>list2 : List<string>, Symbol(list2,Decl(arrayLiteralsWithRecursiveGenerics.ts,16,3))
>List : List<T>, Symbol(List,Decl(arrayLiteralsWithRecursiveGenerics.ts,0,0))

var myList: MyList<number>;
>myList : MyList<number>, Symbol(myList,Decl(arrayLiteralsWithRecursiveGenerics.ts,17,3))
>MyList : MyList<T>, Symbol(MyList,Decl(arrayLiteralsWithRecursiveGenerics.ts,8,1))

var xs = [list, myList]; // {}[]
>xs : List<number>[], Symbol(xs,Decl(arrayLiteralsWithRecursiveGenerics.ts,19,3))
>[list, myList] : List<number>[]
>list : List<number>, Symbol(list,Decl(arrayLiteralsWithRecursiveGenerics.ts,15,3))
>myList : MyList<number>, Symbol(myList,Decl(arrayLiteralsWithRecursiveGenerics.ts,17,3))

var ys = [list, list2]; // {}[]
>ys : (List<number> | List<string>)[], Symbol(ys,Decl(arrayLiteralsWithRecursiveGenerics.ts,20,3))
>[list, list2] : (List<number> | List<string>)[]
>list : List<number>, Symbol(list,Decl(arrayLiteralsWithRecursiveGenerics.ts,15,3))
>list2 : List<string>, Symbol(list2,Decl(arrayLiteralsWithRecursiveGenerics.ts,16,3))

var zs = [list, null]; // List<number>[]
>zs : List<number>[], Symbol(zs,Decl(arrayLiteralsWithRecursiveGenerics.ts,21,3))
>[list, null] : List<number>[]
>list : List<number>, Symbol(list,Decl(arrayLiteralsWithRecursiveGenerics.ts,15,3))
>null : null

var myDerivedList: DerivedList<number>;
>myDerivedList : DerivedList<number>, Symbol(myDerivedList,Decl(arrayLiteralsWithRecursiveGenerics.ts,23,3))
>DerivedList : DerivedList<U>, Symbol(DerivedList,Decl(arrayLiteralsWithRecursiveGenerics.ts,3,1))

var as = [list, myDerivedList]; // List<number>[]
>as : List<number>[], Symbol(as,Decl(arrayLiteralsWithRecursiveGenerics.ts,24,3))
>[list, myDerivedList] : List<number>[]
>list : List<number>, Symbol(list,Decl(arrayLiteralsWithRecursiveGenerics.ts,15,3))
>myDerivedList : DerivedList<number>, Symbol(myDerivedList,Decl(arrayLiteralsWithRecursiveGenerics.ts,23,3))

