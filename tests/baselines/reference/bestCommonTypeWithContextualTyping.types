=== tests/cases/compiler/bestCommonTypeWithContextualTyping.ts ===
interface Contextual {
>Contextual : Contextual, Symbol(Contextual, Decl(bestCommonTypeWithContextualTyping.ts, 0, 0))

    dummy;
>dummy : any, Symbol(dummy, Decl(bestCommonTypeWithContextualTyping.ts, 0, 22))

    p?: number;
>p : number, Symbol(p, Decl(bestCommonTypeWithContextualTyping.ts, 1, 10))
}

interface Ellement {
>Ellement : Ellement, Symbol(Ellement, Decl(bestCommonTypeWithContextualTyping.ts, 3, 1))

    dummy;
>dummy : any, Symbol(dummy, Decl(bestCommonTypeWithContextualTyping.ts, 5, 20))

    p: any;
>p : any, Symbol(p, Decl(bestCommonTypeWithContextualTyping.ts, 6, 10))
}

var e: Ellement;
>e : Ellement, Symbol(e, Decl(bestCommonTypeWithContextualTyping.ts, 10, 3))
>Ellement : Ellement, Symbol(Ellement, Decl(bestCommonTypeWithContextualTyping.ts, 3, 1))

// All of these should pass. Neither type is a supertype of the other, but the RHS should
// always use Ellement in these examples (not Contextual). Because Ellement is assignable
// to Contextual, no errors.
var arr: Contextual[] = [e]; // Ellement[]
>arr : Contextual[], Symbol(arr, Decl(bestCommonTypeWithContextualTyping.ts, 15, 3))
>Contextual : Contextual, Symbol(Contextual, Decl(bestCommonTypeWithContextualTyping.ts, 0, 0))
>[e] : Ellement[]
>e : Ellement, Symbol(e, Decl(bestCommonTypeWithContextualTyping.ts, 10, 3))

var obj: { [s: string]: Contextual } = { s: e }; // { s: Ellement; [s: string]: Ellement }
>obj : { [s: string]: Contextual; }, Symbol(obj, Decl(bestCommonTypeWithContextualTyping.ts, 16, 3))
>s : string, Symbol(s, Decl(bestCommonTypeWithContextualTyping.ts, 16, 12))
>Contextual : Contextual, Symbol(Contextual, Decl(bestCommonTypeWithContextualTyping.ts, 0, 0))
>{ s: e } : { [x: string]: Ellement; s: Ellement; }
>s : Ellement, Symbol(s, Decl(bestCommonTypeWithContextualTyping.ts, 16, 40))
>e : Ellement, Symbol(e, Decl(bestCommonTypeWithContextualTyping.ts, 10, 3))

var conditional: Contextual = null ? e : e; // Ellement
>conditional : Contextual, Symbol(conditional, Decl(bestCommonTypeWithContextualTyping.ts, 18, 3))
>Contextual : Contextual, Symbol(Contextual, Decl(bestCommonTypeWithContextualTyping.ts, 0, 0))
>null ? e : e : Ellement
>null : null
>e : Ellement, Symbol(e, Decl(bestCommonTypeWithContextualTyping.ts, 10, 3))
>e : Ellement, Symbol(e, Decl(bestCommonTypeWithContextualTyping.ts, 10, 3))

var contextualOr: Contextual = e || e; // Ellement
>contextualOr : Contextual, Symbol(contextualOr, Decl(bestCommonTypeWithContextualTyping.ts, 19, 3))
>Contextual : Contextual, Symbol(Contextual, Decl(bestCommonTypeWithContextualTyping.ts, 0, 0))
>e || e : Ellement
>e : Ellement, Symbol(e, Decl(bestCommonTypeWithContextualTyping.ts, 10, 3))
>e : Ellement, Symbol(e, Decl(bestCommonTypeWithContextualTyping.ts, 10, 3))

