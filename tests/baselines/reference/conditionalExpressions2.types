=== tests/cases/compiler/conditionalExpressions2.ts ===
var a = false ? 1 : null;
>a : number, Symbol(a, Decl(conditionalExpressions2.ts, 0, 3))
>false ? 1 : null : number
>false : boolean
>1 : number
>null : null

var b = false ? undefined : 0;
>b : number, Symbol(b, Decl(conditionalExpressions2.ts, 1, 3))
>false ? undefined : 0 : number
>false : boolean
>undefined : undefined, Symbol(undefined)
>0 : number

var c = false ? 1 : 0;
>c : number, Symbol(c, Decl(conditionalExpressions2.ts, 2, 3))
>false ? 1 : 0 : number
>false : boolean
>1 : number
>0 : number

var d = false ? false : true;
>d : boolean, Symbol(d, Decl(conditionalExpressions2.ts, 3, 3))
>false ? false : true : boolean
>false : boolean
>false : boolean
>true : boolean

var e = false ? "foo" : "bar";
>e : string, Symbol(e, Decl(conditionalExpressions2.ts, 4, 3))
>false ? "foo" : "bar" : string
>false : boolean
>"foo" : string
>"bar" : string

var f = false ? null : undefined;
>f : any, Symbol(f, Decl(conditionalExpressions2.ts, 5, 3))
>false ? null : undefined : null
>false : boolean
>null : null
>undefined : undefined, Symbol(undefined)

var g = true ? {g:5} : null;
>g : { g: number; }, Symbol(g, Decl(conditionalExpressions2.ts, 6, 3))
>true ? {g:5} : null : { g: number; }
>true : boolean
>{g:5} : { g: number; }
>g : number, Symbol(g, Decl(conditionalExpressions2.ts, 6, 16))
>5 : number
>null : null

var h = [{h:5}, null];
>h : { h: number; }[], Symbol(h, Decl(conditionalExpressions2.ts, 7, 3))
>[{h:5}, null] : { h: number; }[]
>{h:5} : { h: number; }
>h : number, Symbol(h, Decl(conditionalExpressions2.ts, 7, 10))
>5 : number
>null : null

function i() { if (true) { return { x: 5 }; } else { return null; } }
>i : () => { x: number; }, Symbol(i, Decl(conditionalExpressions2.ts, 7, 22))
>true : boolean
>{ x: 5 } : { x: number; }
>x : number, Symbol(x, Decl(conditionalExpressions2.ts, 8, 35))
>5 : number
>null : null

