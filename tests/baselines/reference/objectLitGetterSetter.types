=== tests/cases/compiler/objectLitGetterSetter.ts ===
            var obj = {};
>obj : {}, Symbol(obj, Decl(objectLitGetterSetter.ts, 0, 15))
>{} : {}

            Object.defineProperty(obj, "accProperty", <PropertyDescriptor>({
>Object.defineProperty(obj, "accProperty", <PropertyDescriptor>({                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            })) : any
>Object.defineProperty : (o: any, p: string, attributes: PropertyDescriptor) => any, Symbol(ObjectConstructor.defineProperty, Decl(lib.d.ts, 160, 60))
>Object : ObjectConstructor, Symbol(Object, Decl(lib.d.ts, 92, 1), Decl(lib.d.ts, 223, 11))
>defineProperty : (o: any, p: string, attributes: PropertyDescriptor) => any, Symbol(ObjectConstructor.defineProperty, Decl(lib.d.ts, 160, 60))
>obj : {}, Symbol(obj, Decl(objectLitGetterSetter.ts, 0, 15))
>"accProperty" : string
><PropertyDescriptor>({                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            }) : PropertyDescriptor
>PropertyDescriptor : PropertyDescriptor, Symbol(PropertyDescriptor, Decl(lib.d.ts, 79, 66))
>({                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            }) : { get: () => number; set: (v: any) => void; }
>{                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            } : { get: () => number; set: (v: any) => void; }

                get: function () {
>get : () => number, Symbol(get, Decl(objectLitGetterSetter.ts, 1, 76))
>function () {                    eval("public = 1;");                    return 11;                } : () => number

                    eval("public = 1;");
>eval("public = 1;") : any
>eval : (x: string) => any, Symbol(eval, Decl(lib.d.ts, 22, 29))
>"public = 1;" : string

                    return 11;
>11 : number

                },
                set: function (v) {
>set : (v: any) => void, Symbol(set, Decl(objectLitGetterSetter.ts, 5, 18))
>function (v) {                } : (v: any) => void
>v : any, Symbol(v, Decl(objectLitGetterSetter.ts, 6, 31))
                }
            }))

