=== tests/cases/compiler/generics1NoError.ts ===
interface A { a: string; }
>A : A, Symbol(A,Decl(generics1NoError.ts,0,0))
>a : string, Symbol(a,Decl(generics1NoError.ts,0,13))

interface B extends A { b: string; }
>B : B, Symbol(B,Decl(generics1NoError.ts,0,26))
>A : A, Symbol(A,Decl(generics1NoError.ts,0,0))
>b : string, Symbol(b,Decl(generics1NoError.ts,1,23))

interface C extends B { c: string; }
>C : C, Symbol(C,Decl(generics1NoError.ts,1,36))
>B : B, Symbol(B,Decl(generics1NoError.ts,0,26))
>c : string, Symbol(c,Decl(generics1NoError.ts,2,23))

interface G<T, U extends B> {
>G : G<T, U>, Symbol(G,Decl(generics1NoError.ts,2,36))
>T : T, Symbol(T,Decl(generics1NoError.ts,3,12))
>U : U, Symbol(U,Decl(generics1NoError.ts,3,14))
>B : B, Symbol(B,Decl(generics1NoError.ts,0,26))

    x: T;
>x : T, Symbol(x,Decl(generics1NoError.ts,3,29))
>T : T, Symbol(T,Decl(generics1NoError.ts,3,12))

    y: U;
>y : U, Symbol(y,Decl(generics1NoError.ts,4,9))
>U : U, Symbol(U,Decl(generics1NoError.ts,3,14))
}
var v1: G<A, C>;               // Ok
>v1 : G<A, C>, Symbol(v1,Decl(generics1NoError.ts,7,3))
>G : G<T, U>, Symbol(G,Decl(generics1NoError.ts,2,36))
>A : A, Symbol(A,Decl(generics1NoError.ts,0,0))
>C : C, Symbol(C,Decl(generics1NoError.ts,1,36))

var v2: G<{ a: string }, C>;   // Ok, equivalent to G<A, C>
>v2 : G<{ a: string; }, C>, Symbol(v2,Decl(generics1NoError.ts,8,3))
>G : G<T, U>, Symbol(G,Decl(generics1NoError.ts,2,36))
>a : string, Symbol(a,Decl(generics1NoError.ts,8,11))
>C : C, Symbol(C,Decl(generics1NoError.ts,1,36))

var v4: G<G<A, B>, C>;         // Ok
>v4 : G<G<A, B>, C>, Symbol(v4,Decl(generics1NoError.ts,9,3))
>G : G<T, U>, Symbol(G,Decl(generics1NoError.ts,2,36))
>G : G<T, U>, Symbol(G,Decl(generics1NoError.ts,2,36))
>A : A, Symbol(A,Decl(generics1NoError.ts,0,0))
>B : B, Symbol(B,Decl(generics1NoError.ts,0,26))
>C : C, Symbol(C,Decl(generics1NoError.ts,1,36))

