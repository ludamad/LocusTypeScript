=== tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithBooleanType.ts ===
// void  operator on boolean type
var BOOLEAN: boolean;
>BOOLEAN : boolean, Symbol(BOOLEAN,Decl(voidOperatorWithBooleanType.ts,1,3))

function foo(): boolean { return true; }
>foo : () => boolean, Symbol(foo,Decl(voidOperatorWithBooleanType.ts,1,21))
>true : boolean

class A {
>A : A, Symbol(A,Decl(voidOperatorWithBooleanType.ts,3,40))

    public a: boolean;
>a : boolean, Symbol(a,Decl(voidOperatorWithBooleanType.ts,5,9))

    static foo() { return false; }
>foo : () => boolean, Symbol(A.foo,Decl(voidOperatorWithBooleanType.ts,6,22))
>false : boolean
}
module M {
>M : typeof M, Symbol(M,Decl(voidOperatorWithBooleanType.ts,8,1))

    export var n: boolean;
>n : boolean, Symbol(n,Decl(voidOperatorWithBooleanType.ts,10,14))
}

var objA = new A();
>objA : A, Symbol(objA,Decl(voidOperatorWithBooleanType.ts,13,3))
>new A() : A
>A : typeof A, Symbol(A,Decl(voidOperatorWithBooleanType.ts,3,40))

// boolean type var
var ResultIsAny1 = void BOOLEAN;
>ResultIsAny1 : any, Symbol(ResultIsAny1,Decl(voidOperatorWithBooleanType.ts,16,3))
>void BOOLEAN : undefined
>BOOLEAN : boolean, Symbol(BOOLEAN,Decl(voidOperatorWithBooleanType.ts,1,3))

// boolean type literal
var ResultIsAny2 = void true;
>ResultIsAny2 : any, Symbol(ResultIsAny2,Decl(voidOperatorWithBooleanType.ts,19,3))
>void true : undefined
>true : boolean

var ResultIsAny3 = void { x: true, y: false };
>ResultIsAny3 : any, Symbol(ResultIsAny3,Decl(voidOperatorWithBooleanType.ts,20,3))
>void { x: true, y: false } : undefined
>{ x: true, y: false } : { x: boolean; y: boolean; }
>x : boolean, Symbol(x,Decl(voidOperatorWithBooleanType.ts,20,25))
>true : boolean
>y : boolean, Symbol(y,Decl(voidOperatorWithBooleanType.ts,20,34))
>false : boolean

// boolean type expressions
var ResultIsAny4 = void objA.a;
>ResultIsAny4 : any, Symbol(ResultIsAny4,Decl(voidOperatorWithBooleanType.ts,23,3))
>void objA.a : undefined
>objA.a : boolean, Symbol(A.a,Decl(voidOperatorWithBooleanType.ts,5,9))
>objA : A, Symbol(objA,Decl(voidOperatorWithBooleanType.ts,13,3))
>a : boolean, Symbol(A.a,Decl(voidOperatorWithBooleanType.ts,5,9))

var ResultIsAny5 = void M.n;
>ResultIsAny5 : any, Symbol(ResultIsAny5,Decl(voidOperatorWithBooleanType.ts,24,3))
>void M.n : undefined
>M.n : boolean, Symbol(M.n,Decl(voidOperatorWithBooleanType.ts,10,14))
>M : typeof M, Symbol(M,Decl(voidOperatorWithBooleanType.ts,8,1))
>n : boolean, Symbol(M.n,Decl(voidOperatorWithBooleanType.ts,10,14))

var ResultIsAny6 = void foo();
>ResultIsAny6 : any, Symbol(ResultIsAny6,Decl(voidOperatorWithBooleanType.ts,25,3))
>void foo() : undefined
>foo() : boolean
>foo : () => boolean, Symbol(foo,Decl(voidOperatorWithBooleanType.ts,1,21))

var ResultIsAny7 = void A.foo();
>ResultIsAny7 : any, Symbol(ResultIsAny7,Decl(voidOperatorWithBooleanType.ts,26,3))
>void A.foo() : undefined
>A.foo() : boolean
>A.foo : () => boolean, Symbol(A.foo,Decl(voidOperatorWithBooleanType.ts,6,22))
>A : typeof A, Symbol(A,Decl(voidOperatorWithBooleanType.ts,3,40))
>foo : () => boolean, Symbol(A.foo,Decl(voidOperatorWithBooleanType.ts,6,22))

// multiple void  operator
var ResultIsAny8 = void void BOOLEAN;
>ResultIsAny8 : any, Symbol(ResultIsAny8,Decl(voidOperatorWithBooleanType.ts,29,3))
>void void BOOLEAN : undefined
>void BOOLEAN : undefined
>BOOLEAN : boolean, Symbol(BOOLEAN,Decl(voidOperatorWithBooleanType.ts,1,3))

// miss assignment operators
void true;
>void true : undefined
>true : boolean

void BOOLEAN;
>void BOOLEAN : undefined
>BOOLEAN : boolean, Symbol(BOOLEAN,Decl(voidOperatorWithBooleanType.ts,1,3))

void foo();
>void foo() : undefined
>foo() : boolean
>foo : () => boolean, Symbol(foo,Decl(voidOperatorWithBooleanType.ts,1,21))

void true, false;
>void true, false : boolean
>void true : undefined
>true : boolean
>false : boolean

void objA.a;
>void objA.a : undefined
>objA.a : boolean, Symbol(A.a,Decl(voidOperatorWithBooleanType.ts,5,9))
>objA : A, Symbol(objA,Decl(voidOperatorWithBooleanType.ts,13,3))
>a : boolean, Symbol(A.a,Decl(voidOperatorWithBooleanType.ts,5,9))

void M.n;
>void M.n : undefined
>M.n : boolean, Symbol(M.n,Decl(voidOperatorWithBooleanType.ts,10,14))
>M : typeof M, Symbol(M,Decl(voidOperatorWithBooleanType.ts,8,1))
>n : boolean, Symbol(M.n,Decl(voidOperatorWithBooleanType.ts,10,14))

