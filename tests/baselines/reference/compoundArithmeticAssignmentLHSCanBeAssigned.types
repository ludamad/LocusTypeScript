=== tests/cases/conformance/expressions/assignmentOperator/compoundArithmeticAssignmentLHSCanBeAssigned.ts ===
enum E { a, b, c }
>E : E, Symbol(E,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,0,0))
>a : E, Symbol(E.a,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,0,8))
>b : E, Symbol(E.b,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,0,11))
>c : E, Symbol(E.c,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,0,14))

var a: any;
>a : any, Symbol(a,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,2,3))

var b: number;
>b : number, Symbol(b,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,3,3))

var c: E;
>c : E, Symbol(c,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,4,3))
>E : E, Symbol(E,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,0,0))

var x1: any;
>x1 : any, Symbol(x1,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,6,3))

x1 *= a;
>x1 *= a : number
>x1 : any, Symbol(x1,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,6,3))
>a : any, Symbol(a,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,2,3))

x1 *= b;
>x1 *= b : number
>x1 : any, Symbol(x1,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,6,3))
>b : number, Symbol(b,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,3,3))

x1 *= c;
>x1 *= c : number
>x1 : any, Symbol(x1,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,6,3))
>c : E, Symbol(c,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,4,3))

x1 *= null;
>x1 *= null : number
>x1 : any, Symbol(x1,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,6,3))
>null : null

x1 *= undefined;
>x1 *= undefined : number
>x1 : any, Symbol(x1,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,6,3))
>undefined : undefined, Symbol(undefined)

var x2: number;
>x2 : number, Symbol(x2,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,13,3))

x2 *= a;
>x2 *= a : number
>x2 : number, Symbol(x2,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,13,3))
>a : any, Symbol(a,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,2,3))

x2 *= b;
>x2 *= b : number
>x2 : number, Symbol(x2,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,13,3))
>b : number, Symbol(b,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,3,3))

x2 *= c;
>x2 *= c : number
>x2 : number, Symbol(x2,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,13,3))
>c : E, Symbol(c,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,4,3))

x2 *= null;
>x2 *= null : number
>x2 : number, Symbol(x2,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,13,3))
>null : null

x2 *= undefined;
>x2 *= undefined : number
>x2 : number, Symbol(x2,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,13,3))
>undefined : undefined, Symbol(undefined)

var x3: E;
>x3 : E, Symbol(x3,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,20,3))
>E : E, Symbol(E,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,0,0))

x3 *= a;
>x3 *= a : number
>x3 : E, Symbol(x3,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,20,3))
>a : any, Symbol(a,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,2,3))

x3 *= b;
>x3 *= b : number
>x3 : E, Symbol(x3,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,20,3))
>b : number, Symbol(b,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,3,3))

x3 *= c;
>x3 *= c : number
>x3 : E, Symbol(x3,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,20,3))
>c : E, Symbol(c,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,4,3))

x3 *= null;
>x3 *= null : number
>x3 : E, Symbol(x3,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,20,3))
>null : null

x3 *= undefined;
>x3 *= undefined : number
>x3 : E, Symbol(x3,Decl(compoundArithmeticAssignmentLHSCanBeAssigned.ts,20,3))
>undefined : undefined, Symbol(undefined)

