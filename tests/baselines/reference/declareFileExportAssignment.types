=== tests/cases/compiler/declareFileExportAssignment.ts ===
module m2 {
>m2 : { (): connectExport; test1: connectModule; test2(): connectModule; }, Symbol(m2, Decl(declareFileExportAssignment.ts, 0, 0), Decl(declareFileExportAssignment.ts, 11, 3))

    export interface connectModule {
>connectModule : connectModule, Symbol(connectModule, Decl(declareFileExportAssignment.ts, 0, 11))

        (res, req, next): void;
>res : any, Symbol(res, Decl(declareFileExportAssignment.ts, 2, 9))
>req : any, Symbol(req, Decl(declareFileExportAssignment.ts, 2, 13))
>next : any, Symbol(next, Decl(declareFileExportAssignment.ts, 2, 18))
    }
    export interface connectExport {
>connectExport : connectExport, Symbol(connectExport, Decl(declareFileExportAssignment.ts, 3, 5))

        use: (mod: connectModule) => connectExport;
>use : (mod: connectModule) => connectExport, Symbol(use, Decl(declareFileExportAssignment.ts, 4, 36))
>mod : connectModule, Symbol(mod, Decl(declareFileExportAssignment.ts, 5, 14))
>connectModule : connectModule, Symbol(connectModule, Decl(declareFileExportAssignment.ts, 0, 11))
>connectExport : connectExport, Symbol(connectExport, Decl(declareFileExportAssignment.ts, 3, 5))

        listen: (port: number) => void;
>listen : (port: number) => void, Symbol(listen, Decl(declareFileExportAssignment.ts, 5, 51))
>port : number, Symbol(port, Decl(declareFileExportAssignment.ts, 6, 17))
    }

}

var m2: {
>m2 : { (): m2.connectExport; test1: m2.connectModule; test2(): m2.connectModule; }, Symbol(m2, Decl(declareFileExportAssignment.ts, 0, 0), Decl(declareFileExportAssignment.ts, 11, 3))

    (): m2.connectExport;
>m2 : any, Symbol(m2, Decl(declareFileExportAssignment.ts, 0, 0), Decl(declareFileExportAssignment.ts, 11, 3))
>connectExport : m2.connectExport, Symbol(m2.connectExport, Decl(declareFileExportAssignment.ts, 3, 5))

    test1: m2.connectModule;
>test1 : m2.connectModule, Symbol(test1, Decl(declareFileExportAssignment.ts, 12, 25))
>m2 : any, Symbol(m2, Decl(declareFileExportAssignment.ts, 0, 0), Decl(declareFileExportAssignment.ts, 11, 3))
>connectModule : m2.connectModule, Symbol(m2.connectModule, Decl(declareFileExportAssignment.ts, 0, 11))

    test2(): m2.connectModule;
>test2 : () => m2.connectModule, Symbol(test2, Decl(declareFileExportAssignment.ts, 13, 28))
>m2 : any, Symbol(m2, Decl(declareFileExportAssignment.ts, 0, 0), Decl(declareFileExportAssignment.ts, 11, 3))
>connectModule : m2.connectModule, Symbol(m2.connectModule, Decl(declareFileExportAssignment.ts, 0, 11))

};

export = m2;
>m2 : { (): m2.connectExport; test1: m2.connectModule; test2(): m2.connectModule; }, Symbol(m2, Decl(declareFileExportAssignment.ts, 0, 0), Decl(declareFileExportAssignment.ts, 11, 3))

