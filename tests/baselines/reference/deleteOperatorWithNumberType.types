=== tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithNumberType.ts ===
// delete  operator on number type
var NUMBER: number;
>NUMBER : number, Symbol(NUMBER,Decl(deleteOperatorWithNumberType.ts,1,3))

var NUMBER1: number[] = [1, 2];
>NUMBER1 : number[], Symbol(NUMBER1,Decl(deleteOperatorWithNumberType.ts,2,3))
>[1, 2] : number[]
>1 : number
>2 : number

function foo(): number { return 1; }
>foo : () => number, Symbol(foo,Decl(deleteOperatorWithNumberType.ts,2,31))
>1 : number

class A {
>A : A, Symbol(A,Decl(deleteOperatorWithNumberType.ts,4,36))

    public a: number;
>a : number, Symbol(a,Decl(deleteOperatorWithNumberType.ts,6,9))

    static foo() { return 1; }
>foo : () => number, Symbol(A.foo,Decl(deleteOperatorWithNumberType.ts,7,21))
>1 : number
}
module M {
>M : typeof M, Symbol(M,Decl(deleteOperatorWithNumberType.ts,9,1))

    export var n: number;
>n : number, Symbol(n,Decl(deleteOperatorWithNumberType.ts,11,14))
}

var objA = new A();
>objA : A, Symbol(objA,Decl(deleteOperatorWithNumberType.ts,14,3))
>new A() : A
>A : typeof A, Symbol(A,Decl(deleteOperatorWithNumberType.ts,4,36))

// number type var
var ResultIsBoolean1 = delete NUMBER;
>ResultIsBoolean1 : boolean, Symbol(ResultIsBoolean1,Decl(deleteOperatorWithNumberType.ts,17,3))
>delete NUMBER : boolean
>NUMBER : number, Symbol(NUMBER,Decl(deleteOperatorWithNumberType.ts,1,3))

var ResultIsBoolean2 = delete NUMBER1;
>ResultIsBoolean2 : boolean, Symbol(ResultIsBoolean2,Decl(deleteOperatorWithNumberType.ts,18,3))
>delete NUMBER1 : boolean
>NUMBER1 : number[], Symbol(NUMBER1,Decl(deleteOperatorWithNumberType.ts,2,3))

// number type literal
var ResultIsBoolean3 = delete 1;
>ResultIsBoolean3 : boolean, Symbol(ResultIsBoolean3,Decl(deleteOperatorWithNumberType.ts,21,3))
>delete 1 : boolean
>1 : number

var ResultIsBoolean4 = delete { x: 1, y: 2};
>ResultIsBoolean4 : boolean, Symbol(ResultIsBoolean4,Decl(deleteOperatorWithNumberType.ts,22,3))
>delete { x: 1, y: 2} : boolean
>{ x: 1, y: 2} : { x: number; y: number; }
>x : number, Symbol(x,Decl(deleteOperatorWithNumberType.ts,22,31))
>1 : number
>y : number, Symbol(y,Decl(deleteOperatorWithNumberType.ts,22,37))
>2 : number

var ResultIsBoolean5 = delete { x: 1, y: (n: number) => { return n; } };
>ResultIsBoolean5 : boolean, Symbol(ResultIsBoolean5,Decl(deleteOperatorWithNumberType.ts,23,3))
>delete { x: 1, y: (n: number) => { return n; } } : boolean
>{ x: 1, y: (n: number) => { return n; } } : { x: number; y: (n: number) => number; }
>x : number, Symbol(x,Decl(deleteOperatorWithNumberType.ts,23,31))
>1 : number
>y : (n: number) => number, Symbol(y,Decl(deleteOperatorWithNumberType.ts,23,37))
>(n: number) => { return n; } : (n: number) => number
>n : number, Symbol(n,Decl(deleteOperatorWithNumberType.ts,23,42))
>n : number, Symbol(n,Decl(deleteOperatorWithNumberType.ts,23,42))

// number type expressions
var ResultIsBoolean6 = delete objA.a;
>ResultIsBoolean6 : boolean, Symbol(ResultIsBoolean6,Decl(deleteOperatorWithNumberType.ts,26,3))
>delete objA.a : boolean
>objA.a : number, Symbol(A.a,Decl(deleteOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(deleteOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(deleteOperatorWithNumberType.ts,6,9))

var ResultIsBoolean7 = delete M.n;
>ResultIsBoolean7 : boolean, Symbol(ResultIsBoolean7,Decl(deleteOperatorWithNumberType.ts,27,3))
>delete M.n : boolean
>M.n : number, Symbol(M.n,Decl(deleteOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(deleteOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(deleteOperatorWithNumberType.ts,11,14))

var ResultIsBoolean8 = delete NUMBER1[0];
>ResultIsBoolean8 : boolean, Symbol(ResultIsBoolean8,Decl(deleteOperatorWithNumberType.ts,28,3))
>delete NUMBER1[0] : boolean
>NUMBER1[0] : number
>NUMBER1 : number[], Symbol(NUMBER1,Decl(deleteOperatorWithNumberType.ts,2,3))
>0 : number

var ResultIsBoolean9 = delete foo();
>ResultIsBoolean9 : boolean, Symbol(ResultIsBoolean9,Decl(deleteOperatorWithNumberType.ts,29,3))
>delete foo() : boolean
>foo() : number
>foo : () => number, Symbol(foo,Decl(deleteOperatorWithNumberType.ts,2,31))

var ResultIsBoolean10 = delete A.foo();
>ResultIsBoolean10 : boolean, Symbol(ResultIsBoolean10,Decl(deleteOperatorWithNumberType.ts,30,3))
>delete A.foo() : boolean
>A.foo() : number
>A.foo : () => number, Symbol(A.foo,Decl(deleteOperatorWithNumberType.ts,7,21))
>A : typeof A, Symbol(A,Decl(deleteOperatorWithNumberType.ts,4,36))
>foo : () => number, Symbol(A.foo,Decl(deleteOperatorWithNumberType.ts,7,21))

var ResultIsBoolean11 = delete (NUMBER + NUMBER);
>ResultIsBoolean11 : boolean, Symbol(ResultIsBoolean11,Decl(deleteOperatorWithNumberType.ts,31,3))
>delete (NUMBER + NUMBER) : boolean
>(NUMBER + NUMBER) : number
>NUMBER + NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(deleteOperatorWithNumberType.ts,1,3))
>NUMBER : number, Symbol(NUMBER,Decl(deleteOperatorWithNumberType.ts,1,3))

// multiple delete  operator
var ResultIsBoolean12 = delete delete NUMBER;
>ResultIsBoolean12 : boolean, Symbol(ResultIsBoolean12,Decl(deleteOperatorWithNumberType.ts,34,3))
>delete delete NUMBER : boolean
>delete NUMBER : boolean
>NUMBER : number, Symbol(NUMBER,Decl(deleteOperatorWithNumberType.ts,1,3))

var ResultIsBoolean13 = delete delete delete (NUMBER + NUMBER);
>ResultIsBoolean13 : boolean, Symbol(ResultIsBoolean13,Decl(deleteOperatorWithNumberType.ts,35,3))
>delete delete delete (NUMBER + NUMBER) : boolean
>delete delete (NUMBER + NUMBER) : boolean
>delete (NUMBER + NUMBER) : boolean
>(NUMBER + NUMBER) : number
>NUMBER + NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(deleteOperatorWithNumberType.ts,1,3))
>NUMBER : number, Symbol(NUMBER,Decl(deleteOperatorWithNumberType.ts,1,3))

// miss assignment operators
delete 1;
>delete 1 : boolean
>1 : number

delete NUMBER;
>delete NUMBER : boolean
>NUMBER : number, Symbol(NUMBER,Decl(deleteOperatorWithNumberType.ts,1,3))

delete NUMBER1;
>delete NUMBER1 : boolean
>NUMBER1 : number[], Symbol(NUMBER1,Decl(deleteOperatorWithNumberType.ts,2,3))

delete foo();
>delete foo() : boolean
>foo() : number
>foo : () => number, Symbol(foo,Decl(deleteOperatorWithNumberType.ts,2,31))

delete objA.a;
>delete objA.a : boolean
>objA.a : number, Symbol(A.a,Decl(deleteOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(deleteOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(deleteOperatorWithNumberType.ts,6,9))

delete M.n;
>delete M.n : boolean
>M.n : number, Symbol(M.n,Decl(deleteOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(deleteOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(deleteOperatorWithNumberType.ts,11,14))

delete objA.a, M.n;
>delete objA.a, M.n : number
>delete objA.a : boolean
>objA.a : number, Symbol(A.a,Decl(deleteOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(deleteOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(deleteOperatorWithNumberType.ts,6,9))
>M.n : number, Symbol(M.n,Decl(deleteOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(deleteOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(deleteOperatorWithNumberType.ts,11,14))

