=== tests/cases/compiler/constEnumOnlyModuleMerging.ts ===
module Outer {
>Outer : typeof Outer, Symbol(Outer, Decl(constEnumOnlyModuleMerging.ts, 0, 0), Decl(constEnumOnlyModuleMerging.ts, 2, 1))

    export var x = 1;
>x : number, Symbol(x, Decl(constEnumOnlyModuleMerging.ts, 1, 14))
>1 : number
}

module Outer {
>Outer : typeof Outer, Symbol(Outer, Decl(constEnumOnlyModuleMerging.ts, 0, 0), Decl(constEnumOnlyModuleMerging.ts, 2, 1))

    export const enum A { X }
>A : A, Symbol(A, Decl(constEnumOnlyModuleMerging.ts, 4, 14))
>X : A, Symbol(A.X, Decl(constEnumOnlyModuleMerging.ts, 5, 25))
}

module B {
>B : typeof B, Symbol(B, Decl(constEnumOnlyModuleMerging.ts, 6, 1))

    import O = Outer;
>O : typeof O, Symbol(O, Decl(constEnumOnlyModuleMerging.ts, 8, 10))
>Outer : typeof O, Symbol(O, Decl(constEnumOnlyModuleMerging.ts, 0, 0), Decl(constEnumOnlyModuleMerging.ts, 2, 1))

    var x = O.A.X;
>x : O.A, Symbol(x, Decl(constEnumOnlyModuleMerging.ts, 10, 7))
>O.A.X : O.A, Symbol(O.A.X, Decl(constEnumOnlyModuleMerging.ts, 5, 25))
>O.A : typeof O.A, Symbol(O.A, Decl(constEnumOnlyModuleMerging.ts, 4, 14))
>O : typeof O, Symbol(O, Decl(constEnumOnlyModuleMerging.ts, 8, 10))
>A : typeof O.A, Symbol(O.A, Decl(constEnumOnlyModuleMerging.ts, 4, 14))
>X : O.A, Symbol(O.A.X, Decl(constEnumOnlyModuleMerging.ts, 5, 25))

    var y = O.x;
>y : number, Symbol(y, Decl(constEnumOnlyModuleMerging.ts, 11, 7))
>O.x : number, Symbol(O.x, Decl(constEnumOnlyModuleMerging.ts, 1, 14))
>O : typeof O, Symbol(O, Decl(constEnumOnlyModuleMerging.ts, 8, 10))
>x : number, Symbol(O.x, Decl(constEnumOnlyModuleMerging.ts, 1, 14))
}
