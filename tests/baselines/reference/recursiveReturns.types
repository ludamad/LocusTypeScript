=== tests/cases/compiler/recursiveReturns.ts ===
function R1() {
>R1 : () => void, Symbol(R1, Decl(recursiveReturns.ts, 0, 0))

	R1();
>R1() : void
>R1 : () => void, Symbol(R1, Decl(recursiveReturns.ts, 0, 0))

	return;
}

function R2() { R2(); }
>R2 : () => void, Symbol(R2, Decl(recursiveReturns.ts, 3, 1))
>R2() : void
>R2 : () => void, Symbol(R2, Decl(recursiveReturns.ts, 3, 1))

function R3(n:number) {
>R3 : (n: number) => void, Symbol(R3, Decl(recursiveReturns.ts, 5, 23))
>n : number, Symbol(n, Decl(recursiveReturns.ts, 7, 12))

	if (n == 0) {
>n == 0 : boolean
>n : number, Symbol(n, Decl(recursiveReturns.ts, 7, 12))
>0 : number

		//return;
	}
	else {
		R3(n--);
>R3(n--) : void
>R3 : (n: number) => void, Symbol(R3, Decl(recursiveReturns.ts, 5, 23))
>n-- : number
>n : number, Symbol(n, Decl(recursiveReturns.ts, 7, 12))
	}
}
