tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverloads.ts(7,5): error TS2512: All overload signatures must match with respect to modifier 'abstract'.
tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverloads.ts(10,14): error TS2512: All overload signatures must match with respect to modifier 'abstract'.
tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverloads.ts(12,14): error TS2512: All overload signatures must match with respect to modifier 'abstract'.
tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverloads.ts(15,5): error TS2391: Function implementation is missing or not immediately following the declaration.
tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverloads.ts(20,14): error TS2516: All declarations of an abstract member function must be consecutive.


==== tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverloads.ts (5 errors) ====
    abstract class A {
        abstract foo();
        abstract foo() : number;
        abstract foo();
        
        abstract bar();
        bar();
        ~~~
!!! error TS2512: All overload signatures must match with respect to modifier 'abstract'.
        abstract bar();
        
        abstract baz();
                 ~~~
!!! error TS2512: All overload signatures must match with respect to modifier 'abstract'.
        baz();
        abstract baz();
                 ~~~
!!! error TS2512: All overload signatures must match with respect to modifier 'abstract'.
        baz() {}
        
        qux();
        ~~~
!!! error TS2391: Function implementation is missing or not immediately following the declaration.
    }
    
    abstract class B {
        abstract foo() : number;
        abstract foo();
                 ~~~
!!! error TS2516: All declarations of an abstract member function must be consecutive.
        x : number;
        abstract foo();
        abstract foo();
    }