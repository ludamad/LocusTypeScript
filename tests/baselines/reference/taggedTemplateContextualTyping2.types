=== tests/cases/conformance/expressions/contextualTyping/taggedTemplateContextualTyping2.ts ===

function tempTag2(templateStrs: TemplateStringsArray, f: (x: number) => number, x: number): number;
>tempTag2 : { (templateStrs: TemplateStringsArray, f: (x: number) => number, x: number): number; (templateStrs: TemplateStringsArray, f: (x: string) => string, h: (y: string) => string, x: string): string; }
>templateStrs : TemplateStringsArray
>TemplateStringsArray : TemplateStringsArray
>f : (x: number) => number
>x : number
>x : number

function tempTag2(templateStrs: TemplateStringsArray, f: (x: string) => string, h: (y: string) => string, x: string): string;
>tempTag2 : { (templateStrs: TemplateStringsArray, f: (x: number) => number, x: number): number; (templateStrs: TemplateStringsArray, f: (x: string) => string, h: (y: string) => string, x: string): string; }
>templateStrs : TemplateStringsArray
>TemplateStringsArray : TemplateStringsArray
>f : (x: string) => string
>x : string
>h : (y: string) => string
>y : string
>x : string

function tempTag2(...rest: any[]): any {
>tempTag2 : { (templateStrs: TemplateStringsArray, f: (x: number) => number, x: number): number; (templateStrs: TemplateStringsArray, f: (x: string) => string, h: (y: string) => string, x: string): string; }
>rest : any[]

    return undefined;
>undefined : undefined
}

tempTag2 `${ x => x }${ 0 }`;
>tempTag2 : { (templateStrs: TemplateStringsArray, f: (x: number) => number, x: number): number; (templateStrs: TemplateStringsArray, f: (x: string) => string, h: (y: string) => string, x: string): string; }
>x => x : (x: number) => number
>x : number
>x : number

tempTag2 `${ x => x }${ y => y }${ "hello" }`;
>tempTag2 : { (templateStrs: TemplateStringsArray, f: (x: number) => number, x: number): number; (templateStrs: TemplateStringsArray, f: (x: string) => string, h: (y: string) => string, x: string): string; }
>x => x : (x: string) => string
>x : string
>x : string
>y => y : (y: string) => string
>y : string
>y : string

tempTag2 `${ x => x }${ 0 }`;
>tempTag2 : { (templateStrs: TemplateStringsArray, f: (x: number) => number, x: number): number; (templateStrs: TemplateStringsArray, f: (x: string) => string, h: (y: string) => string, x: string): string; }
>x => x : (x: number) => number
>x : number
>x : number

