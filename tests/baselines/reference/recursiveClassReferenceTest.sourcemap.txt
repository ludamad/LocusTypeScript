===================================================================
JsFile: recursiveClassReferenceTest.js
mapUrl: recursiveClassReferenceTest.js.map
sourceRoot: 
sources: recursiveClassReferenceTest.ts
===================================================================
-------------------------------------------------------------------
emittedFile:tests/cases/compiler/recursiveClassReferenceTest.js
sourceFile:recursiveClassReferenceTest.ts
-------------------------------------------------------------------
>>>var __extends = this.__extends || function (d, b) {
>>>    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
>>>    function __() { this.constructor = d; }
>>>    __.prototype = b.prototype;
>>>    d.prototype = new __();
>>>};
>>>var Sample;
1 >
2 >^^^^
3 >    ^^^^^^
4 >          ^
5 >           ^^^^^^^^^^->
1 >// Scenario 1: Test reqursive function call with "this" parameter
  >// Scenario 2: Test recursive function call with cast and "this" parameter
  >
  >
  >
  >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >
2 >module 
3 >    Sample
4 >          .Actions.Thing.Find {
  >          	export class StartFindAction implements Sample.Thing.IAction {
  >          		
  >          		public getId() { return "yo"; }
  >          		
  >          		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >          
  >          			return true;
  >          		}
  >          	}
  >          }
1 >Emitted(7, 1) Source(32, 1) + SourceIndex(0)
2 >Emitted(7, 5) Source(32, 8) + SourceIndex(0)
3 >Emitted(7, 11) Source(32, 14) + SourceIndex(0)
4 >Emitted(7, 12) Source(42, 2) + SourceIndex(0)
---
>>>(function (Sample) {
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
4 >                 ^^^^^^^^^->
1->
2 >module 
3 >           Sample
1->Emitted(8, 1) Source(32, 1) + SourceIndex(0)
2 >Emitted(8, 12) Source(32, 8) + SourceIndex(0)
3 >Emitted(8, 18) Source(32, 14) + SourceIndex(0)
---
>>>    (function (Actions) {
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^^^
4 >                      ^^^^^^^->
1->.
2 >    
3 >               Actions
1->Emitted(9, 5) Source(32, 15) + SourceIndex(0) name (Sample)
2 >Emitted(9, 16) Source(32, 15) + SourceIndex(0) name (Sample)
3 >Emitted(9, 23) Source(32, 22) + SourceIndex(0) name (Sample)
---
>>>        (function (_Thing) {
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^
4 >                         ^^^^^^->
1->.
2 >        
3 >                   Thing
1->Emitted(10, 9) Source(32, 23) + SourceIndex(0) name (Sample.Actions)
2 >Emitted(10, 20) Source(32, 23) + SourceIndex(0) name (Sample.Actions)
3 >Emitted(10, 26) Source(32, 28) + SourceIndex(0) name (Sample.Actions)
---
>>>            (function (Find) {
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^
3 >                       ^^^^
4 >                           ^^
5 >                             ^
6 >                              ^^^^^^^^^^^^^^^^^^^^^^^->
1->.
2 >            
3 >                       Find
4 >                            
5 >                             {
1->Emitted(11, 13) Source(32, 29) + SourceIndex(0) name (Sample.Actions.Thing)
2 >Emitted(11, 24) Source(32, 29) + SourceIndex(0) name (Sample.Actions.Thing)
3 >Emitted(11, 28) Source(32, 33) + SourceIndex(0) name (Sample.Actions.Thing)
4 >Emitted(11, 30) Source(32, 34) + SourceIndex(0) name (Sample.Actions.Thing)
5 >Emitted(11, 31) Source(32, 35) + SourceIndex(0) name (Sample.Actions.Thing)
---
>>>                var StartFindAction = (function () {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^
3 >                    ^^^^^^^^^^^^^^^
4 >                                   ^^^^^^^^^^^^^^->
1->
  >	
2 >                export class 
3 >                    StartFindAction
1->Emitted(12, 17) Source(33, 2) + SourceIndex(0) name (Sample.Actions.Thing.Find)
2 >Emitted(12, 21) Source(33, 15) + SourceIndex(0) name (Sample.Actions.Thing.Find)
3 >Emitted(12, 36) Source(33, 30) + SourceIndex(0) name (Sample.Actions.Thing.Find)
---
>>>                    function StartFindAction() {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^
3 >                             ^^^^^^^^^^^^^^^
1->
2 >                    export class 
3 >                             StartFindAction
1->Emitted(13, 21) Source(33, 2) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
2 >Emitted(13, 30) Source(33, 15) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
3 >Emitted(13, 45) Source(33, 30) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 > implements Sample.Thing.IAction {
  >		
  >		public getId() { return "yo"; }
  >		
  >		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >
  >			return true;
  >		}
  >	
2 >                    }
1 >Emitted(14, 21) Source(41, 2) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.constructor)
2 >Emitted(14, 22) Source(41, 3) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.constructor)
---
>>>                    StartFindAction.prototype.getId = function () {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                   ^^^
1->
2 >                    getId
3 >                                                   
1->Emitted(15, 21) Source(35, 10) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
2 >Emitted(15, 52) Source(35, 15) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
3 >Emitted(15, 55) Source(35, 3) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
---
>>>                        return "yo";
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^
3 >                              ^
4 >                               ^^^^
5 >                                   ^
1 >public getId() { 
2 >                        return
3 >                               
4 >                               "yo"
5 >                                   ;
1 >Emitted(16, 25) Source(35, 20) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.getId)
2 >Emitted(16, 31) Source(35, 26) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.getId)
3 >Emitted(16, 32) Source(35, 27) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.getId)
4 >Emitted(16, 36) Source(35, 31) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.getId)
5 >Emitted(16, 37) Source(35, 32) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.getId)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 > 
2 >                    }
1 >Emitted(17, 21) Source(35, 33) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.getId)
2 >Emitted(17, 22) Source(35, 34) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.getId)
---
>>>                    StartFindAction.prototype.run = function (Thing) {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                 ^^^
4 >                                                    ^^^^^^^^^^
5 >                                                              ^^^^^
1->
  >		
  >		public 
2 >                    run
3 >                                                 
4 >                                                    public run(
5 >                                                              Thing:Sample.Thing.ICodeThing
1->Emitted(18, 21) Source(37, 10) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
2 >Emitted(18, 50) Source(37, 13) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
3 >Emitted(18, 53) Source(37, 3) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
4 >Emitted(18, 63) Source(37, 14) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
5 >Emitted(18, 68) Source(37, 43) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
---
>>>                        return true;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^
3 >                              ^
4 >                               ^^^^
5 >                                   ^
1 >):boolean {
  >
  >			
2 >                        return
3 >                               
4 >                               true
5 >                                   ;
1 >Emitted(19, 25) Source(39, 4) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.run)
2 >Emitted(19, 31) Source(39, 10) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.run)
3 >Emitted(19, 32) Source(39, 11) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.run)
4 >Emitted(19, 36) Source(39, 15) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.run)
5 >Emitted(19, 37) Source(39, 16) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.run)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(20, 21) Source(40, 3) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.run)
2 >Emitted(20, 22) Source(40, 4) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction.run)
---
>>>                    return StartFindAction;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^
1->
  >	
2 >                    }
1->Emitted(21, 21) Source(41, 2) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
2 >Emitted(21, 43) Source(41, 3) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
---
>>>                })();
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^^^^
5 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                }
3 >                 
4 >                 export class StartFindAction implements Sample.Thing.IAction {
  >                 		
  >                 		public getId() { return "yo"; }
  >                 		
  >                 		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                 
  >                 			return true;
  >                 		}
  >                 	}
1 >Emitted(22, 17) Source(41, 2) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
2 >Emitted(22, 18) Source(41, 3) + SourceIndex(0) name (Sample.Actions.Thing.Find.StartFindAction)
3 >Emitted(22, 18) Source(33, 2) + SourceIndex(0) name (Sample.Actions.Thing.Find)
4 >Emitted(22, 22) Source(41, 3) + SourceIndex(0) name (Sample.Actions.Thing.Find)
---
>>>                Find.StartFindAction = StartFindAction;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^
3 >                                    ^^^
4 >                                       ^^^^^^^^^^^^^^^
5 >                                                      ^
1->
2 >                StartFindAction
3 >                                    
4 >                                       StartFindAction implements Sample.Thing.IAction {
  >                                       		
  >                                       		public getId() { return "yo"; }
  >                                       		
  >                                       		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                       
  >                                       			return true;
  >                                       		}
  >                                       	}
5 >                                                      
1->Emitted(23, 17) Source(33, 15) + SourceIndex(0) name (Sample.Actions.Thing.Find)
2 >Emitted(23, 37) Source(33, 30) + SourceIndex(0) name (Sample.Actions.Thing.Find)
3 >Emitted(23, 40) Source(33, 15) + SourceIndex(0) name (Sample.Actions.Thing.Find)
4 >Emitted(23, 55) Source(41, 3) + SourceIndex(0) name (Sample.Actions.Thing.Find)
5 >Emitted(23, 56) Source(41, 3) + SourceIndex(0) name (Sample.Actions.Thing.Find)
---
>>>            })(_Thing.Find || (_Thing.Find = {}));
1 >^^^^^^^^^^^^
2 >            ^
3 >             ^^
4 >               ^^^^^^^^^^^
5 >                          ^^^^^
6 >                               ^^^^^^^^^^^
7 >                                          ^^^^^^^^
1 >
  >
2 >            }
3 >             
4 >               Find
5 >                          
6 >                               Find
7 >                                           {
  >                                          	export class StartFindAction implements Sample.Thing.IAction {
  >                                          		
  >                                          		public getId() { return "yo"; }
  >                                          		
  >                                          		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                          
  >                                          			return true;
  >                                          		}
  >                                          	}
  >                                          }
1 >Emitted(24, 13) Source(42, 1) + SourceIndex(0) name (Sample.Actions.Thing.Find)
2 >Emitted(24, 14) Source(42, 2) + SourceIndex(0) name (Sample.Actions.Thing.Find)
3 >Emitted(24, 16) Source(32, 29) + SourceIndex(0) name (Sample.Actions.Thing)
4 >Emitted(24, 27) Source(32, 33) + SourceIndex(0) name (Sample.Actions.Thing)
5 >Emitted(24, 32) Source(32, 29) + SourceIndex(0) name (Sample.Actions.Thing)
6 >Emitted(24, 43) Source(32, 33) + SourceIndex(0) name (Sample.Actions.Thing)
7 >Emitted(24, 51) Source(42, 2) + SourceIndex(0) name (Sample.Actions.Thing)
---
>>>            var Find = _Thing.Find;
1 >^^^^^^^^^^^^
2 >            ^^^^
3 >                ^^^^
4 >                    ^^^
5 >                       ^^^^^^^^^^^
6 >                                  ^
7 >                                   ^^^^^^^^^^^^^^^^->
1 >
2 >            
3 >                Find
4 >                    
5 >                       Find {
  >                       	export class StartFindAction implements Sample.Thing.IAction {
  >                       		
  >                       		public getId() { return "yo"; }
  >                       		
  >                       		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                       
  >                       			return true;
  >                       		}
  >                       	}
  >                       }
6 >                                  
1 >Emitted(25, 13) Source(32, 29) + SourceIndex(0) name (Sample.Actions.Thing)
2 >Emitted(25, 17) Source(32, 29) + SourceIndex(0) name (Sample.Actions.Thing)
3 >Emitted(25, 21) Source(32, 33) + SourceIndex(0) name (Sample.Actions.Thing)
4 >Emitted(25, 24) Source(32, 29) + SourceIndex(0) name (Sample.Actions.Thing)
5 >Emitted(25, 35) Source(42, 2) + SourceIndex(0) name (Sample.Actions.Thing)
6 >Emitted(25, 36) Source(42, 2) + SourceIndex(0) name (Sample.Actions.Thing)
---
>>>        })(Actions.Thing || (Actions.Thing = {}));
1->^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^^^^^^^^^
5 >                        ^^^^^
6 >                             ^^^^^^^^^^^^^
7 >                                          ^^^^^^^^
1->
2 >        }
3 >         
4 >           Thing
5 >                        
6 >                             Thing
7 >                                          .Find {
  >                                          	export class StartFindAction implements Sample.Thing.IAction {
  >                                          		
  >                                          		public getId() { return "yo"; }
  >                                          		
  >                                          		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                          
  >                                          			return true;
  >                                          		}
  >                                          	}
  >                                          }
1->Emitted(26, 9) Source(42, 1) + SourceIndex(0) name (Sample.Actions.Thing)
2 >Emitted(26, 10) Source(42, 2) + SourceIndex(0) name (Sample.Actions.Thing)
3 >Emitted(26, 12) Source(32, 23) + SourceIndex(0) name (Sample.Actions)
4 >Emitted(26, 25) Source(32, 28) + SourceIndex(0) name (Sample.Actions)
5 >Emitted(26, 30) Source(32, 23) + SourceIndex(0) name (Sample.Actions)
6 >Emitted(26, 43) Source(32, 28) + SourceIndex(0) name (Sample.Actions)
7 >Emitted(26, 51) Source(42, 2) + SourceIndex(0) name (Sample.Actions)
---
>>>        var Thing = Actions.Thing;
1 >^^^^^^^^
2 >        ^^^^
3 >            ^^^^^
4 >                 ^^^
5 >                    ^^^^^^^^^^^^^
6 >                                 ^
7 >                                  ^^^^^^^^^^^^^^^->
1 >
2 >        
3 >            Thing
4 >                 
5 >                    Thing.Find {
  >                    	export class StartFindAction implements Sample.Thing.IAction {
  >                    		
  >                    		public getId() { return "yo"; }
  >                    		
  >                    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                    
  >                    			return true;
  >                    		}
  >                    	}
  >                    }
6 >                                 
1 >Emitted(27, 9) Source(32, 23) + SourceIndex(0) name (Sample.Actions)
2 >Emitted(27, 13) Source(32, 23) + SourceIndex(0) name (Sample.Actions)
3 >Emitted(27, 18) Source(32, 28) + SourceIndex(0) name (Sample.Actions)
4 >Emitted(27, 21) Source(32, 23) + SourceIndex(0) name (Sample.Actions)
5 >Emitted(27, 34) Source(42, 2) + SourceIndex(0) name (Sample.Actions)
6 >Emitted(27, 35) Source(42, 2) + SourceIndex(0) name (Sample.Actions)
---
>>>    })(Sample.Actions || (Sample.Actions = {}));
1->^^^^
2 >    ^
3 >     ^^
4 >       ^^^^^^^^^^^^^^
5 >                     ^^^^^
6 >                          ^^^^^^^^^^^^^^
7 >                                        ^^^^^^^^
1->
2 >    }
3 >     
4 >       Actions
5 >                     
6 >                          Actions
7 >                                        .Thing.Find {
  >                                        	export class StartFindAction implements Sample.Thing.IAction {
  >                                        		
  >                                        		public getId() { return "yo"; }
  >                                        		
  >                                        		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                        
  >                                        			return true;
  >                                        		}
  >                                        	}
  >                                        }
1->Emitted(28, 5) Source(42, 1) + SourceIndex(0) name (Sample.Actions)
2 >Emitted(28, 6) Source(42, 2) + SourceIndex(0) name (Sample.Actions)
3 >Emitted(28, 8) Source(32, 15) + SourceIndex(0) name (Sample)
4 >Emitted(28, 22) Source(32, 22) + SourceIndex(0) name (Sample)
5 >Emitted(28, 27) Source(32, 15) + SourceIndex(0) name (Sample)
6 >Emitted(28, 41) Source(32, 22) + SourceIndex(0) name (Sample)
7 >Emitted(28, 49) Source(42, 2) + SourceIndex(0) name (Sample)
---
>>>    var Actions = Sample.Actions;
1 >^^^^
2 >    ^^^^
3 >        ^^^^^^^
4 >               ^^^
5 >                  ^^^^^^^^^^^^^^
6 >                                ^
1 >
2 >    
3 >        Actions
4 >               
5 >                  Actions.Thing.Find {
  >                  	export class StartFindAction implements Sample.Thing.IAction {
  >                  		
  >                  		public getId() { return "yo"; }
  >                  		
  >                  		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                  
  >                  			return true;
  >                  		}
  >                  	}
  >                  }
6 >                                
1 >Emitted(29, 5) Source(32, 15) + SourceIndex(0) name (Sample)
2 >Emitted(29, 9) Source(32, 15) + SourceIndex(0) name (Sample)
3 >Emitted(29, 16) Source(32, 22) + SourceIndex(0) name (Sample)
4 >Emitted(29, 19) Source(32, 15) + SourceIndex(0) name (Sample)
5 >Emitted(29, 33) Source(42, 2) + SourceIndex(0) name (Sample)
6 >Emitted(29, 34) Source(42, 2) + SourceIndex(0) name (Sample)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > ^^
4 >   ^^^^^^
5 >         ^^^^^
6 >              ^^^^^^
7 >                    ^^^^^^^^
1 >
2 >}
3 > 
4 >   Sample
5 >         
6 >              Sample
7 >                    .Actions.Thing.Find {
  >                    	export class StartFindAction implements Sample.Thing.IAction {
  >                    		
  >                    		public getId() { return "yo"; }
  >                    		
  >                    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                    
  >                    			return true;
  >                    		}
  >                    	}
  >                    }
1 >Emitted(30, 1) Source(42, 1) + SourceIndex(0) name (Sample)
2 >Emitted(30, 2) Source(42, 2) + SourceIndex(0) name (Sample)
3 >Emitted(30, 4) Source(32, 8) + SourceIndex(0)
4 >Emitted(30, 10) Source(32, 14) + SourceIndex(0)
5 >Emitted(30, 15) Source(32, 8) + SourceIndex(0)
6 >Emitted(30, 21) Source(32, 14) + SourceIndex(0)
7 >Emitted(30, 29) Source(42, 2) + SourceIndex(0)
---
>>>var Sample;
1 >
2 >^^^^
3 >    ^^^^^^
4 >          ^
5 >           ^^^^^^^^^^->
1 >
  >
  >
2 >module 
3 >    Sample
4 >          .Thing.Widgets {
  >          	export class FindWidget implements Sample.Thing.IWidget {
  >          
  >          		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >          			
  >          		private domNode:any = null;
  >          		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >          		    // scenario 1
  >          		    codeThing.addWidget("addWidget", this);
  >          		}
  >          		
  >          		public getDomNode() {
  >          			return domNode;
  >          		}
  >          		
  >          		public destroy() {
  >          
  >          		}
  >          
  >          	}
  >          }
1 >Emitted(31, 1) Source(44, 1) + SourceIndex(0)
2 >Emitted(31, 5) Source(44, 8) + SourceIndex(0)
3 >Emitted(31, 11) Source(44, 14) + SourceIndex(0)
4 >Emitted(31, 12) Source(64, 2) + SourceIndex(0)
---
>>>(function (Sample) {
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
4 >                 ^^^^^^^->
1->
2 >module 
3 >           Sample
1->Emitted(32, 1) Source(44, 1) + SourceIndex(0)
2 >Emitted(32, 12) Source(44, 8) + SourceIndex(0)
3 >Emitted(32, 18) Source(44, 14) + SourceIndex(0)
---
>>>    (function (Thing) {
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^
4 >                    ^^^^^^^^^^->
1->.
2 >    
3 >               Thing
1->Emitted(33, 5) Source(44, 15) + SourceIndex(0) name (Sample)
2 >Emitted(33, 16) Source(44, 15) + SourceIndex(0) name (Sample)
3 >Emitted(33, 21) Source(44, 20) + SourceIndex(0) name (Sample)
---
>>>        (function (Widgets) {
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^
4 >                          ^^
5 >                            ^
6 >                             ^^^^^^^^^^^^^^^->
1->.
2 >        
3 >                   Widgets
4 >                           
5 >                            {
1->Emitted(34, 9) Source(44, 21) + SourceIndex(0) name (Sample.Thing)
2 >Emitted(34, 20) Source(44, 21) + SourceIndex(0) name (Sample.Thing)
3 >Emitted(34, 27) Source(44, 28) + SourceIndex(0) name (Sample.Thing)
4 >Emitted(34, 29) Source(44, 29) + SourceIndex(0) name (Sample.Thing)
5 >Emitted(34, 30) Source(44, 30) + SourceIndex(0) name (Sample.Thing)
---
>>>            var FindWidget = (function () {
1->^^^^^^^^^^^^
2 >            ^^^^
3 >                ^^^^^^^^^^
4 >                          ^^^^^^^^^^^^^^^^^^^^^^^->
1->
  >	
2 >            export class 
3 >                FindWidget
1->Emitted(35, 13) Source(45, 2) + SourceIndex(0) name (Sample.Thing.Widgets)
2 >Emitted(35, 17) Source(45, 15) + SourceIndex(0) name (Sample.Thing.Widgets)
3 >Emitted(35, 27) Source(45, 25) + SourceIndex(0) name (Sample.Thing.Widgets)
---
>>>                function FindWidget(codeThing) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^
3 >                         ^^^^^^^^^^
4 >                                   ^
5 >                                    ^^^^^^^^^
6 >                                             ^^^->
1-> implements Sample.Thing.IWidget {
  >
  >		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >			
  >		private domNode:any = null;
  >		
2 >                
3 >                         FindWidget
4 >                                    implements Sample.Thing.IWidget {
  >                                   
  >                                   		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                   			
  >                                   		private domNode:any = null;
  >                                   		constructor(private 
5 >                                    codeThing: Sample.Thing.ICodeThing
1->Emitted(36, 17) Source(50, 3) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
2 >Emitted(36, 26) Source(45, 15) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
3 >Emitted(36, 36) Source(45, 25) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
4 >Emitted(36, 37) Source(50, 23) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
5 >Emitted(36, 46) Source(50, 57) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
---
>>>                    this.codeThing = codeThing;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^
3 >                                  ^^^
4 >                                     ^^^^^^^^^
5 >                                              ^
1->
2 >                    codeThing
3 >                                  
4 >                                     codeThing
5 >                                              : Sample.Thing.ICodeThing
1->Emitted(37, 21) Source(50, 23) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
2 >Emitted(37, 35) Source(50, 32) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
3 >Emitted(37, 38) Source(50, 23) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
4 >Emitted(37, 47) Source(50, 32) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
5 >Emitted(37, 48) Source(50, 57) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
---
>>>                    this.domNode = null;
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^
3 >                                ^^^
4 >                                   ^^^^
5 >                                       ^
6 >                                        ^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                    domNode
3 >                                :any = 
4 >                                   null
5 >                                       ;
1 >Emitted(38, 21) Source(49, 11) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
2 >Emitted(38, 33) Source(49, 18) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
3 >Emitted(38, 36) Source(49, 25) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
4 >Emitted(38, 40) Source(49, 29) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
5 >Emitted(38, 41) Source(49, 30) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
---
>>>                    codeThing.addWidget("addWidget", this);
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^
3 >                             ^
4 >                              ^^^^^^^^^
5 >                                       ^
6 >                                        ^^^^^^^^^^^
7 >                                                   ^^
8 >                                                     ^^^^
9 >                                                         ^
10>                                                          ^
1->
  >		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >		    // scenario 1
  >		    
2 >                    codeThing
3 >                             .
4 >                              addWidget
5 >                                       (
6 >                                        "addWidget"
7 >                                                   , 
8 >                                                     this
9 >                                                         )
10>                                                          ;
1->Emitted(39, 21) Source(52, 7) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
2 >Emitted(39, 30) Source(52, 16) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
3 >Emitted(39, 31) Source(52, 17) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
4 >Emitted(39, 40) Source(52, 26) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
5 >Emitted(39, 41) Source(52, 27) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
6 >Emitted(39, 52) Source(52, 38) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
7 >Emitted(39, 54) Source(52, 40) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
8 >Emitted(39, 58) Source(52, 44) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
9 >Emitted(39, 59) Source(52, 45) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
10>Emitted(39, 60) Source(52, 46) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
---
>>>                }
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                }
1 >Emitted(40, 17) Source(53, 3) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
2 >Emitted(40, 18) Source(53, 4) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.constructor)
---
>>>                FindWidget.prototype.gar = function (runner) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                        ^^^
4 >                                           ^^^^^^^^^^
5 >                                                     ^^^^^^
1->
2 >                gar
3 >                                        
4 >                                           public gar(
5 >                                                     runner:(widget:Sample.Thing.IWidget)=>any
1->Emitted(41, 17) Source(47, 10) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
2 >Emitted(41, 41) Source(47, 13) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
3 >Emitted(41, 44) Source(47, 3) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
4 >Emitted(41, 54) Source(47, 14) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
5 >Emitted(41, 60) Source(47, 55) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
---
>>>                    if (true) {
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^
3 >                      ^
4 >                       ^
5 >                        ^^^^
6 >                            ^
7 >                             ^
8 >                              ^
9 >                               ^^^^^^^^^^^^^^->
1 >) { 
2 >                    if
3 >                       
4 >                       (
5 >                        true
6 >                            )
7 >                              
8 >                              {
1 >Emitted(42, 21) Source(47, 59) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
2 >Emitted(42, 23) Source(47, 61) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
3 >Emitted(42, 24) Source(47, 62) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
4 >Emitted(42, 25) Source(47, 63) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
5 >Emitted(42, 29) Source(47, 67) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
6 >Emitted(42, 30) Source(47, 68) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
7 >Emitted(42, 31) Source(47, 69) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
8 >Emitted(42, 32) Source(47, 70) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
---
>>>                        return runner(this);
1->^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^
3 >                              ^
4 >                               ^^^^^^
5 >                                     ^
6 >                                      ^^^^
7 >                                          ^
8 >                                           ^
1->
2 >                        return
3 >                               
4 >                               runner
5 >                                     (
6 >                                      this
7 >                                          )
8 >                                           ;
1->Emitted(43, 25) Source(47, 70) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
2 >Emitted(43, 31) Source(47, 76) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
3 >Emitted(43, 32) Source(47, 77) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
4 >Emitted(43, 38) Source(47, 83) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
5 >Emitted(43, 39) Source(47, 84) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
6 >Emitted(43, 43) Source(47, 88) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
7 >Emitted(43, 44) Source(47, 89) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
8 >Emitted(43, 45) Source(47, 90) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
1 >
2 >                    }
1 >Emitted(44, 21) Source(47, 90) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
2 >Emitted(44, 22) Source(47, 91) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
---
>>>                };
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                }
1 >Emitted(45, 17) Source(47, 91) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
2 >Emitted(45, 18) Source(47, 92) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.gar)
---
>>>                FindWidget.prototype.getDomNode = function () {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                               ^^^
1->
  >			
  >		private domNode:any = null;
  >		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >		    // scenario 1
  >		    codeThing.addWidget("addWidget", this);
  >		}
  >		
  >		public 
2 >                getDomNode
3 >                                               
1->Emitted(46, 17) Source(55, 10) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
2 >Emitted(46, 48) Source(55, 20) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
3 >Emitted(46, 51) Source(55, 3) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
---
>>>                    return domNode;
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^
3 >                          ^
4 >                           ^^^^^^^
5 >                                  ^
1 >public getDomNode() {
  >			
2 >                    return
3 >                           
4 >                           domNode
5 >                                  ;
1 >Emitted(47, 21) Source(56, 4) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.getDomNode)
2 >Emitted(47, 27) Source(56, 10) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.getDomNode)
3 >Emitted(47, 28) Source(56, 11) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.getDomNode)
4 >Emitted(47, 35) Source(56, 18) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.getDomNode)
5 >Emitted(47, 36) Source(56, 19) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.getDomNode)
---
>>>                };
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                }
1 >Emitted(48, 17) Source(57, 3) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.getDomNode)
2 >Emitted(48, 18) Source(57, 4) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.getDomNode)
---
>>>                FindWidget.prototype.destroy = function () {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                            ^^^
1->
  >		
  >		public 
2 >                destroy
3 >                                            
1->Emitted(49, 17) Source(59, 10) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
2 >Emitted(49, 45) Source(59, 17) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
3 >Emitted(49, 48) Source(59, 3) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
---
>>>                };
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^^^^^^^^->
1 >public destroy() {
  >
  >		
2 >                }
1 >Emitted(50, 17) Source(61, 3) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.destroy)
2 >Emitted(50, 18) Source(61, 4) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget.destroy)
---
>>>                return FindWidget;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^
1->
  >
  >	
2 >                }
1->Emitted(51, 17) Source(63, 2) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
2 >Emitted(51, 34) Source(63, 3) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
---
>>>            })();
1 >^^^^^^^^^^^^
2 >            ^
3 >             
4 >             ^^^^
5 >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >            }
3 >             
4 >             export class FindWidget implements Sample.Thing.IWidget {
  >             
  >             		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >             			
  >             		private domNode:any = null;
  >             		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >             		    // scenario 1
  >             		    codeThing.addWidget("addWidget", this);
  >             		}
  >             		
  >             		public getDomNode() {
  >             			return domNode;
  >             		}
  >             		
  >             		public destroy() {
  >             
  >             		}
  >             
  >             	}
1 >Emitted(52, 13) Source(63, 2) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
2 >Emitted(52, 14) Source(63, 3) + SourceIndex(0) name (Sample.Thing.Widgets.FindWidget)
3 >Emitted(52, 14) Source(45, 2) + SourceIndex(0) name (Sample.Thing.Widgets)
4 >Emitted(52, 18) Source(63, 3) + SourceIndex(0) name (Sample.Thing.Widgets)
---
>>>            Widgets.FindWidget = FindWidget;
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^^^^^^^^
3 >                              ^^^
4 >                                 ^^^^^^^^^^
5 >                                           ^
6 >                                            ^^^^^^^->
1->
2 >            FindWidget
3 >                              
4 >                                 FindWidget implements Sample.Thing.IWidget {
  >                                 
  >                                 		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                 			
  >                                 		private domNode:any = null;
  >                                 		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                 		    // scenario 1
  >                                 		    codeThing.addWidget("addWidget", this);
  >                                 		}
  >                                 		
  >                                 		public getDomNode() {
  >                                 			return domNode;
  >                                 		}
  >                                 		
  >                                 		public destroy() {
  >                                 
  >                                 		}
  >                                 
  >                                 	}
5 >                                           
1->Emitted(53, 13) Source(45, 15) + SourceIndex(0) name (Sample.Thing.Widgets)
2 >Emitted(53, 31) Source(45, 25) + SourceIndex(0) name (Sample.Thing.Widgets)
3 >Emitted(53, 34) Source(45, 15) + SourceIndex(0) name (Sample.Thing.Widgets)
4 >Emitted(53, 44) Source(63, 3) + SourceIndex(0) name (Sample.Thing.Widgets)
5 >Emitted(53, 45) Source(63, 3) + SourceIndex(0) name (Sample.Thing.Widgets)
---
>>>        })(Thing.Widgets || (Thing.Widgets = {}));
1->^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^^^^^^^^^
5 >                        ^^^^^
6 >                             ^^^^^^^^^^^^^
7 >                                          ^^^^^^^^
1->
  >
2 >        }
3 >         
4 >           Widgets
5 >                        
6 >                             Widgets
7 >                                           {
  >                                          	export class FindWidget implements Sample.Thing.IWidget {
  >                                          
  >                                          		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                          			
  >                                          		private domNode:any = null;
  >                                          		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                          		    // scenario 1
  >                                          		    codeThing.addWidget("addWidget", this);
  >                                          		}
  >                                          		
  >                                          		public getDomNode() {
  >                                          			return domNode;
  >                                          		}
  >                                          		
  >                                          		public destroy() {
  >                                          
  >                                          		}
  >                                          
  >                                          	}
  >                                          }
1->Emitted(54, 9) Source(64, 1) + SourceIndex(0) name (Sample.Thing.Widgets)
2 >Emitted(54, 10) Source(64, 2) + SourceIndex(0) name (Sample.Thing.Widgets)
3 >Emitted(54, 12) Source(44, 21) + SourceIndex(0) name (Sample.Thing)
4 >Emitted(54, 25) Source(44, 28) + SourceIndex(0) name (Sample.Thing)
5 >Emitted(54, 30) Source(44, 21) + SourceIndex(0) name (Sample.Thing)
6 >Emitted(54, 43) Source(44, 28) + SourceIndex(0) name (Sample.Thing)
7 >Emitted(54, 51) Source(64, 2) + SourceIndex(0) name (Sample.Thing)
---
>>>        var Widgets = Thing.Widgets;
1 >^^^^^^^^
2 >        ^^^^
3 >            ^^^^^^^
4 >                   ^^^
5 >                      ^^^^^^^^^^^^^
6 >                                   ^
7 >                                    ^^^^^^^^^->
1 >
2 >        
3 >            Widgets
4 >                   
5 >                      Widgets {
  >                      	export class FindWidget implements Sample.Thing.IWidget {
  >                      
  >                      		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                      			
  >                      		private domNode:any = null;
  >                      		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                      		    // scenario 1
  >                      		    codeThing.addWidget("addWidget", this);
  >                      		}
  >                      		
  >                      		public getDomNode() {
  >                      			return domNode;
  >                      		}
  >                      		
  >                      		public destroy() {
  >                      
  >                      		}
  >                      
  >                      	}
  >                      }
6 >                                   
1 >Emitted(55, 9) Source(44, 21) + SourceIndex(0) name (Sample.Thing)
2 >Emitted(55, 13) Source(44, 21) + SourceIndex(0) name (Sample.Thing)
3 >Emitted(55, 20) Source(44, 28) + SourceIndex(0) name (Sample.Thing)
4 >Emitted(55, 23) Source(44, 21) + SourceIndex(0) name (Sample.Thing)
5 >Emitted(55, 36) Source(64, 2) + SourceIndex(0) name (Sample.Thing)
6 >Emitted(55, 37) Source(64, 2) + SourceIndex(0) name (Sample.Thing)
---
>>>    })(Sample.Thing || (Sample.Thing = {}));
1->^^^^
2 >    ^
3 >     ^^
4 >       ^^^^^^^^^^^^
5 >                   ^^^^^
6 >                        ^^^^^^^^^^^^
7 >                                    ^^^^^^^^
1->
2 >    }
3 >     
4 >       Thing
5 >                   
6 >                        Thing
7 >                                    .Widgets {
  >                                    	export class FindWidget implements Sample.Thing.IWidget {
  >                                    
  >                                    		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                    			
  >                                    		private domNode:any = null;
  >                                    		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                    		    // scenario 1
  >                                    		    codeThing.addWidget("addWidget", this);
  >                                    		}
  >                                    		
  >                                    		public getDomNode() {
  >                                    			return domNode;
  >                                    		}
  >                                    		
  >                                    		public destroy() {
  >                                    
  >                                    		}
  >                                    
  >                                    	}
  >                                    }
1->Emitted(56, 5) Source(64, 1) + SourceIndex(0) name (Sample.Thing)
2 >Emitted(56, 6) Source(64, 2) + SourceIndex(0) name (Sample.Thing)
3 >Emitted(56, 8) Source(44, 15) + SourceIndex(0) name (Sample)
4 >Emitted(56, 20) Source(44, 20) + SourceIndex(0) name (Sample)
5 >Emitted(56, 25) Source(44, 15) + SourceIndex(0) name (Sample)
6 >Emitted(56, 37) Source(44, 20) + SourceIndex(0) name (Sample)
7 >Emitted(56, 45) Source(64, 2) + SourceIndex(0) name (Sample)
---
>>>    var Thing = Sample.Thing;
1 >^^^^
2 >    ^^^^
3 >        ^^^^^
4 >             ^^^
5 >                ^^^^^^^^^^^^
6 >                            ^
1 >
2 >    
3 >        Thing
4 >             
5 >                Thing.Widgets {
  >                	export class FindWidget implements Sample.Thing.IWidget {
  >                
  >                		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                			
  >                		private domNode:any = null;
  >                		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                		    // scenario 1
  >                		    codeThing.addWidget("addWidget", this);
  >                		}
  >                		
  >                		public getDomNode() {
  >                			return domNode;
  >                		}
  >                		
  >                		public destroy() {
  >                
  >                		}
  >                
  >                	}
  >                }
6 >                            
1 >Emitted(57, 5) Source(44, 15) + SourceIndex(0) name (Sample)
2 >Emitted(57, 9) Source(44, 15) + SourceIndex(0) name (Sample)
3 >Emitted(57, 14) Source(44, 20) + SourceIndex(0) name (Sample)
4 >Emitted(57, 17) Source(44, 15) + SourceIndex(0) name (Sample)
5 >Emitted(57, 29) Source(64, 2) + SourceIndex(0) name (Sample)
6 >Emitted(57, 30) Source(64, 2) + SourceIndex(0) name (Sample)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > ^^
4 >   ^^^^^^
5 >         ^^^^^
6 >              ^^^^^^
7 >                    ^^^^^^^^
8 >                            ^^^^^^->
1 >
2 >}
3 > 
4 >   Sample
5 >         
6 >              Sample
7 >                    .Thing.Widgets {
  >                    	export class FindWidget implements Sample.Thing.IWidget {
  >                    
  >                    		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                    			
  >                    		private domNode:any = null;
  >                    		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                    		    // scenario 1
  >                    		    codeThing.addWidget("addWidget", this);
  >                    		}
  >                    		
  >                    		public getDomNode() {
  >                    			return domNode;
  >                    		}
  >                    		
  >                    		public destroy() {
  >                    
  >                    		}
  >                    
  >                    	}
  >                    }
1 >Emitted(58, 1) Source(64, 1) + SourceIndex(0) name (Sample)
2 >Emitted(58, 2) Source(64, 2) + SourceIndex(0) name (Sample)
3 >Emitted(58, 4) Source(44, 8) + SourceIndex(0)
4 >Emitted(58, 10) Source(44, 14) + SourceIndex(0)
5 >Emitted(58, 15) Source(44, 8) + SourceIndex(0)
6 >Emitted(58, 21) Source(44, 14) + SourceIndex(0)
7 >Emitted(58, 29) Source(64, 2) + SourceIndex(0)
---
>>>var AbstractMode = (function () {
1->
2 >^^^^
3 >    ^^^^^^^^^^^^
4 >                ^^^^^^^^^^^^^^->
1->
  >
  >interface IMode { getInitialState(): IState;} 
  >
2 >class 
3 >    AbstractMode
1->Emitted(59, 1) Source(67, 1) + SourceIndex(0)
2 >Emitted(59, 5) Source(67, 7) + SourceIndex(0)
3 >Emitted(59, 17) Source(67, 19) + SourceIndex(0)
---
>>>    function AbstractMode() {
1->^^^^
2 >    ^^^^^^^^^
3 >             ^^^^^^^^^^^^
1->
2 >    class 
3 >             AbstractMode
1->Emitted(60, 5) Source(67, 1) + SourceIndex(0) name (AbstractMode)
2 >Emitted(60, 14) Source(67, 7) + SourceIndex(0) name (AbstractMode)
3 >Emitted(60, 26) Source(67, 19) + SourceIndex(0) name (AbstractMode)
---
>>>    }
1 >^^^^
2 >    ^
3 >     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 > implements IMode { public getInitialState(): IState { return null;} 
2 >    }
1 >Emitted(61, 5) Source(67, 88) + SourceIndex(0) name (AbstractMode.constructor)
2 >Emitted(61, 6) Source(67, 89) + SourceIndex(0) name (AbstractMode.constructor)
---
>>>    AbstractMode.prototype.getInitialState = function () {
1->^^^^
2 >    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                          ^^^
1->
2 >    getInitialState
3 >                                          
1->Emitted(62, 5) Source(67, 46) + SourceIndex(0) name (AbstractMode)
2 >Emitted(62, 43) Source(67, 61) + SourceIndex(0) name (AbstractMode)
3 >Emitted(62, 46) Source(67, 39) + SourceIndex(0) name (AbstractMode)
---
>>>        return null;
1 >^^^^^^^^
2 >        ^^^^^^
3 >              ^
4 >               ^^^^
5 >                   ^
1 >public getInitialState(): IState { 
2 >        return
3 >               
4 >               null
5 >                   ;
1 >Emitted(63, 9) Source(67, 74) + SourceIndex(0) name (AbstractMode.getInitialState)
2 >Emitted(63, 15) Source(67, 80) + SourceIndex(0) name (AbstractMode.getInitialState)
3 >Emitted(63, 16) Source(67, 81) + SourceIndex(0) name (AbstractMode.getInitialState)
4 >Emitted(63, 20) Source(67, 85) + SourceIndex(0) name (AbstractMode.getInitialState)
5 >Emitted(63, 21) Source(67, 86) + SourceIndex(0) name (AbstractMode.getInitialState)
---
>>>    };
1 >^^^^
2 >    ^
3 >     ^^^^^^^^^^^^^^^^^^^^->
1 >
2 >    }
1 >Emitted(64, 5) Source(67, 86) + SourceIndex(0) name (AbstractMode.getInitialState)
2 >Emitted(64, 6) Source(67, 87) + SourceIndex(0) name (AbstractMode.getInitialState)
---
>>>    return AbstractMode;
1->^^^^
2 >    ^^^^^^^^^^^^^^^^^^^
1-> 
2 >    }
1->Emitted(65, 5) Source(67, 88) + SourceIndex(0) name (AbstractMode)
2 >Emitted(65, 24) Source(67, 89) + SourceIndex(0) name (AbstractMode)
---
>>>})();
1 >
2 >^
3 > 
4 > ^^^^
5 >     ^^^^^^^->
1 >
2 >}
3 > 
4 > class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
1 >Emitted(66, 1) Source(67, 88) + SourceIndex(0) name (AbstractMode)
2 >Emitted(66, 2) Source(67, 89) + SourceIndex(0) name (AbstractMode)
3 >Emitted(66, 2) Source(67, 1) + SourceIndex(0)
4 >Emitted(66, 6) Source(67, 89) + SourceIndex(0)
---
>>>var Sample;
1->
2 >^^^^
3 >    ^^^^^^
4 >          ^
5 >           ^^^^^^^^^^->
1->
  >
  >interface IState {}
  >
  >interface Window {
  >    opener: Window;
  >}
  >declare var self: Window;
  >
  >
2 >module 
3 >    Sample
4 >          .Thing.Languages.PlainText {
  >          	
  >          	export class State implements IState {		
  >                  constructor(private mode: IMode) { }
  >          		public clone():IState {
  >          			return this;
  >          		}
  >          
  >          		public equals(other:IState):boolean {
  >          			return this === other;
  >          		}
  >          		
  >          		public getMode(): IMode { return mode; }
  >          	}
  >          	
  >          	export class Mode extends AbstractMode {
  >          
  >          		// scenario 2
  >          		public getInitialState(): IState {
  >          			return new State(self);
  >          		}
  >          
  >          
  >          	}
  >          }
1->Emitted(67, 1) Source(76, 1) + SourceIndex(0)
2 >Emitted(67, 5) Source(76, 8) + SourceIndex(0)
3 >Emitted(67, 11) Source(76, 14) + SourceIndex(0)
4 >Emitted(67, 12) Source(100, 2) + SourceIndex(0)
---
>>>(function (Sample) {
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
4 >                 ^^^^^^^->
1->
2 >module 
3 >           Sample
1->Emitted(68, 1) Source(76, 1) + SourceIndex(0)
2 >Emitted(68, 12) Source(76, 8) + SourceIndex(0)
3 >Emitted(68, 18) Source(76, 14) + SourceIndex(0)
---
>>>    (function (Thing) {
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^
4 >                    ^^^^^^^^^^^^->
1->.
2 >    
3 >               Thing
1->Emitted(69, 5) Source(76, 15) + SourceIndex(0) name (Sample)
2 >Emitted(69, 16) Source(76, 15) + SourceIndex(0) name (Sample)
3 >Emitted(69, 21) Source(76, 20) + SourceIndex(0) name (Sample)
---
>>>        (function (Languages) {
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^^^
4 >                            ^^^^^^^^->
1->.
2 >        
3 >                   Languages
1->Emitted(70, 9) Source(76, 21) + SourceIndex(0) name (Sample.Thing)
2 >Emitted(70, 20) Source(76, 21) + SourceIndex(0) name (Sample.Thing)
3 >Emitted(70, 29) Source(76, 30) + SourceIndex(0) name (Sample.Thing)
---
>>>            (function (PlainText) {
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^
3 >                       ^^^^^^^^^
4 >                                ^^
5 >                                  ^
6 >                                   ^^^^^^^^->
1->.
2 >            
3 >                       PlainText
4 >                                 
5 >                                  {
1->Emitted(71, 13) Source(76, 31) + SourceIndex(0) name (Sample.Thing.Languages)
2 >Emitted(71, 24) Source(76, 31) + SourceIndex(0) name (Sample.Thing.Languages)
3 >Emitted(71, 33) Source(76, 40) + SourceIndex(0) name (Sample.Thing.Languages)
4 >Emitted(71, 35) Source(76, 41) + SourceIndex(0) name (Sample.Thing.Languages)
5 >Emitted(71, 36) Source(76, 42) + SourceIndex(0) name (Sample.Thing.Languages)
---
>>>                var State = (function () {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^
3 >                    ^^^^^
4 >                         ^^^^^^^^^^^^^^^^^^->
1->
  >	
  >	
2 >                export class 
3 >                    State
1->Emitted(72, 17) Source(78, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
2 >Emitted(72, 21) Source(78, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
3 >Emitted(72, 26) Source(78, 20) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
---
>>>                    function State(mode) {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^
3 >                             ^^^^^
4 >                                  ^
5 >                                   ^^^^
6 >                                       ^^^->
1-> implements IState {		
  >        
2 >                    
3 >                             State
4 >                                   implements IState {		
  >                                          constructor(private 
5 >                                   mode: IMode
1->Emitted(73, 21) Source(79, 9) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
2 >Emitted(73, 30) Source(78, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
3 >Emitted(73, 35) Source(78, 20) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
4 >Emitted(73, 36) Source(79, 29) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
5 >Emitted(73, 40) Source(79, 40) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
---
>>>                        this.mode = mode;
1->^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^^^
3 >                                 ^^^
4 >                                    ^^^^
5 >                                        ^
1->
2 >                        mode
3 >                                 
4 >                                    mode
5 >                                        : IMode
1->Emitted(74, 25) Source(79, 29) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.constructor)
2 >Emitted(74, 34) Source(79, 33) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.constructor)
3 >Emitted(74, 37) Source(79, 29) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.constructor)
4 >Emitted(74, 41) Source(79, 33) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.constructor)
5 >Emitted(74, 42) Source(79, 40) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.constructor)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >) { 
2 >                    }
1 >Emitted(75, 21) Source(79, 44) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.constructor)
2 >Emitted(75, 22) Source(79, 45) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.constructor)
---
>>>                    State.prototype.clone = function () {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^
3 >                                         ^^^
1->
  >		public 
2 >                    clone
3 >                                         
1->Emitted(76, 21) Source(80, 10) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
2 >Emitted(76, 42) Source(80, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
3 >Emitted(76, 45) Source(80, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
---
>>>                        return this;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^
3 >                              ^
4 >                               ^^^^
5 >                                   ^
1 >public clone():IState {
  >			
2 >                        return
3 >                               
4 >                               this
5 >                                   ;
1 >Emitted(77, 25) Source(81, 4) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.clone)
2 >Emitted(77, 31) Source(81, 10) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.clone)
3 >Emitted(77, 32) Source(81, 11) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.clone)
4 >Emitted(77, 36) Source(81, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.clone)
5 >Emitted(77, 37) Source(81, 16) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.clone)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(78, 21) Source(82, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.clone)
2 >Emitted(78, 22) Source(82, 4) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.clone)
---
>>>                    State.prototype.equals = function (other) {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^
3 >                                          ^^^
4 >                                             ^^^^^^^^^^
5 >                                                       ^^^^^
1->
  >
  >		public 
2 >                    equals
3 >                                          
4 >                                             public equals(
5 >                                                       other:IState
1->Emitted(79, 21) Source(84, 10) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
2 >Emitted(79, 43) Source(84, 16) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
3 >Emitted(79, 46) Source(84, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
4 >Emitted(79, 56) Source(84, 17) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
5 >Emitted(79, 61) Source(84, 29) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
---
>>>                        return this === other;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^
3 >                              ^
4 >                               ^^^^
5 >                                   ^^^^^
6 >                                        ^^^^^
7 >                                             ^
1 >):boolean {
  >			
2 >                        return
3 >                               
4 >                               this
5 >                                    === 
6 >                                        other
7 >                                             ;
1 >Emitted(80, 25) Source(85, 4) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.equals)
2 >Emitted(80, 31) Source(85, 10) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.equals)
3 >Emitted(80, 32) Source(85, 11) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.equals)
4 >Emitted(80, 36) Source(85, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.equals)
5 >Emitted(80, 41) Source(85, 20) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.equals)
6 >Emitted(80, 46) Source(85, 25) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.equals)
7 >Emitted(80, 47) Source(85, 26) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.equals)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(81, 21) Source(86, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.equals)
2 >Emitted(81, 22) Source(86, 4) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.equals)
---
>>>                    State.prototype.getMode = function () {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^
3 >                                           ^^^
1->
  >		
  >		public 
2 >                    getMode
3 >                                           
1->Emitted(82, 21) Source(88, 10) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
2 >Emitted(82, 44) Source(88, 17) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
3 >Emitted(82, 47) Source(88, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
---
>>>                        return mode;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^
3 >                              ^
4 >                               ^^^^
5 >                                   ^
1 >public getMode(): IMode { 
2 >                        return
3 >                               
4 >                               mode
5 >                                   ;
1 >Emitted(83, 25) Source(88, 29) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.getMode)
2 >Emitted(83, 31) Source(88, 35) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.getMode)
3 >Emitted(83, 32) Source(88, 36) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.getMode)
4 >Emitted(83, 36) Source(88, 40) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.getMode)
5 >Emitted(83, 37) Source(88, 41) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.getMode)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^->
1 > 
2 >                    }
1 >Emitted(84, 21) Source(88, 42) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.getMode)
2 >Emitted(84, 22) Source(88, 43) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State.getMode)
---
>>>                    return State;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^
1->
  >	
2 >                    }
1->Emitted(85, 21) Source(89, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
2 >Emitted(85, 33) Source(89, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
---
>>>                })();
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^^^^
5 >                     ^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                }
3 >                 
4 >                 export class State implements IState {		
  >                         constructor(private mode: IMode) { }
  >                 		public clone():IState {
  >                 			return this;
  >                 		}
  >                 
  >                 		public equals(other:IState):boolean {
  >                 			return this === other;
  >                 		}
  >                 		
  >                 		public getMode(): IMode { return mode; }
  >                 	}
1 >Emitted(86, 17) Source(89, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
2 >Emitted(86, 18) Source(89, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.State)
3 >Emitted(86, 18) Source(78, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
4 >Emitted(86, 22) Source(89, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
---
>>>                PlainText.State = State;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^
3 >                               ^^^
4 >                                  ^^^^^
5 >                                       ^
6 >                                        ^^^^^^^^->
1->
2 >                State
3 >                               
4 >                                  State implements IState {		
  >                                          constructor(private mode: IMode) { }
  >                                  		public clone():IState {
  >                                  			return this;
  >                                  		}
  >                                  
  >                                  		public equals(other:IState):boolean {
  >                                  			return this === other;
  >                                  		}
  >                                  		
  >                                  		public getMode(): IMode { return mode; }
  >                                  	}
5 >                                       
1->Emitted(87, 17) Source(78, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
2 >Emitted(87, 32) Source(78, 20) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
3 >Emitted(87, 35) Source(78, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
4 >Emitted(87, 40) Source(89, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
5 >Emitted(87, 41) Source(89, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
---
>>>                var Mode = (function (_super) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^
3 >                    ^^^^
4 >                        ^^^^^^^^^^^^^^^^^^^^^->
1->
  >	
  >	
2 >                export class 
3 >                    Mode
1->Emitted(88, 17) Source(91, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
2 >Emitted(88, 21) Source(91, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
3 >Emitted(88, 25) Source(91, 19) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
---
>>>                    __extends(Mode, _super);
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^
3 >                              ^^^^
4 >                                  ^^^^^^^^^^
1-> extends 
2 >                    
3 >                              Mode
4 >                                   extends AbstractMode
1->Emitted(89, 21) Source(91, 28) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
2 >Emitted(89, 31) Source(91, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
3 >Emitted(89, 35) Source(91, 19) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
4 >Emitted(89, 45) Source(91, 40) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
---
>>>                    function Mode() {
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^
3 >                             ^^^^
4 >                                 ^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                    export class 
3 >                             Mode
1 >Emitted(90, 21) Source(91, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
2 >Emitted(90, 30) Source(91, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
3 >Emitted(90, 34) Source(91, 19) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
---
>>>                        _super.apply(this, arguments);
1->^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1-> extends 
2 >                        AbstractMode
1->Emitted(91, 25) Source(91, 28) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.constructor)
2 >Emitted(91, 55) Source(91, 40) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.constructor)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^->
1 > {
  >
  >		// scenario 2
  >		public getInitialState(): IState {
  >			return new State(self);
  >		}
  >
  >
  >	
2 >                    }
1 >Emitted(92, 21) Source(99, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.constructor)
2 >Emitted(92, 22) Source(99, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.constructor)
---
>>>                    // scenario 2
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^
3 >                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >                    // scenario 2
1->Emitted(93, 21) Source(93, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
2 >Emitted(93, 34) Source(93, 16) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
---
>>>                    Mode.prototype.getInitialState = function () {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                  ^^^
1->
  >		public 
2 >                    getInitialState
3 >                                                  
1->Emitted(94, 21) Source(94, 10) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
2 >Emitted(94, 51) Source(94, 25) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
3 >Emitted(94, 54) Source(94, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
---
>>>                        return new State(self);
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^
3 >                              ^
4 >                               ^^^^
5 >                                   ^^^^^
6 >                                        ^
7 >                                         ^^^^
8 >                                             ^
9 >                                              ^
1 >public getInitialState(): IState {
  >			
2 >                        return
3 >                               
4 >                               new 
5 >                                   State
6 >                                        (
7 >                                         self
8 >                                             )
9 >                                              ;
1 >Emitted(95, 25) Source(95, 4) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
2 >Emitted(95, 31) Source(95, 10) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
3 >Emitted(95, 32) Source(95, 11) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
4 >Emitted(95, 36) Source(95, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
5 >Emitted(95, 41) Source(95, 20) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
6 >Emitted(95, 42) Source(95, 21) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
7 >Emitted(95, 46) Source(95, 25) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
8 >Emitted(95, 47) Source(95, 26) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
9 >Emitted(95, 48) Source(95, 27) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(96, 21) Source(96, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
2 >Emitted(96, 22) Source(96, 4) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode.getInitialState)
---
>>>                    return Mode;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^
3 >                               ^^^->
1->
  >
  >
  >	
2 >                    }
1->Emitted(97, 21) Source(99, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
2 >Emitted(97, 32) Source(99, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
---
>>>                })(AbstractMode);
1->^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^^
5 >                   ^^^^^^^^^^^^
6 >                               ^^
7 >                                 ^^^^^^->
1->
2 >                }
3 >                 
4 >                 export class Mode extends 
5 >                   AbstractMode
6 >                                {
  >                               
  >                               		// scenario 2
  >                               		public getInitialState(): IState {
  >                               			return new State(self);
  >                               		}
  >                               
  >                               
  >                               	}
1->Emitted(98, 17) Source(99, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
2 >Emitted(98, 18) Source(99, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText.Mode)
3 >Emitted(98, 18) Source(91, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
4 >Emitted(98, 20) Source(91, 28) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
5 >Emitted(98, 32) Source(91, 40) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
6 >Emitted(98, 34) Source(99, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
---
>>>                PlainText.Mode = Mode;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^
3 >                              ^^^
4 >                                 ^^^^
5 >                                     ^
6 >                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >                Mode
3 >                              
4 >                                 Mode extends AbstractMode {
  >                                 
  >                                 		// scenario 2
  >                                 		public getInitialState(): IState {
  >                                 			return new State(self);
  >                                 		}
  >                                 
  >                                 
  >                                 	}
5 >                                     
1->Emitted(99, 17) Source(91, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
2 >Emitted(99, 31) Source(91, 19) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
3 >Emitted(99, 34) Source(91, 15) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
4 >Emitted(99, 38) Source(99, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
5 >Emitted(99, 39) Source(99, 3) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
---
>>>            })(Languages.PlainText || (Languages.PlainText = {}));
1->^^^^^^^^^^^^
2 >            ^
3 >             ^^
4 >               ^^^^^^^^^^^^^^^^^^^
5 >                                  ^^^^^
6 >                                       ^^^^^^^^^^^^^^^^^^^
7 >                                                          ^^^^^^^^
1->
  >
2 >            }
3 >             
4 >               PlainText
5 >                                  
6 >                                       PlainText
7 >                                                           {
  >                                                          	
  >                                                          	export class State implements IState {		
  >                                                                  constructor(private mode: IMode) { }
  >                                                          		public clone():IState {
  >                                                          			return this;
  >                                                          		}
  >                                                          
  >                                                          		public equals(other:IState):boolean {
  >                                                          			return this === other;
  >                                                          		}
  >                                                          		
  >                                                          		public getMode(): IMode { return mode; }
  >                                                          	}
  >                                                          	
  >                                                          	export class Mode extends AbstractMode {
  >                                                          
  >                                                          		// scenario 2
  >                                                          		public getInitialState(): IState {
  >                                                          			return new State(self);
  >                                                          		}
  >                                                          
  >                                                          
  >                                                          	}
  >                                                          }
1->Emitted(100, 13) Source(100, 1) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
2 >Emitted(100, 14) Source(100, 2) + SourceIndex(0) name (Sample.Thing.Languages.PlainText)
3 >Emitted(100, 16) Source(76, 31) + SourceIndex(0) name (Sample.Thing.Languages)
4 >Emitted(100, 35) Source(76, 40) + SourceIndex(0) name (Sample.Thing.Languages)
5 >Emitted(100, 40) Source(76, 31) + SourceIndex(0) name (Sample.Thing.Languages)
6 >Emitted(100, 59) Source(76, 40) + SourceIndex(0) name (Sample.Thing.Languages)
7 >Emitted(100, 67) Source(100, 2) + SourceIndex(0) name (Sample.Thing.Languages)
---
>>>            var PlainText = Languages.PlainText;
1 >^^^^^^^^^^^^
2 >            ^^^^
3 >                ^^^^^^^^^
4 >                         ^^^
5 >                            ^^^^^^^^^^^^^^^^^^^
6 >                                               ^
7 >                                                ^^^^^^^->
1 >
2 >            
3 >                PlainText
4 >                         
5 >                            PlainText {
  >                            	
  >                            	export class State implements IState {		
  >                                    constructor(private mode: IMode) { }
  >                            		public clone():IState {
  >                            			return this;
  >                            		}
  >                            
  >                            		public equals(other:IState):boolean {
  >                            			return this === other;
  >                            		}
  >                            		
  >                            		public getMode(): IMode { return mode; }
  >                            	}
  >                            	
  >                            	export class Mode extends AbstractMode {
  >                            
  >                            		// scenario 2
  >                            		public getInitialState(): IState {
  >                            			return new State(self);
  >                            		}
  >                            
  >                            
  >                            	}
  >                            }
6 >                                               
1 >Emitted(101, 13) Source(76, 31) + SourceIndex(0) name (Sample.Thing.Languages)
2 >Emitted(101, 17) Source(76, 31) + SourceIndex(0) name (Sample.Thing.Languages)
3 >Emitted(101, 26) Source(76, 40) + SourceIndex(0) name (Sample.Thing.Languages)
4 >Emitted(101, 29) Source(76, 31) + SourceIndex(0) name (Sample.Thing.Languages)
5 >Emitted(101, 48) Source(100, 2) + SourceIndex(0) name (Sample.Thing.Languages)
6 >Emitted(101, 49) Source(100, 2) + SourceIndex(0) name (Sample.Thing.Languages)
---
>>>        })(Thing.Languages || (Thing.Languages = {}));
1->^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^^^^^^^^^^^
5 >                          ^^^^^
6 >                               ^^^^^^^^^^^^^^^
7 >                                              ^^^^^^^^
1->
2 >        }
3 >         
4 >           Languages
5 >                          
6 >                               Languages
7 >                                              .PlainText {
  >                                              	
  >                                              	export class State implements IState {		
  >                                                      constructor(private mode: IMode) { }
  >                                              		public clone():IState {
  >                                              			return this;
  >                                              		}
  >                                              
  >                                              		public equals(other:IState):boolean {
  >                                              			return this === other;
  >                                              		}
  >                                              		
  >                                              		public getMode(): IMode { return mode; }
  >                                              	}
  >                                              	
  >                                              	export class Mode extends AbstractMode {
  >                                              
  >                                              		// scenario 2
  >                                              		public getInitialState(): IState {
  >                                              			return new State(self);
  >                                              		}
  >                                              
  >                                              
  >                                              	}
  >                                              }
1->Emitted(102, 9) Source(100, 1) + SourceIndex(0) name (Sample.Thing.Languages)
2 >Emitted(102, 10) Source(100, 2) + SourceIndex(0) name (Sample.Thing.Languages)
3 >Emitted(102, 12) Source(76, 21) + SourceIndex(0) name (Sample.Thing)
4 >Emitted(102, 27) Source(76, 30) + SourceIndex(0) name (Sample.Thing)
5 >Emitted(102, 32) Source(76, 21) + SourceIndex(0) name (Sample.Thing)
6 >Emitted(102, 47) Source(76, 30) + SourceIndex(0) name (Sample.Thing)
7 >Emitted(102, 55) Source(100, 2) + SourceIndex(0) name (Sample.Thing)
---
>>>        var Languages = Thing.Languages;
1 >^^^^^^^^
2 >        ^^^^
3 >            ^^^^^^^^^
4 >                     ^^^
5 >                        ^^^^^^^^^^^^^^^
6 >                                       ^
7 >                                        ^^^^^->
1 >
2 >        
3 >            Languages
4 >                     
5 >                        Languages.PlainText {
  >                        	
  >                        	export class State implements IState {		
  >                                constructor(private mode: IMode) { }
  >                        		public clone():IState {
  >                        			return this;
  >                        		}
  >                        
  >                        		public equals(other:IState):boolean {
  >                        			return this === other;
  >                        		}
  >                        		
  >                        		public getMode(): IMode { return mode; }
  >                        	}
  >                        	
  >                        	export class Mode extends AbstractMode {
  >                        
  >                        		// scenario 2
  >                        		public getInitialState(): IState {
  >                        			return new State(self);
  >                        		}
  >                        
  >                        
  >                        	}
  >                        }
6 >                                       
1 >Emitted(103, 9) Source(76, 21) + SourceIndex(0) name (Sample.Thing)
2 >Emitted(103, 13) Source(76, 21) + SourceIndex(0) name (Sample.Thing)
3 >Emitted(103, 22) Source(76, 30) + SourceIndex(0) name (Sample.Thing)
4 >Emitted(103, 25) Source(76, 21) + SourceIndex(0) name (Sample.Thing)
5 >Emitted(103, 40) Source(100, 2) + SourceIndex(0) name (Sample.Thing)
6 >Emitted(103, 41) Source(100, 2) + SourceIndex(0) name (Sample.Thing)
---
>>>    })(Sample.Thing || (Sample.Thing = {}));
1->^^^^
2 >    ^
3 >     ^^
4 >       ^^^^^^^^^^^^
5 >                   ^^^^^
6 >                        ^^^^^^^^^^^^
7 >                                    ^^^^^^^^
1->
2 >    }
3 >     
4 >       Thing
5 >                   
6 >                        Thing
7 >                                    .Languages.PlainText {
  >                                    	
  >                                    	export class State implements IState {		
  >                                            constructor(private mode: IMode) { }
  >                                    		public clone():IState {
  >                                    			return this;
  >                                    		}
  >                                    
  >                                    		public equals(other:IState):boolean {
  >                                    			return this === other;
  >                                    		}
  >                                    		
  >                                    		public getMode(): IMode { return mode; }
  >                                    	}
  >                                    	
  >                                    	export class Mode extends AbstractMode {
  >                                    
  >                                    		// scenario 2
  >                                    		public getInitialState(): IState {
  >                                    			return new State(self);
  >                                    		}
  >                                    
  >                                    
  >                                    	}
  >                                    }
1->Emitted(104, 5) Source(100, 1) + SourceIndex(0) name (Sample.Thing)
2 >Emitted(104, 6) Source(100, 2) + SourceIndex(0) name (Sample.Thing)
3 >Emitted(104, 8) Source(76, 15) + SourceIndex(0) name (Sample)
4 >Emitted(104, 20) Source(76, 20) + SourceIndex(0) name (Sample)
5 >Emitted(104, 25) Source(76, 15) + SourceIndex(0) name (Sample)
6 >Emitted(104, 37) Source(76, 20) + SourceIndex(0) name (Sample)
7 >Emitted(104, 45) Source(100, 2) + SourceIndex(0) name (Sample)
---
>>>    var Thing = Sample.Thing;
1 >^^^^
2 >    ^^^^
3 >        ^^^^^
4 >             ^^^
5 >                ^^^^^^^^^^^^
6 >                            ^
1 >
2 >    
3 >        Thing
4 >             
5 >                Thing.Languages.PlainText {
  >                	
  >                	export class State implements IState {		
  >                        constructor(private mode: IMode) { }
  >                		public clone():IState {
  >                			return this;
  >                		}
  >                
  >                		public equals(other:IState):boolean {
  >                			return this === other;
  >                		}
  >                		
  >                		public getMode(): IMode { return mode; }
  >                	}
  >                	
  >                	export class Mode extends AbstractMode {
  >                
  >                		// scenario 2
  >                		public getInitialState(): IState {
  >                			return new State(self);
  >                		}
  >                
  >                
  >                	}
  >                }
6 >                            
1 >Emitted(105, 5) Source(76, 15) + SourceIndex(0) name (Sample)
2 >Emitted(105, 9) Source(76, 15) + SourceIndex(0) name (Sample)
3 >Emitted(105, 14) Source(76, 20) + SourceIndex(0) name (Sample)
4 >Emitted(105, 17) Source(76, 15) + SourceIndex(0) name (Sample)
5 >Emitted(105, 29) Source(100, 2) + SourceIndex(0) name (Sample)
6 >Emitted(105, 30) Source(100, 2) + SourceIndex(0) name (Sample)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > ^^
4 >   ^^^^^^
5 >         ^^^^^
6 >              ^^^^^^
7 >                    ^^^^^^^^
8 >                            ^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >}
3 > 
4 >   Sample
5 >         
6 >              Sample
7 >                    .Thing.Languages.PlainText {
  >                    	
  >                    	export class State implements IState {		
  >                            constructor(private mode: IMode) { }
  >                    		public clone():IState {
  >                    			return this;
  >                    		}
  >                    
  >                    		public equals(other:IState):boolean {
  >                    			return this === other;
  >                    		}
  >                    		
  >                    		public getMode(): IMode { return mode; }
  >                    	}
  >                    	
  >                    	export class Mode extends AbstractMode {
  >                    
  >                    		// scenario 2
  >                    		public getInitialState(): IState {
  >                    			return new State(self);
  >                    		}
  >                    
  >                    
  >                    	}
  >                    }
1 >Emitted(106, 1) Source(100, 1) + SourceIndex(0) name (Sample)
2 >Emitted(106, 2) Source(100, 2) + SourceIndex(0) name (Sample)
3 >Emitted(106, 4) Source(76, 8) + SourceIndex(0)
4 >Emitted(106, 10) Source(76, 14) + SourceIndex(0)
5 >Emitted(106, 15) Source(76, 8) + SourceIndex(0)
6 >Emitted(106, 21) Source(76, 14) + SourceIndex(0)
7 >Emitted(106, 29) Source(100, 2) + SourceIndex(0)
---
>>>//# sourceMappingURL=recursiveClassReferenceTest.js.map