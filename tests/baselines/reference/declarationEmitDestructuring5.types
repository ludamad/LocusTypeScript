=== tests/cases/compiler/declarationEmitDestructuring5.ts ===
function baz([, z, , ]) { }
>baz : ([, z, , ]: [any, any, any]) => void, Symbol(baz,Decl(declarationEmitDestructuring5.ts,0,0))
> : undefined
>z : any, Symbol(z,Decl(declarationEmitDestructuring5.ts,0,15))
> : undefined

function foo([, b, ]: [any, any]): void { }
>foo : ([, b, ]: [any, any]) => void, Symbol(foo,Decl(declarationEmitDestructuring5.ts,0,27))
> : undefined
>b : any, Symbol(b,Decl(declarationEmitDestructuring5.ts,1,15))

function bar([z, , , ]) { }
>bar : ([z, , , ]: [any, any, any]) => void, Symbol(bar,Decl(declarationEmitDestructuring5.ts,1,43))
>z : any, Symbol(z,Decl(declarationEmitDestructuring5.ts,2,14))
> : undefined
> : undefined

function bar1([z, , , ] = [1, 3, 4, 6, 7]) { }
>bar1 : ([z, , , ]?: [number, number, number, number, number]) => void, Symbol(bar1,Decl(declarationEmitDestructuring5.ts,2,27))
>z : number, Symbol(z,Decl(declarationEmitDestructuring5.ts,3,15))
> : undefined
> : undefined
>[1, 3, 4, 6, 7] : [number, number, number, number, number]
>1 : number
>3 : number
>4 : number
>6 : number
>7 : number

function bar2([,,z, , , ]) { }
>bar2 : ([,,z, , , ]: [any, any, any, any, any]) => void, Symbol(bar2,Decl(declarationEmitDestructuring5.ts,3,46))
> : undefined
> : undefined
>z : any, Symbol(z,Decl(declarationEmitDestructuring5.ts,4,17))
> : undefined
> : undefined

