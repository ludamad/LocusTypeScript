=== tests/cases/compiler/voidFunctionAssignmentCompat.ts ===
var fa = function(): any { return 3; }
>fa : () => any, Symbol(fa, Decl(voidFunctionAssignmentCompat.ts, 0, 3))
>function(): any { return 3; } : () => any
>3 : number

fa = function() { } // should not work
>fa = function() { } : () => void
>fa : () => any, Symbol(fa, Decl(voidFunctionAssignmentCompat.ts, 0, 3))
>function() { } : () => void

var fv = function(): void {}
>fv : () => void, Symbol(fv, Decl(voidFunctionAssignmentCompat.ts, 3, 3))
>function(): void {} : () => void

fv = function() { return 0; } // should work
>fv = function() { return 0; } : () => number
>fv : () => void, Symbol(fv, Decl(voidFunctionAssignmentCompat.ts, 3, 3))
>function() { return 0; } : () => number
>0 : number

function execAny(callback:(val:any)=>any) { return callback(0) }
>execAny : (callback: (val: any) => any) => any, Symbol(execAny, Decl(voidFunctionAssignmentCompat.ts, 4, 29))
>callback : (val: any) => any, Symbol(callback, Decl(voidFunctionAssignmentCompat.ts, 6, 17))
>val : any, Symbol(val, Decl(voidFunctionAssignmentCompat.ts, 6, 27))
>callback(0) : any
>callback : (val: any) => any, Symbol(callback, Decl(voidFunctionAssignmentCompat.ts, 6, 17))
>0 : number

execAny(function () {}); // should work
>execAny(function () {}) : any
>execAny : (callback: (val: any) => any) => any, Symbol(execAny, Decl(voidFunctionAssignmentCompat.ts, 4, 29))
>function () {} : () => void

function execVoid(callback:(val:any)=>void) { callback(0); }
>execVoid : (callback: (val: any) => void) => void, Symbol(execVoid, Decl(voidFunctionAssignmentCompat.ts, 7, 24))
>callback : (val: any) => void, Symbol(callback, Decl(voidFunctionAssignmentCompat.ts, 9, 18))
>val : any, Symbol(val, Decl(voidFunctionAssignmentCompat.ts, 9, 28))
>callback(0) : void
>callback : (val: any) => void, Symbol(callback, Decl(voidFunctionAssignmentCompat.ts, 9, 18))
>0 : number

execVoid(function () {return 0;}); // should work
>execVoid(function () {return 0;}) : void
>execVoid : (callback: (val: any) => void) => void, Symbol(execVoid, Decl(voidFunctionAssignmentCompat.ts, 7, 24))
>function () {return 0;} : () => number
>0 : number

var fra: (v:any)=>any = function() { return function () {}; } // should work
>fra : (v: any) => any, Symbol(fra, Decl(voidFunctionAssignmentCompat.ts, 12, 3))
>v : any, Symbol(v, Decl(voidFunctionAssignmentCompat.ts, 12, 10))
>function() { return function () {}; } : () => () => void
>function () {} : () => void

var frv: (v:any)=>void = function() { return function () { return 0; } } // should work
>frv : (v: any) => void, Symbol(frv, Decl(voidFunctionAssignmentCompat.ts, 13, 3))
>v : any, Symbol(v, Decl(voidFunctionAssignmentCompat.ts, 13, 10))
>function() { return function () { return 0; } } : () => () => number
>function () { return 0; } : () => number
>0 : number

var fra3: (v:any)=>string = (function() { return function (v:string) {return v;}; })() // should work
>fra3 : (v: any) => string, Symbol(fra3, Decl(voidFunctionAssignmentCompat.ts, 15, 3))
>v : any, Symbol(v, Decl(voidFunctionAssignmentCompat.ts, 15, 11))
>(function() { return function (v:string) {return v;}; })() : (v: string) => string
>(function() { return function (v:string) {return v;}; }) : () => (v: string) => string
>function() { return function (v:string) {return v;}; } : () => (v: string) => string
>function (v:string) {return v;} : (v: string) => string
>v : string, Symbol(v, Decl(voidFunctionAssignmentCompat.ts, 15, 59))
>v : string, Symbol(v, Decl(voidFunctionAssignmentCompat.ts, 15, 59))

var frv3: (v:any)=>number = (function() { return function () { return 0; } })() // should work
>frv3 : (v: any) => number, Symbol(frv3, Decl(voidFunctionAssignmentCompat.ts, 16, 3))
>v : any, Symbol(v, Decl(voidFunctionAssignmentCompat.ts, 16, 11))
>(function() { return function () { return 0; } })() : () => number
>(function() { return function () { return 0; } }) : () => () => number
>function() { return function () { return 0; } } : () => () => number
>function () { return 0; } : () => number
>0 : number


