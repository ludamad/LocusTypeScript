=== tests/cases/compiler/genericArrayPropertyAssignment.ts ===
function isEmpty(list: {length:number;})
>isEmpty : (list: { length: number; }) => boolean, Symbol(isEmpty, Decl(genericArrayPropertyAssignment.ts, 0, 0))
>list : { length: number; }, Symbol(list, Decl(genericArrayPropertyAssignment.ts, 0, 17))
>length : number, Symbol(length, Decl(genericArrayPropertyAssignment.ts, 0, 24))
{
return list.length ===0;
>list.length ===0 : boolean
>list.length : number, Symbol(length, Decl(genericArrayPropertyAssignment.ts, 0, 24))
>list : { length: number; }, Symbol(list, Decl(genericArrayPropertyAssignment.ts, 0, 17))
>length : number, Symbol(length, Decl(genericArrayPropertyAssignment.ts, 0, 24))
>0 : number
}
 
isEmpty([]); // error
>isEmpty([]) : boolean
>isEmpty : (list: { length: number; }) => boolean, Symbol(isEmpty, Decl(genericArrayPropertyAssignment.ts, 0, 0))
>[] : undefined[]
 

