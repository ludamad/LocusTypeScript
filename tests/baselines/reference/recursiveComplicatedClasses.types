=== tests/cases/compiler/recursiveComplicatedClasses.ts ===
class Signature {
>Signature : Signature, Symbol(Signature, Decl(recursiveComplicatedClasses.ts, 0, 0))

    public parameters: ParameterSymbol[] = null;
>parameters : ParameterSymbol[], Symbol(parameters, Decl(recursiveComplicatedClasses.ts, 0, 17))
>ParameterSymbol : ParameterSymbol, Symbol(ParameterSymbol, Decl(recursiveComplicatedClasses.ts, 17, 1))
>null : null
}

function aEnclosesB(a: Symbol) {
>aEnclosesB : (a: Symbol) => boolean, Symbol(aEnclosesB, Decl(recursiveComplicatedClasses.ts, 2, 1))
>a : Symbol, Symbol(a, Decl(recursiveComplicatedClasses.ts, 4, 20))
>Symbol : Symbol, Symbol(Symbol, Decl(recursiveComplicatedClasses.ts, 6, 1))

    return true;
>true : boolean
}

class Symbol {
>Symbol : Symbol, Symbol(Symbol, Decl(recursiveComplicatedClasses.ts, 6, 1))

    public bound: boolean;
>bound : boolean, Symbol(bound, Decl(recursiveComplicatedClasses.ts, 8, 14))

    public visible() {
>visible : () => boolean, Symbol(visible, Decl(recursiveComplicatedClasses.ts, 9, 26))

        var b: TypeSymbol;
>b : TypeSymbol, Symbol(b, Decl(recursiveComplicatedClasses.ts, 11, 11))
>TypeSymbol : TypeSymbol, Symbol(TypeSymbol, Decl(recursiveComplicatedClasses.ts, 20, 1))

        return aEnclosesB(b);
>aEnclosesB(b) : boolean
>aEnclosesB : (a: Symbol) => boolean, Symbol(aEnclosesB, Decl(recursiveComplicatedClasses.ts, 2, 1))
>b : TypeSymbol, Symbol(b, Decl(recursiveComplicatedClasses.ts, 11, 11))
    }

}
class InferenceSymbol extends Symbol {
>InferenceSymbol : InferenceSymbol, Symbol(InferenceSymbol, Decl(recursiveComplicatedClasses.ts, 15, 1))
>Symbol : Symbol, Symbol(Symbol, Decl(recursiveComplicatedClasses.ts, 6, 1))
}

class ParameterSymbol extends InferenceSymbol {
>ParameterSymbol : ParameterSymbol, Symbol(ParameterSymbol, Decl(recursiveComplicatedClasses.ts, 17, 1))
>InferenceSymbol : InferenceSymbol, Symbol(InferenceSymbol, Decl(recursiveComplicatedClasses.ts, 15, 1))
}

class TypeSymbol extends InferenceSymbol {
>TypeSymbol : TypeSymbol, Symbol(TypeSymbol, Decl(recursiveComplicatedClasses.ts, 20, 1))
>InferenceSymbol : InferenceSymbol, Symbol(InferenceSymbol, Decl(recursiveComplicatedClasses.ts, 15, 1))
}
