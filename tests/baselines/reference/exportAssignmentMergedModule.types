=== tests/cases/conformance/externalModules/foo_1.ts ===
import foo = require("./foo_0");
>foo : typeof foo, Symbol(foo, Decl(foo_1.ts, 0, 0))

var a: number = foo.a();
>a : number, Symbol(a, Decl(foo_1.ts, 1, 3))
>foo.a() : number
>foo.a : () => number, Symbol(foo.a, Decl(foo_0.ts, 0, 12))
>foo : typeof foo, Symbol(foo, Decl(foo_1.ts, 0, 0))
>a : () => number, Symbol(foo.a, Decl(foo_0.ts, 0, 12))

if(!!foo.b){
>!!foo.b : boolean
>!foo.b : boolean
>foo.b : boolean, Symbol(foo.b, Decl(foo_0.ts, 4, 11))
>foo : typeof foo, Symbol(foo, Decl(foo_1.ts, 0, 0))
>b : boolean, Symbol(foo.b, Decl(foo_0.ts, 4, 11))

	foo.Test.answer = foo.c(42);
>foo.Test.answer = foo.c(42) : number
>foo.Test.answer : number, Symbol(foo.Test.answer, Decl(foo_0.ts, 11, 12))
>foo.Test : typeof foo.Test, Symbol(foo.Test, Decl(foo_0.ts, 9, 2))
>foo : typeof foo, Symbol(foo, Decl(foo_1.ts, 0, 0))
>Test : typeof foo.Test, Symbol(foo.Test, Decl(foo_0.ts, 9, 2))
>answer : number, Symbol(foo.Test.answer, Decl(foo_0.ts, 11, 12))
>foo.c(42) : number
>foo.c : (a: number) => number, Symbol(foo.c, Decl(foo_0.ts, 6, 12))
>foo : typeof foo, Symbol(foo, Decl(foo_1.ts, 0, 0))
>c : (a: number) => number, Symbol(foo.c, Decl(foo_0.ts, 6, 12))
>42 : number
}
=== tests/cases/conformance/externalModules/foo_0.ts ===
module Foo {
>Foo : typeof Foo, Symbol(Foo, Decl(foo_0.ts, 0, 0), Decl(foo_0.ts, 5, 1))

	export function a(){
>a : () => number, Symbol(a, Decl(foo_0.ts, 0, 12))

		return 5;
>5 : number
	}
	export var b = true;
>b : boolean, Symbol(b, Decl(foo_0.ts, 4, 11))
>true : boolean
}
module Foo {
>Foo : typeof Foo, Symbol(Foo, Decl(foo_0.ts, 0, 0), Decl(foo_0.ts, 5, 1))

	export function c(a: number){
>c : (a: number) => number, Symbol(c, Decl(foo_0.ts, 6, 12))
>a : number, Symbol(a, Decl(foo_0.ts, 7, 19))

		return a;
>a : number, Symbol(a, Decl(foo_0.ts, 7, 19))
	}
	export module Test {
>Test : typeof Test, Symbol(Test, Decl(foo_0.ts, 9, 2))

		export var answer = 42;
>answer : number, Symbol(answer, Decl(foo_0.ts, 11, 12))
>42 : number
	}
}
export = Foo;
>Foo : typeof Foo, Symbol(Foo, Decl(foo_0.ts, 0, 0), Decl(foo_0.ts, 5, 1))

