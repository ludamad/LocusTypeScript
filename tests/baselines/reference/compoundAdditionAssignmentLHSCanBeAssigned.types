=== tests/cases/conformance/expressions/assignmentOperator/compoundAdditionAssignmentLHSCanBeAssigned.ts ===
enum E { a, b }
>E : E, Symbol(E,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,0))
>a : E, Symbol(E.a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,8))
>b : E, Symbol(E.b,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,11))

var a: any;
>a : any, Symbol(a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,2,3))

var b: void;
>b : void, Symbol(b,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,3,3))

var x1: any;
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))

x1 += a;
>x1 += a : any
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))
>a : any, Symbol(a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,2,3))

x1 += b;
>x1 += b : any
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))
>b : void, Symbol(b,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,3,3))

x1 += true;
>x1 += true : any
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))
>true : boolean

x1 += 0;
>x1 += 0 : any
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))
>0 : number

x1 += '';
>x1 += '' : string
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))
>'' : string

x1 += E.a;
>x1 += E.a : any
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))
>E.a : E, Symbol(E.a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,8))
>E : typeof E, Symbol(E,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,0))
>a : E, Symbol(E.a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,8))

x1 += {};
>x1 += {} : any
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))
>{} : {}

x1 += null;
>x1 += null : any
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))
>null : null

x1 += undefined;
>x1 += undefined : any
>x1 : any, Symbol(x1,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,5,3))
>undefined : undefined, Symbol(undefined)

var x2: string;
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))

x2 += a;
>x2 += a : string
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))
>a : any, Symbol(a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,2,3))

x2 += b;
>x2 += b : string
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))
>b : void, Symbol(b,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,3,3))

x2 += true;
>x2 += true : string
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))
>true : boolean

x2 += 0;
>x2 += 0 : string
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))
>0 : number

x2 += '';
>x2 += '' : string
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))
>'' : string

x2 += E.a;
>x2 += E.a : string
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))
>E.a : E, Symbol(E.a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,8))
>E : typeof E, Symbol(E,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,0))
>a : E, Symbol(E.a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,8))

x2 += {};
>x2 += {} : string
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))
>{} : {}

x2 += null;
>x2 += null : string
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))
>null : null

x2 += undefined;
>x2 += undefined : string
>x2 : string, Symbol(x2,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,16,3))
>undefined : undefined, Symbol(undefined)

var x3: number;
>x3 : number, Symbol(x3,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,27,3))

x3 += a;
>x3 += a : any
>x3 : number, Symbol(x3,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,27,3))
>a : any, Symbol(a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,2,3))

x3 += 0;
>x3 += 0 : number
>x3 : number, Symbol(x3,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,27,3))
>0 : number

x3 += E.a;
>x3 += E.a : number
>x3 : number, Symbol(x3,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,27,3))
>E.a : E, Symbol(E.a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,8))
>E : typeof E, Symbol(E,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,0))
>a : E, Symbol(E.a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,8))

x3 += null;
>x3 += null : number
>x3 : number, Symbol(x3,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,27,3))
>null : null

x3 += undefined;
>x3 += undefined : number
>x3 : number, Symbol(x3,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,27,3))
>undefined : undefined, Symbol(undefined)

var x4: E;
>x4 : E, Symbol(x4,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,34,3))
>E : E, Symbol(E,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,0))

x4 += a;
>x4 += a : any
>x4 : E, Symbol(x4,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,34,3))
>a : any, Symbol(a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,2,3))

x4 += 0;
>x4 += 0 : number
>x4 : E, Symbol(x4,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,34,3))
>0 : number

x4 += E.a;
>x4 += E.a : number
>x4 : E, Symbol(x4,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,34,3))
>E.a : E, Symbol(E.a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,8))
>E : typeof E, Symbol(E,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,0))
>a : E, Symbol(E.a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,0,8))

x4 += null;
>x4 += null : number
>x4 : E, Symbol(x4,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,34,3))
>null : null

x4 += undefined;
>x4 += undefined : number
>x4 : E, Symbol(x4,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,34,3))
>undefined : undefined, Symbol(undefined)

var x5: boolean;
>x5 : boolean, Symbol(x5,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,41,3))

x5 += a;
>x5 += a : any
>x5 : boolean, Symbol(x5,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,41,3))
>a : any, Symbol(a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,2,3))

var x6: {};
>x6 : {}, Symbol(x6,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,44,3))

x6 += a;
>x6 += a : any
>x6 : {}, Symbol(x6,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,44,3))
>a : any, Symbol(a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,2,3))

x6 += '';
>x6 += '' : string
>x6 : {}, Symbol(x6,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,44,3))
>'' : string

var x7: void;
>x7 : void, Symbol(x7,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,48,3))

x7 += a;
>x7 += a : any
>x7 : void, Symbol(x7,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,48,3))
>a : any, Symbol(a,Decl(compoundAdditionAssignmentLHSCanBeAssigned.ts,2,3))

