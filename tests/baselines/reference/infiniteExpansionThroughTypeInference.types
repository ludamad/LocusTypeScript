=== tests/cases/conformance/types/typeRelationships/recursiveTypes/infiniteExpansionThroughTypeInference.ts ===
interface G<T> {
>G : G<T>, Symbol(G, Decl(infiniteExpansionThroughTypeInference.ts, 0, 0))
>T : T, Symbol(T, Decl(infiniteExpansionThroughTypeInference.ts, 0, 12))

    x: G<G<T>> // infinitely expanding type reference
>x : G<G<T>>, Symbol(x, Decl(infiniteExpansionThroughTypeInference.ts, 0, 16))
>G : G<T>, Symbol(G, Decl(infiniteExpansionThroughTypeInference.ts, 0, 0))
>G : G<T>, Symbol(G, Decl(infiniteExpansionThroughTypeInference.ts, 0, 0))
>T : T, Symbol(T, Decl(infiniteExpansionThroughTypeInference.ts, 0, 12))

    y: T
>y : T, Symbol(y, Decl(infiniteExpansionThroughTypeInference.ts, 1, 14))
>T : T, Symbol(T, Decl(infiniteExpansionThroughTypeInference.ts, 0, 12))
}

function ff<T>(g: G<T>): void {
>ff : <T>(g: G<T>) => void, Symbol(ff, Decl(infiniteExpansionThroughTypeInference.ts, 3, 1))
>T : T, Symbol(T, Decl(infiniteExpansionThroughTypeInference.ts, 5, 12))
>g : G<T>, Symbol(g, Decl(infiniteExpansionThroughTypeInference.ts, 5, 15))
>G : G<T>, Symbol(G, Decl(infiniteExpansionThroughTypeInference.ts, 0, 0))
>T : T, Symbol(T, Decl(infiniteExpansionThroughTypeInference.ts, 5, 12))

    ff(g) // when infering T here we need to make sure to not descend into the structure of G<T> infinitely
>ff(g) : void
>ff : <T>(g: G<T>) => void, Symbol(ff, Decl(infiniteExpansionThroughTypeInference.ts, 3, 1))
>g : G<T>, Symbol(g, Decl(infiniteExpansionThroughTypeInference.ts, 5, 15))
}


