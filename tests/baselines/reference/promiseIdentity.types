=== tests/cases/compiler/promiseIdentity.ts ===
interface IPromise<T> {
>IPromise : IPromise<T>, Symbol(IPromise, Decl(promiseIdentity.ts, 0, 0))
>T : T, Symbol(T, Decl(promiseIdentity.ts, 0, 19))

    then<U>(callback: (x: T) => IPromise<U>): IPromise<U>;
>then : <U>(callback: (x: T) => IPromise<U>) => IPromise<U>, Symbol(then, Decl(promiseIdentity.ts, 0, 23))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 1, 9))
>callback : (x: T) => IPromise<U>, Symbol(callback, Decl(promiseIdentity.ts, 1, 12))
>x : T, Symbol(x, Decl(promiseIdentity.ts, 1, 23))
>T : T, Symbol(T, Decl(promiseIdentity.ts, 0, 19))
>IPromise : IPromise<T>, Symbol(IPromise, Decl(promiseIdentity.ts, 0, 0))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 1, 9))
>IPromise : IPromise<T>, Symbol(IPromise, Decl(promiseIdentity.ts, 0, 0))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 1, 9))
}
interface Promise<T> {
>Promise : Promise<T>, Symbol(Promise, Decl(promiseIdentity.ts, 2, 1))
>T : T, Symbol(T, Decl(promiseIdentity.ts, 3, 18))

    then<U>(callback: (x: T) => Promise<U>): Promise<U>;
>then : <U>(callback: (x: T) => Promise<U>) => Promise<U>, Symbol(then, Decl(promiseIdentity.ts, 3, 22))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 4, 9))
>callback : (x: T) => Promise<U>, Symbol(callback, Decl(promiseIdentity.ts, 4, 12))
>x : T, Symbol(x, Decl(promiseIdentity.ts, 4, 23))
>T : T, Symbol(T, Decl(promiseIdentity.ts, 3, 18))
>Promise : Promise<T>, Symbol(Promise, Decl(promiseIdentity.ts, 2, 1))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 4, 9))
>Promise : Promise<T>, Symbol(Promise, Decl(promiseIdentity.ts, 2, 1))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 4, 9))
}
var x: IPromise<string>;
>x : IPromise<string>, Symbol(x, Decl(promiseIdentity.ts, 6, 3), Decl(promiseIdentity.ts, 7, 3))
>IPromise : IPromise<T>, Symbol(IPromise, Decl(promiseIdentity.ts, 0, 0))

var x: Promise<string>;
>x : IPromise<string>, Symbol(x, Decl(promiseIdentity.ts, 6, 3), Decl(promiseIdentity.ts, 7, 3))
>Promise : Promise<T>, Symbol(Promise, Decl(promiseIdentity.ts, 2, 1))


interface IPromise2<T, V> {
>IPromise2 : IPromise2<T, V>, Symbol(IPromise2, Decl(promiseIdentity.ts, 7, 23))
>T : T, Symbol(T, Decl(promiseIdentity.ts, 10, 20))
>V : V, Symbol(V, Decl(promiseIdentity.ts, 10, 22))

    then<U, W>(callback: (x: T) => IPromise2<U, W>): IPromise2<W, U>;
>then : <U, W>(callback: (x: T) => IPromise2<U, W>) => IPromise2<W, U>, Symbol(then, Decl(promiseIdentity.ts, 10, 27))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 11, 9))
>W : W, Symbol(W, Decl(promiseIdentity.ts, 11, 11))
>callback : (x: T) => IPromise2<U, W>, Symbol(callback, Decl(promiseIdentity.ts, 11, 15))
>x : T, Symbol(x, Decl(promiseIdentity.ts, 11, 26))
>T : T, Symbol(T, Decl(promiseIdentity.ts, 10, 20))
>IPromise2 : IPromise2<T, V>, Symbol(IPromise2, Decl(promiseIdentity.ts, 7, 23))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 11, 9))
>W : W, Symbol(W, Decl(promiseIdentity.ts, 11, 11))
>IPromise2 : IPromise2<T, V>, Symbol(IPromise2, Decl(promiseIdentity.ts, 7, 23))
>W : W, Symbol(W, Decl(promiseIdentity.ts, 11, 11))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 11, 9))
}
interface Promise2<T, V> {
>Promise2 : Promise2<T, V>, Symbol(Promise2, Decl(promiseIdentity.ts, 12, 1))
>T : T, Symbol(T, Decl(promiseIdentity.ts, 13, 19))
>V : V, Symbol(V, Decl(promiseIdentity.ts, 13, 21))

    then<U, W>(callback: (x: V) => Promise2<U, T>): Promise2<T, W>; // Uses V instead of T in callback's parameter
>then : <U, W>(callback: (x: V) => Promise2<U, T>) => Promise2<T, W>, Symbol(then, Decl(promiseIdentity.ts, 13, 26))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 14, 9))
>W : W, Symbol(W, Decl(promiseIdentity.ts, 14, 11))
>callback : (x: V) => Promise2<U, T>, Symbol(callback, Decl(promiseIdentity.ts, 14, 15))
>x : V, Symbol(x, Decl(promiseIdentity.ts, 14, 26))
>V : V, Symbol(V, Decl(promiseIdentity.ts, 13, 21))
>Promise2 : Promise2<T, V>, Symbol(Promise2, Decl(promiseIdentity.ts, 12, 1))
>U : U, Symbol(U, Decl(promiseIdentity.ts, 14, 9))
>T : T, Symbol(T, Decl(promiseIdentity.ts, 13, 19))
>Promise2 : Promise2<T, V>, Symbol(Promise2, Decl(promiseIdentity.ts, 12, 1))
>T : T, Symbol(T, Decl(promiseIdentity.ts, 13, 19))
>W : W, Symbol(W, Decl(promiseIdentity.ts, 14, 11))
}

// Ok because T in this particular Promise2 is any, as are all the U and W references.
// Also, the V of Promise2 happens to coincide with the T of IPromise2 (they are both string).
var y: IPromise2<string, number>;
>y : IPromise2<string, number>, Symbol(y, Decl(promiseIdentity.ts, 19, 3), Decl(promiseIdentity.ts, 20, 3))
>IPromise2 : IPromise2<T, V>, Symbol(IPromise2, Decl(promiseIdentity.ts, 7, 23))

var y: Promise2<any, string>;
>y : IPromise2<string, number>, Symbol(y, Decl(promiseIdentity.ts, 19, 3), Decl(promiseIdentity.ts, 20, 3))
>Promise2 : Promise2<T, V>, Symbol(Promise2, Decl(promiseIdentity.ts, 12, 1))

