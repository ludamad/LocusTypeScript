=== tests/cases/compiler/noCollisionThisExpressionAndLocalVarInMethod.ts ===
var _this = 2;
>_this : number, Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 0, 3))
>2 : number

class a {
>a : a, Symbol(a, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 0, 14))

    method1() {
>method1 : () => { doStuff: (callback: any) => () => any; }, Symbol(method1, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 1, 9))

        return {
>{            doStuff: (callback) => () => {                var _this = 2;                return callback(_this);            }        } : { doStuff: (callback: any) => () => any; }

            doStuff: (callback) => () => {
>doStuff : (callback: any) => () => any, Symbol(doStuff, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 3, 16))
>(callback) => () => {                var _this = 2;                return callback(_this);            } : (callback: any) => () => any
>callback : any, Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 4, 22))
>() => {                var _this = 2;                return callback(_this);            } : () => any

                var _this = 2;
>_this : number, Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 5, 19))
>2 : number

                return callback(_this);
>callback(_this) : any
>callback : any, Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 4, 22))
>_this : number, Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 5, 19))
            }
        }
    }
    method2() {
>method2 : () => { doStuff: (callback: any) => () => any; }, Symbol(method2, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 9, 5))

        var _this = 2;
>_this : number, Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 11, 11))
>2 : number

        return {
>{            doStuff: (callback) => () => {                return callback(_this);            }        } : { doStuff: (callback: any) => () => any; }

            doStuff: (callback) => () => {
>doStuff : (callback: any) => () => any, Symbol(doStuff, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 12, 16))
>(callback) => () => {                return callback(_this);            } : (callback: any) => () => any
>callback : any, Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 13, 22))
>() => {                return callback(_this);            } : () => any

                return callback(_this);
>callback(_this) : any
>callback : any, Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 13, 22))
>_this : number, Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInMethod.ts, 11, 11))
            }
        }
    }
}
