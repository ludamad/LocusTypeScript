=== tests/cases/compiler/typeInferenceReturnTypeCallback.ts ===
interface IList<A> {
>IList : IList<A>, Symbol(IList, Decl(typeInferenceReturnTypeCallback.ts, 0, 0))
>A : A, Symbol(A, Decl(typeInferenceReturnTypeCallback.ts, 0, 16))

    map<B>(f: (t: A) => B): IList<B>;
>map : <B>(f: (t: A) => B) => IList<B>, Symbol(map, Decl(typeInferenceReturnTypeCallback.ts, 0, 20))
>B : B, Symbol(B, Decl(typeInferenceReturnTypeCallback.ts, 1, 8))
>f : (t: A) => B, Symbol(f, Decl(typeInferenceReturnTypeCallback.ts, 1, 11))
>t : A, Symbol(t, Decl(typeInferenceReturnTypeCallback.ts, 1, 15))
>A : A, Symbol(A, Decl(typeInferenceReturnTypeCallback.ts, 0, 16))
>B : B, Symbol(B, Decl(typeInferenceReturnTypeCallback.ts, 1, 8))
>IList : IList<A>, Symbol(IList, Decl(typeInferenceReturnTypeCallback.ts, 0, 0))
>B : B, Symbol(B, Decl(typeInferenceReturnTypeCallback.ts, 1, 8))
}

class Nil<C> implements IList<C>{
>Nil : Nil<C>, Symbol(Nil, Decl(typeInferenceReturnTypeCallback.ts, 2, 1))
>C : C, Symbol(C, Decl(typeInferenceReturnTypeCallback.ts, 4, 10))
>IList : IList<A>, Symbol(IList, Decl(typeInferenceReturnTypeCallback.ts, 0, 0))
>C : C, Symbol(C, Decl(typeInferenceReturnTypeCallback.ts, 4, 10))

    map<D>(f: (t: C) => D): IList<D> {
>map : <D>(f: (t: C) => D) => IList<D>, Symbol(map, Decl(typeInferenceReturnTypeCallback.ts, 4, 33))
>D : D, Symbol(D, Decl(typeInferenceReturnTypeCallback.ts, 5, 8))
>f : (t: C) => D, Symbol(f, Decl(typeInferenceReturnTypeCallback.ts, 5, 11))
>t : C, Symbol(t, Decl(typeInferenceReturnTypeCallback.ts, 5, 15))
>C : C, Symbol(C, Decl(typeInferenceReturnTypeCallback.ts, 4, 10))
>D : D, Symbol(D, Decl(typeInferenceReturnTypeCallback.ts, 5, 8))
>IList : IList<A>, Symbol(IList, Decl(typeInferenceReturnTypeCallback.ts, 0, 0))
>D : D, Symbol(D, Decl(typeInferenceReturnTypeCallback.ts, 5, 8))

        return null;
>null : null
    }
}

class Cons<T> implements IList<T>{
>Cons : Cons<T>, Symbol(Cons, Decl(typeInferenceReturnTypeCallback.ts, 8, 1))
>T : T, Symbol(T, Decl(typeInferenceReturnTypeCallback.ts, 10, 11))
>IList : IList<A>, Symbol(IList, Decl(typeInferenceReturnTypeCallback.ts, 0, 0))
>T : T, Symbol(T, Decl(typeInferenceReturnTypeCallback.ts, 10, 11))

    map<U>(f: (t: T) => U): IList<U> {
>map : <U>(f: (t: T) => U) => IList<U>, Symbol(map, Decl(typeInferenceReturnTypeCallback.ts, 10, 34))
>U : U, Symbol(U, Decl(typeInferenceReturnTypeCallback.ts, 11, 8))
>f : (t: T) => U, Symbol(f, Decl(typeInferenceReturnTypeCallback.ts, 11, 11))
>t : T, Symbol(t, Decl(typeInferenceReturnTypeCallback.ts, 11, 15))
>T : T, Symbol(T, Decl(typeInferenceReturnTypeCallback.ts, 10, 11))
>U : U, Symbol(U, Decl(typeInferenceReturnTypeCallback.ts, 11, 8))
>IList : IList<A>, Symbol(IList, Decl(typeInferenceReturnTypeCallback.ts, 0, 0))
>U : U, Symbol(U, Decl(typeInferenceReturnTypeCallback.ts, 11, 8))

        return this.foldRight(new Nil<U>(), (t, acc) => {
>this.foldRight(new Nil<U>(), (t, acc) => {            return new Cons<U>();        }) : Nil<U>
>this.foldRight : <E>(z: E, f: (t: T, acc: E) => E) => E, Symbol(foldRight, Decl(typeInferenceReturnTypeCallback.ts, 15, 5))
>this : Cons<T>, Symbol(Cons, Decl(typeInferenceReturnTypeCallback.ts, 8, 1))
>foldRight : <E>(z: E, f: (t: T, acc: E) => E) => E, Symbol(foldRight, Decl(typeInferenceReturnTypeCallback.ts, 15, 5))
>new Nil<U>() : Nil<U>
>Nil : typeof Nil, Symbol(Nil, Decl(typeInferenceReturnTypeCallback.ts, 2, 1))
>U : U, Symbol(U, Decl(typeInferenceReturnTypeCallback.ts, 11, 8))
>(t, acc) => {            return new Cons<U>();        } : (t: T, acc: Nil<U>) => Cons<U>
>t : T, Symbol(t, Decl(typeInferenceReturnTypeCallback.ts, 12, 45))
>acc : Nil<U>, Symbol(acc, Decl(typeInferenceReturnTypeCallback.ts, 12, 47))

            return new Cons<U>();
>new Cons<U>() : Cons<U>
>Cons : typeof Cons, Symbol(Cons, Decl(typeInferenceReturnTypeCallback.ts, 8, 1))
>U : U, Symbol(U, Decl(typeInferenceReturnTypeCallback.ts, 11, 8))

        });
    }

    foldRight<E>(z: E, f: (t: T, acc: E) => E): E {
>foldRight : <E>(z: E, f: (t: T, acc: E) => E) => E, Symbol(foldRight, Decl(typeInferenceReturnTypeCallback.ts, 15, 5))
>E : E, Symbol(E, Decl(typeInferenceReturnTypeCallback.ts, 17, 14))
>z : E, Symbol(z, Decl(typeInferenceReturnTypeCallback.ts, 17, 17))
>E : E, Symbol(E, Decl(typeInferenceReturnTypeCallback.ts, 17, 14))
>f : (t: T, acc: E) => E, Symbol(f, Decl(typeInferenceReturnTypeCallback.ts, 17, 22))
>t : T, Symbol(t, Decl(typeInferenceReturnTypeCallback.ts, 17, 27))
>T : T, Symbol(T, Decl(typeInferenceReturnTypeCallback.ts, 10, 11))
>acc : E, Symbol(acc, Decl(typeInferenceReturnTypeCallback.ts, 17, 32))
>E : E, Symbol(E, Decl(typeInferenceReturnTypeCallback.ts, 17, 14))
>E : E, Symbol(E, Decl(typeInferenceReturnTypeCallback.ts, 17, 14))
>E : E, Symbol(E, Decl(typeInferenceReturnTypeCallback.ts, 17, 14))

        return null;
>null : null
    }
}
