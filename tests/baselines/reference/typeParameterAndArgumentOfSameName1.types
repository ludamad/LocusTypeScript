=== tests/cases/compiler/typeParameterAndArgumentOfSameName1.ts ===
function f<A extends Number>(A: A): A {
>f : <A extends Number>(A: A) => A, Symbol(f,Decl(typeParameterAndArgumentOfSameName1.ts,0,0))
>A : A, Symbol(A,Decl(typeParameterAndArgumentOfSameName1.ts,0,11),Decl(typeParameterAndArgumentOfSameName1.ts,0,29))
>Number : Number, Symbol(Number,Decl(lib.d.ts,456,40),Decl(lib.d.ts,518,11))
>A : A, Symbol(A,Decl(typeParameterAndArgumentOfSameName1.ts,0,11),Decl(typeParameterAndArgumentOfSameName1.ts,0,29))
>A : A, Symbol(A,Decl(typeParameterAndArgumentOfSameName1.ts,0,11),Decl(typeParameterAndArgumentOfSameName1.ts,0,29))
>A : A, Symbol(A,Decl(typeParameterAndArgumentOfSameName1.ts,0,11),Decl(typeParameterAndArgumentOfSameName1.ts,0,29))

    var r = A.toExponential(123);
>r : string, Symbol(r,Decl(typeParameterAndArgumentOfSameName1.ts,1,7))
>A.toExponential(123) : string
>A.toExponential : (fractionDigits?: number) => string, Symbol(Number.toExponential,Decl(lib.d.ts,469,45))
>A : A, Symbol(A,Decl(typeParameterAndArgumentOfSameName1.ts,0,11),Decl(typeParameterAndArgumentOfSameName1.ts,0,29))
>toExponential : (fractionDigits?: number) => string, Symbol(Number.toExponential,Decl(lib.d.ts,469,45))
>123 : number

    return null;
>null : null
}
