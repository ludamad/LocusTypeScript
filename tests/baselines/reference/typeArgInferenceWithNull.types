=== tests/cases/compiler/typeArgInferenceWithNull.ts ===
// All legal

function fn4<T extends string>(n: T) { }
>fn4 : <T extends string>(n: T) => void, Symbol(fn4, Decl(typeArgInferenceWithNull.ts, 0, 0))
>T : T, Symbol(T, Decl(typeArgInferenceWithNull.ts, 2, 13))
>n : T, Symbol(n, Decl(typeArgInferenceWithNull.ts, 2, 31))
>T : T, Symbol(T, Decl(typeArgInferenceWithNull.ts, 2, 13))

fn4(null);
>fn4(null) : void
>fn4 : <T extends string>(n: T) => void, Symbol(fn4, Decl(typeArgInferenceWithNull.ts, 0, 0))
>null : null

function fn5<T extends { x: string }>(n: T) { }
>fn5 : <T extends { x: string; }>(n: T) => void, Symbol(fn5, Decl(typeArgInferenceWithNull.ts, 3, 10))
>T : T, Symbol(T, Decl(typeArgInferenceWithNull.ts, 5, 13))
>x : string, Symbol(x, Decl(typeArgInferenceWithNull.ts, 5, 24))
>n : T, Symbol(n, Decl(typeArgInferenceWithNull.ts, 5, 38))
>T : T, Symbol(T, Decl(typeArgInferenceWithNull.ts, 5, 13))

fn5({ x: null });
>fn5({ x: null }) : void
>fn5 : <T extends { x: string; }>(n: T) => void, Symbol(fn5, Decl(typeArgInferenceWithNull.ts, 3, 10))
>{ x: null } : { x: null; }
>x : null, Symbol(x, Decl(typeArgInferenceWithNull.ts, 6, 5))
>null : null

function fn6<T extends { x: string }>(n: T, fun: (x: T) => void, n2: T) { }
>fn6 : <T extends { x: string; }>(n: T, fun: (x: T) => void, n2: T) => void, Symbol(fn6, Decl(typeArgInferenceWithNull.ts, 6, 17))
>T : T, Symbol(T, Decl(typeArgInferenceWithNull.ts, 8, 13))
>x : string, Symbol(x, Decl(typeArgInferenceWithNull.ts, 8, 24))
>n : T, Symbol(n, Decl(typeArgInferenceWithNull.ts, 8, 38))
>T : T, Symbol(T, Decl(typeArgInferenceWithNull.ts, 8, 13))
>fun : (x: T) => void, Symbol(fun, Decl(typeArgInferenceWithNull.ts, 8, 43))
>x : T, Symbol(x, Decl(typeArgInferenceWithNull.ts, 8, 50))
>T : T, Symbol(T, Decl(typeArgInferenceWithNull.ts, 8, 13))
>n2 : T, Symbol(n2, Decl(typeArgInferenceWithNull.ts, 8, 64))
>T : T, Symbol(T, Decl(typeArgInferenceWithNull.ts, 8, 13))

fn6({ x: null }, y => { }, { x: "" }); // y has type { x: any }, but ideally would have type { x: string }
>fn6({ x: null }, y => { }, { x: "" }) : void
>fn6 : <T extends { x: string; }>(n: T, fun: (x: T) => void, n2: T) => void, Symbol(fn6, Decl(typeArgInferenceWithNull.ts, 6, 17))
>{ x: null } : { x: null; }
>x : null, Symbol(x, Decl(typeArgInferenceWithNull.ts, 9, 5))
>null : null
>y => { } : (y: { x: string; }) => void
>y : { x: string; }, Symbol(y, Decl(typeArgInferenceWithNull.ts, 9, 16))
>{ x: "" } : { x: string; }
>x : string, Symbol(x, Decl(typeArgInferenceWithNull.ts, 9, 28))
>"" : string

