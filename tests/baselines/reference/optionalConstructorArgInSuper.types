=== tests/cases/compiler/optionalConstructorArgInSuper.ts ===
class Base {
>Base : Base, Symbol(Base, Decl(optionalConstructorArgInSuper.ts, 0, 0))

    constructor(opt?) { }
>opt : any, Symbol(opt, Decl(optionalConstructorArgInSuper.ts, 1, 16))

    foo(other?) { }
>foo : (other?: any) => void, Symbol(foo, Decl(optionalConstructorArgInSuper.ts, 1, 25))
>other : any, Symbol(other, Decl(optionalConstructorArgInSuper.ts, 2, 8))
}
class Derived extends Base {
>Derived : Derived, Symbol(Derived, Decl(optionalConstructorArgInSuper.ts, 3, 1))
>Base : Base, Symbol(Base, Decl(optionalConstructorArgInSuper.ts, 0, 0))
}
var d = new Derived(); // bug caused an error here, couldn't select overload
>d : Derived, Symbol(d, Decl(optionalConstructorArgInSuper.ts, 6, 3))
>new Derived() : Derived
>Derived : typeof Derived, Symbol(Derived, Decl(optionalConstructorArgInSuper.ts, 3, 1))

var d2: Derived;
>d2 : Derived, Symbol(d2, Decl(optionalConstructorArgInSuper.ts, 7, 3))
>Derived : Derived, Symbol(Derived, Decl(optionalConstructorArgInSuper.ts, 3, 1))

d2.foo(); 
>d2.foo() : void
>d2.foo : (other?: any) => void, Symbol(Base.foo, Decl(optionalConstructorArgInSuper.ts, 1, 25))
>d2 : Derived, Symbol(d2, Decl(optionalConstructorArgInSuper.ts, 7, 3))
>foo : (other?: any) => void, Symbol(Base.foo, Decl(optionalConstructorArgInSuper.ts, 1, 25))

