=== tests/cases/compiler/systemModule8.ts ===

export var x;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

x = 1;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

x++;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

x--;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

++x;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

--x;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

x += 1;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

x -= 1;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

x *= 1;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

x /= 1;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

x |= 1;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

x &= 1;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

for (x = 5;;x++) {}
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

for (x = 8;;x--) {}
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

for (x = 15;;++x) {}
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

for (x = 18;;--x) {}
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

for (let x = 50;;) {}
>x : Symbol(x, Decl(systemModule8.ts, 18, 8))

function foo() {
>foo : Symbol(foo, Decl(systemModule8.ts, 18, 21))

    x = 100;
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))
}

export let [y] = [1];
>y : Symbol(y, Decl(systemModule8.ts, 23, 12))

export const {a: z0, b: {c: z1}} = {a: true, b: {c: "123"}};
>z0 : Symbol(z0, Decl(systemModule8.ts, 24, 14))
>z1 : Symbol(z1, Decl(systemModule8.ts, 24, 25))
>a : Symbol(a, Decl(systemModule8.ts, 24, 36))
>b : Symbol(b, Decl(systemModule8.ts, 24, 44))
>c : Symbol(c, Decl(systemModule8.ts, 24, 49))

for ([x] of [[1]]) {}
>x : Symbol(x, Decl(systemModule8.ts, 1, 10))

