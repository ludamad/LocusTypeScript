=== tests/cases/compiler/ipromise4.ts ===
declare module Windows.Foundation {
>Windows : any, Symbol(Windows,Decl(ipromise4.ts,0,0))
>Foundation : any, Symbol(Foundation,Decl(ipromise4.ts,0,23))

    export interface IPromise<T> {
>IPromise : IPromise<T>, Symbol(IPromise,Decl(ipromise4.ts,0,35))
>T : T, Symbol(T,Decl(ipromise4.ts,1,30))

        then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }, Symbol(then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>U : U, Symbol(U,Decl(ipromise4.ts,2,13))
>success : (value: T) => IPromise<U>, Symbol(success,Decl(ipromise4.ts,2,16))
>value : T, Symbol(value,Decl(ipromise4.ts,2,27))
>T : T, Symbol(T,Decl(ipromise4.ts,1,30))
>IPromise : IPromise<T>, Symbol(IPromise,Decl(ipromise4.ts,0,35))
>U : U, Symbol(U,Decl(ipromise4.ts,2,13))
>error : (error: any) => IPromise<U>, Symbol(error,Decl(ipromise4.ts,2,52))
>error : any, Symbol(error,Decl(ipromise4.ts,2,62))
>IPromise : IPromise<T>, Symbol(IPromise,Decl(ipromise4.ts,0,35))
>U : U, Symbol(U,Decl(ipromise4.ts,2,13))
>progress : (progress: any) => void, Symbol(progress,Decl(ipromise4.ts,2,89))
>progress : any, Symbol(progress,Decl(ipromise4.ts,2,102))
>Windows : any, Symbol(Windows,Decl(ipromise4.ts,0,0))
>Foundation : any, Symbol(Foundation,Decl(ipromise4.ts,0,23))
>IPromise : IPromise<T>, Symbol(IPromise,Decl(ipromise4.ts,0,35))
>U : U, Symbol(U,Decl(ipromise4.ts,2,13))

        then<U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }, Symbol(then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>U : U, Symbol(U,Decl(ipromise4.ts,3,13))
>success : (value: T) => IPromise<U>, Symbol(success,Decl(ipromise4.ts,3,16))
>value : T, Symbol(value,Decl(ipromise4.ts,3,27))
>T : T, Symbol(T,Decl(ipromise4.ts,1,30))
>IPromise : IPromise<T>, Symbol(IPromise,Decl(ipromise4.ts,0,35))
>U : U, Symbol(U,Decl(ipromise4.ts,3,13))
>error : (error: any) => U, Symbol(error,Decl(ipromise4.ts,3,52))
>error : any, Symbol(error,Decl(ipromise4.ts,3,62))
>U : U, Symbol(U,Decl(ipromise4.ts,3,13))
>progress : (progress: any) => void, Symbol(progress,Decl(ipromise4.ts,3,79))
>progress : any, Symbol(progress,Decl(ipromise4.ts,3,92))
>Windows : any, Symbol(Windows,Decl(ipromise4.ts,0,0))
>Foundation : any, Symbol(Foundation,Decl(ipromise4.ts,0,23))
>IPromise : IPromise<T>, Symbol(IPromise,Decl(ipromise4.ts,0,35))
>U : U, Symbol(U,Decl(ipromise4.ts,3,13))

        then<U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }, Symbol(then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>U : U, Symbol(U,Decl(ipromise4.ts,4,13))
>success : (value: T) => U, Symbol(success,Decl(ipromise4.ts,4,16))
>value : T, Symbol(value,Decl(ipromise4.ts,4,27))
>T : T, Symbol(T,Decl(ipromise4.ts,1,30))
>U : U, Symbol(U,Decl(ipromise4.ts,4,13))
>error : (error: any) => IPromise<U>, Symbol(error,Decl(ipromise4.ts,4,42))
>error : any, Symbol(error,Decl(ipromise4.ts,4,52))
>IPromise : IPromise<T>, Symbol(IPromise,Decl(ipromise4.ts,0,35))
>U : U, Symbol(U,Decl(ipromise4.ts,4,13))
>progress : (progress: any) => void, Symbol(progress,Decl(ipromise4.ts,4,79))
>progress : any, Symbol(progress,Decl(ipromise4.ts,4,92))
>Windows : any, Symbol(Windows,Decl(ipromise4.ts,0,0))
>Foundation : any, Symbol(Foundation,Decl(ipromise4.ts,0,23))
>IPromise : IPromise<T>, Symbol(IPromise,Decl(ipromise4.ts,0,35))
>U : U, Symbol(U,Decl(ipromise4.ts,4,13))

        then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void ): Windows.Foundation.IPromise<U>;
>then : { <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }, Symbol(then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>U : U, Symbol(U,Decl(ipromise4.ts,5,13))
>success : (value: T) => U, Symbol(success,Decl(ipromise4.ts,5,16))
>value : T, Symbol(value,Decl(ipromise4.ts,5,27))
>T : T, Symbol(T,Decl(ipromise4.ts,1,30))
>U : U, Symbol(U,Decl(ipromise4.ts,5,13))
>error : (error: any) => U, Symbol(error,Decl(ipromise4.ts,5,42))
>error : any, Symbol(error,Decl(ipromise4.ts,5,52))
>U : U, Symbol(U,Decl(ipromise4.ts,5,13))
>progress : (progress: any) => void, Symbol(progress,Decl(ipromise4.ts,5,69))
>progress : any, Symbol(progress,Decl(ipromise4.ts,5,82))
>Windows : any, Symbol(Windows,Decl(ipromise4.ts,0,0))
>Foundation : any, Symbol(Foundation,Decl(ipromise4.ts,0,23))
>IPromise : IPromise<T>, Symbol(IPromise,Decl(ipromise4.ts,0,35))
>U : U, Symbol(U,Decl(ipromise4.ts,5,13))

        done? <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void ): void;
>done : <U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => void) => void, Symbol(done,Decl(ipromise4.ts,5,139))
>U : U, Symbol(U,Decl(ipromise4.ts,6,15))
>success : (value: T) => any, Symbol(success,Decl(ipromise4.ts,6,18))
>value : T, Symbol(value,Decl(ipromise4.ts,6,29))
>T : T, Symbol(T,Decl(ipromise4.ts,1,30))
>error : (error: any) => any, Symbol(error,Decl(ipromise4.ts,6,46))
>error : any, Symbol(error,Decl(ipromise4.ts,6,56))
>progress : (progress: any) => void, Symbol(progress,Decl(ipromise4.ts,6,75))
>progress : any, Symbol(progress,Decl(ipromise4.ts,6,88))
    }
}
 
var p: Windows.Foundation.IPromise<number> = null;
>p : Windows.Foundation.IPromise<number>, Symbol(p,Decl(ipromise4.ts,10,3))
>Windows : any, Symbol(Windows,Decl(ipromise4.ts,0,0))
>Foundation : any, Symbol(Windows.Foundation,Decl(ipromise4.ts,0,23))
>IPromise : Windows.Foundation.IPromise<T>, Symbol(Windows.Foundation.IPromise,Decl(ipromise4.ts,0,35))
>null : null
 
p.then(function (x) { } ); // should not error
>p.then(function (x) { } ) : Windows.Foundation.IPromise<void>
>p.then : { <U>(success?: (value: number) => Windows.Foundation.IPromise<U>, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => Windows.Foundation.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; }, Symbol(Windows.Foundation.IPromise.then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>p : Windows.Foundation.IPromise<number>, Symbol(p,Decl(ipromise4.ts,10,3))
>then : { <U>(success?: (value: number) => Windows.Foundation.IPromise<U>, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => Windows.Foundation.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; }, Symbol(Windows.Foundation.IPromise.then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>function (x) { } : (x: number) => void
>x : number, Symbol(x,Decl(ipromise4.ts,12,17))

p.then(function (x) { return "hello"; } ).then(function (x) { return x } ); // should not error
>p.then(function (x) { return "hello"; } ).then(function (x) { return x } ) : Windows.Foundation.IPromise<string>
>p.then(function (x) { return "hello"; } ).then : { <U>(success?: (value: string) => Windows.Foundation.IPromise<U>, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => Windows.Foundation.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; }, Symbol(Windows.Foundation.IPromise.then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>p.then(function (x) { return "hello"; } ) : Windows.Foundation.IPromise<string>
>p.then : { <U>(success?: (value: number) => Windows.Foundation.IPromise<U>, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => Windows.Foundation.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; }, Symbol(Windows.Foundation.IPromise.then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>p : Windows.Foundation.IPromise<number>, Symbol(p,Decl(ipromise4.ts,10,3))
>then : { <U>(success?: (value: number) => Windows.Foundation.IPromise<U>, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => Windows.Foundation.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: number) => U, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; }, Symbol(Windows.Foundation.IPromise.then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>function (x) { return "hello"; } : (x: number) => string
>x : number, Symbol(x,Decl(ipromise4.ts,13,17))
>"hello" : string
>then : { <U>(success?: (value: string) => Windows.Foundation.IPromise<U>, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => Windows.Foundation.IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => Windows.Foundation.IPromise<U>, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; <U>(success?: (value: string) => U, error?: (error: any) => U, progress?: (progress: any) => void): Windows.Foundation.IPromise<U>; }, Symbol(Windows.Foundation.IPromise.then,Decl(ipromise4.ts,1,34),Decl(ipromise4.ts,2,159),Decl(ipromise4.ts,3,149),Decl(ipromise4.ts,4,149))
>function (x) { return x } : (x: string) => string
>x : string, Symbol(x,Decl(ipromise4.ts,13,57))
>x : string, Symbol(x,Decl(ipromise4.ts,13,57))
 

