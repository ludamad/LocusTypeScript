tests/cases/conformance/expressions/typeGuards/typeGuardMethods.ts(14,12): error TS1229: Type 'A' and type 'B' are disjoint types.
tests/cases/conformance/expressions/typeGuards/typeGuardMethods.ts(17,12): error TS1229: Type 'C' and type 'B' are disjoint types.


==== tests/cases/conformance/expressions/typeGuards/typeGuardMethods.ts (2 errors) ====
    
    class A {
        propA: number;
        isA(): this is A {
            return true;
        }
        isC(): this is C {
            return false;
        }
    }
    
    class B {
        propB: number;
        isA(): this is A {
               ~~~~~~~~~
!!! error TS1229: Type 'A' and type 'B' are disjoint types.
            return false;
        }
        isC(): this is C {
               ~~~~~~~~~
!!! error TS1229: Type 'C' and type 'B' are disjoint types.
            return false;
        }
    }
    
    class C extends A {
        propC: number;
        isA(): this is A {
            return false;
        }
        isC(): this is C {
            return true;
        }
    }
    
    class D extends C {
        isA(): this is A {
            return false;
        }
        isString(x: any): x is string { // with parameter declaration
            return true;
        }
    }
    
    var a: A;
    
    // Basic.
    if (a.isC()) {
        a.propC;
    }
    
    // Sub type.
    var subType: C;
    if(subType.isA()) {
        subType.propC;
    }
    
    // Union type.
    var union: A | B;
    if(union.isA()) {
        union.propA;
    }
    
    var b: any;
    var d = new D;
    if(d.isString(b)) {
        b.length;
    }