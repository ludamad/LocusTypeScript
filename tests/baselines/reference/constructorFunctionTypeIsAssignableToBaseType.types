=== tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/constructorFunctionTypeIsAssignableToBaseType.ts ===
class Base {
>Base : Base, Symbol(Base, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 0, 0))

    static foo: {
>foo : { bar: Object; }, Symbol(Base.foo, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 0, 12))

        bar: Object;
>bar : Object, Symbol(bar, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 1, 17))
>Object : Object, Symbol(Object, Decl(lib.d.ts, 92, 1), Decl(lib.d.ts, 223, 11))
    }
}

class Derived extends Base {
>Derived : Derived, Symbol(Derived, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 4, 1))
>Base : Base, Symbol(Base, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 0, 0))

    // ok
    static foo: {
>foo : { bar: number; }, Symbol(Derived.foo, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 6, 28))

        bar: number;
>bar : number, Symbol(bar, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 8, 17))
    }
}

class Derived2 extends Base {
>Derived2 : Derived2, Symbol(Derived2, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 11, 1))
>Base : Base, Symbol(Base, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 0, 0))

    // ok, use assignability here
    static foo: {
>foo : { bar: any; }, Symbol(Derived2.foo, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 13, 29))

        bar: any;
>bar : any, Symbol(bar, Decl(constructorFunctionTypeIsAssignableToBaseType.ts, 15, 17))
    }
}
