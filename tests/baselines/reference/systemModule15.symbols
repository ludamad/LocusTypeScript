=== tests/cases/compiler/file1.ts ===


import * as moduleB from "./file2"
>moduleB : Symbol(moduleB, Decl(file1.ts, 2, 6))

declare function use(v: any): void;
>use : Symbol(use, Decl(file1.ts, 2, 34))
>v : Symbol(v, Decl(file1.ts, 4, 21))

use(moduleB.value);
>use : Symbol(use, Decl(file1.ts, 2, 34))
>moduleB.value : Symbol(moduleB.value, Decl(file2.ts, 8, 12))
>moduleB : Symbol(moduleB, Decl(file1.ts, 2, 6))
>value : Symbol(moduleB.value, Decl(file2.ts, 8, 12))

use(moduleB.moduleC);
>use : Symbol(use, Decl(file1.ts, 2, 34))
>moduleB.moduleC : Symbol(moduleB.moduleC, Decl(file2.ts, 7, 16))
>moduleB : Symbol(moduleB, Decl(file1.ts, 2, 6))
>moduleC : Symbol(moduleB.moduleC, Decl(file2.ts, 7, 16))

use(moduleB.moduleCStar);
>use : Symbol(use, Decl(file1.ts, 2, 34))
>moduleB.moduleCStar : Symbol(moduleB.moduleCStar, Decl(file2.ts, 6, 8))
>moduleB : Symbol(moduleB, Decl(file1.ts, 2, 6))
>moduleCStar : Symbol(moduleB.moduleCStar, Decl(file2.ts, 6, 8))

=== tests/cases/compiler/file2.ts ===

import * as moduleCStar from "./file3"
>moduleCStar : Symbol(moduleCStar, Decl(file2.ts, 1, 6))

import {value2} from "./file4"
>value2 : Symbol(value2, Decl(file2.ts, 2, 8))

import moduleC from "./file3"
>moduleC : Symbol(moduleC, Decl(file2.ts, 3, 6))

import {value} from "./file3"
>value : Symbol(value, Decl(file2.ts, 4, 8))

export {
    moduleCStar,
>moduleCStar : Symbol(moduleCStar, Decl(file2.ts, 6, 8))

    moduleC,
>moduleC : Symbol(moduleC, Decl(file2.ts, 7, 16))

    value
>value : Symbol(value, Decl(file2.ts, 8, 12))
}

=== tests/cases/compiler/file3.ts ===

export var value = "youpi";
>value : Symbol(value, Decl(file3.ts, 1, 10))

export default value;
>value : Symbol(value, Decl(file3.ts, 1, 10))

=== tests/cases/compiler/file4.ts ===

export var value2 = "v";
>value2 : Symbol(value2, Decl(file4.ts, 1, 10))

