=== tests/cases/compiler/genericContextualTypingSpecialization.ts ===
var b: number[];
>b : number[], Symbol(b,Decl(genericContextualTypingSpecialization.ts,0,3))

b.reduce<number>((c, d) => c + d, 0); // should not error on '+'
>b.reduce<number>((c, d) => c + d, 0) : number
>b.reduce : { (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue?: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: number[]) => U, initialValue: U): U; }, Symbol(Array.reduce,Decl(lib.d.ts,1129,93),Decl(lib.d.ts,1136,120))
>b : number[], Symbol(b,Decl(genericContextualTypingSpecialization.ts,0,3))
>reduce : { (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue?: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: number[]) => U, initialValue: U): U; }, Symbol(Array.reduce,Decl(lib.d.ts,1129,93),Decl(lib.d.ts,1136,120))
>(c, d) => c + d : (c: number, d: number) => number
>c : number, Symbol(c,Decl(genericContextualTypingSpecialization.ts,1,18))
>d : number, Symbol(d,Decl(genericContextualTypingSpecialization.ts,1,20))
>c + d : number
>c : number, Symbol(c,Decl(genericContextualTypingSpecialization.ts,1,18))
>d : number, Symbol(d,Decl(genericContextualTypingSpecialization.ts,1,20))
>0 : number

