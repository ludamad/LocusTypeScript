=== tests/cases/compiler/internalAliasClassInsideLocalModuleWithoutExport.ts ===
export module x {
>x : typeof x, Symbol(x, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 0, 0))

    export class c {
>c : c, Symbol(c, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 0, 17))

        foo(a: number) {
>foo : (a: number) => number, Symbol(foo, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 1, 20))
>a : number, Symbol(a, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 2, 12))

            return a;
>a : number, Symbol(a, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 2, 12))
        }
    }
}

export module m2 {
>m2 : typeof m2, Symbol(m2, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 6, 1))

    export module m3 {
>m3 : typeof m3, Symbol(m3, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 8, 18))

        import c = x.c;
>c : typeof c, Symbol(c, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 9, 22))
>x : typeof x, Symbol(x, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 0, 0))
>c : c, Symbol(c, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 0, 17))

        export var cProp = new c();
>cProp : c, Symbol(cProp, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 11, 18))
>new c() : c
>c : typeof c, Symbol(c, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 9, 22))

        var cReturnVal = cProp.foo(10);
>cReturnVal : number, Symbol(cReturnVal, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 12, 11))
>cProp.foo(10) : number
>cProp.foo : (a: number) => number, Symbol(c.foo, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 1, 20))
>cProp : c, Symbol(cProp, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 11, 18))
>foo : (a: number) => number, Symbol(c.foo, Decl(internalAliasClassInsideLocalModuleWithoutExport.ts, 1, 20))
>10 : number
    }
}
