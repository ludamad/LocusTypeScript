=== tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandAnyType.ts ===
var ANY: any;
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

var BOOLEAN: boolean;
>BOOLEAN : boolean, Symbol(BOOLEAN, Decl(commaOperatorWithSecondOperandAnyType.ts, 1, 3))

var NUMBER: number;
>NUMBER : number, Symbol(NUMBER, Decl(commaOperatorWithSecondOperandAnyType.ts, 2, 3))

var STRING: string;
>STRING : string, Symbol(STRING, Decl(commaOperatorWithSecondOperandAnyType.ts, 3, 3))

var OBJECT: Object;
>OBJECT : Object, Symbol(OBJECT, Decl(commaOperatorWithSecondOperandAnyType.ts, 4, 3))
>Object : Object, Symbol(Object, Decl(lib.d.ts, 92, 1), Decl(lib.d.ts, 223, 11))

//The second operand type is any
ANY, ANY;
>ANY, ANY : any
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

BOOLEAN, ANY;
>BOOLEAN, ANY : any
>BOOLEAN : boolean, Symbol(BOOLEAN, Decl(commaOperatorWithSecondOperandAnyType.ts, 1, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

NUMBER, ANY;
>NUMBER, ANY : any
>NUMBER : number, Symbol(NUMBER, Decl(commaOperatorWithSecondOperandAnyType.ts, 2, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

STRING, ANY;
>STRING, ANY : any
>STRING : string, Symbol(STRING, Decl(commaOperatorWithSecondOperandAnyType.ts, 3, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

OBJECT, ANY;
>OBJECT, ANY : any
>OBJECT : Object, Symbol(OBJECT, Decl(commaOperatorWithSecondOperandAnyType.ts, 4, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

//Return type is any
var resultIsAny1 = (ANY, ANY);
>resultIsAny1 : any, Symbol(resultIsAny1, Decl(commaOperatorWithSecondOperandAnyType.ts, 14, 3))
>(ANY, ANY) : any
>ANY, ANY : any
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

var resultIsAny2 = (BOOLEAN, ANY);
>resultIsAny2 : any, Symbol(resultIsAny2, Decl(commaOperatorWithSecondOperandAnyType.ts, 15, 3))
>(BOOLEAN, ANY) : any
>BOOLEAN, ANY : any
>BOOLEAN : boolean, Symbol(BOOLEAN, Decl(commaOperatorWithSecondOperandAnyType.ts, 1, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

var resultIsAny3 = (NUMBER, ANY);
>resultIsAny3 : any, Symbol(resultIsAny3, Decl(commaOperatorWithSecondOperandAnyType.ts, 16, 3))
>(NUMBER, ANY) : any
>NUMBER, ANY : any
>NUMBER : number, Symbol(NUMBER, Decl(commaOperatorWithSecondOperandAnyType.ts, 2, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

var resultIsAny4 = (STRING, ANY);
>resultIsAny4 : any, Symbol(resultIsAny4, Decl(commaOperatorWithSecondOperandAnyType.ts, 17, 3))
>(STRING, ANY) : any
>STRING, ANY : any
>STRING : string, Symbol(STRING, Decl(commaOperatorWithSecondOperandAnyType.ts, 3, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

var resultIsAny5 = (OBJECT, ANY);
>resultIsAny5 : any, Symbol(resultIsAny5, Decl(commaOperatorWithSecondOperandAnyType.ts, 18, 3))
>(OBJECT, ANY) : any
>OBJECT, ANY : any
>OBJECT : Object, Symbol(OBJECT, Decl(commaOperatorWithSecondOperandAnyType.ts, 4, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

//Literal and expression
var x: any;
>x : any, Symbol(x, Decl(commaOperatorWithSecondOperandAnyType.ts, 21, 3))

1, ANY;
>1, ANY : any
>1 : number
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

++NUMBER, ANY;
>++NUMBER, ANY : any
>++NUMBER : number
>NUMBER : number, Symbol(NUMBER, Decl(commaOperatorWithSecondOperandAnyType.ts, 2, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

"string", [null, 1];
>"string", [null, 1] : number[]
>"string" : string
>[null, 1] : number[]
>null : null
>1 : number

"string".charAt(0), [null, 1];
>"string".charAt(0), [null, 1] : number[]
>"string".charAt(0) : string
>"string".charAt : (pos: number) => string, Symbol(String.charAt, Decl(lib.d.ts, 279, 23))
>"string" : string
>charAt : (pos: number) => string, Symbol(String.charAt, Decl(lib.d.ts, 279, 23))
>0 : number
>[null, 1] : number[]
>null : null
>1 : number

true, x("any");
>true, x("any") : any
>true : boolean
>x("any") : any
>x : any, Symbol(x, Decl(commaOperatorWithSecondOperandAnyType.ts, 21, 3))
>"any" : string

!BOOLEAN, x.doSomeThing();
>!BOOLEAN, x.doSomeThing() : any
>!BOOLEAN : boolean
>BOOLEAN : boolean, Symbol(BOOLEAN, Decl(commaOperatorWithSecondOperandAnyType.ts, 1, 3))
>x.doSomeThing() : any
>x.doSomeThing : any
>x : any, Symbol(x, Decl(commaOperatorWithSecondOperandAnyType.ts, 21, 3))
>doSomeThing : any

var resultIsAny6 = (1, ANY);
>resultIsAny6 : any, Symbol(resultIsAny6, Decl(commaOperatorWithSecondOperandAnyType.ts, 30, 3))
>(1, ANY) : any
>1, ANY : any
>1 : number
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

var resultIsAny7 = (++NUMBER, ANY);
>resultIsAny7 : any, Symbol(resultIsAny7, Decl(commaOperatorWithSecondOperandAnyType.ts, 31, 3))
>(++NUMBER, ANY) : any
>++NUMBER, ANY : any
>++NUMBER : number
>NUMBER : number, Symbol(NUMBER, Decl(commaOperatorWithSecondOperandAnyType.ts, 2, 3))
>ANY : any, Symbol(ANY, Decl(commaOperatorWithSecondOperandAnyType.ts, 0, 3))

var resultIsAny8 = ("string", null);
>resultIsAny8 : any, Symbol(resultIsAny8, Decl(commaOperatorWithSecondOperandAnyType.ts, 32, 3))
>("string", null) : null
>"string", null : null
>"string" : string
>null : null

var resultIsAny9 = ("string".charAt(0), undefined);
>resultIsAny9 : any, Symbol(resultIsAny9, Decl(commaOperatorWithSecondOperandAnyType.ts, 33, 3))
>("string".charAt(0), undefined) : undefined
>"string".charAt(0), undefined : undefined
>"string".charAt(0) : string
>"string".charAt : (pos: number) => string, Symbol(String.charAt, Decl(lib.d.ts, 279, 23))
>"string" : string
>charAt : (pos: number) => string, Symbol(String.charAt, Decl(lib.d.ts, 279, 23))
>0 : number
>undefined : undefined, Symbol(undefined)

var resultIsAny10 = (true, x("any"));
>resultIsAny10 : any, Symbol(resultIsAny10, Decl(commaOperatorWithSecondOperandAnyType.ts, 34, 3))
>(true, x("any")) : any
>true, x("any") : any
>true : boolean
>x("any") : any
>x : any, Symbol(x, Decl(commaOperatorWithSecondOperandAnyType.ts, 21, 3))
>"any" : string

var resultIsAny11 = (!BOOLEAN, x.doSomeThing());
>resultIsAny11 : any, Symbol(resultIsAny11, Decl(commaOperatorWithSecondOperandAnyType.ts, 35, 3))
>(!BOOLEAN, x.doSomeThing()) : any
>!BOOLEAN, x.doSomeThing() : any
>!BOOLEAN : boolean
>BOOLEAN : boolean, Symbol(BOOLEAN, Decl(commaOperatorWithSecondOperandAnyType.ts, 1, 3))
>x.doSomeThing() : any
>x.doSomeThing : any
>x : any, Symbol(x, Decl(commaOperatorWithSecondOperandAnyType.ts, 21, 3))
>doSomeThing : any

