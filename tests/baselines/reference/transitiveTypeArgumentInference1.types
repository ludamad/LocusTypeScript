=== tests/cases/compiler/transitiveTypeArgumentInference1.ts ===
interface I1<T, U> {
>I1 : I1<T, U>, Symbol(I1, Decl(transitiveTypeArgumentInference1.ts, 0, 0))
>T : T, Symbol(T, Decl(transitiveTypeArgumentInference1.ts, 0, 13))
>U : U, Symbol(U, Decl(transitiveTypeArgumentInference1.ts, 0, 15))

	m(value: T): U;
>m : (value: T) => U, Symbol(m, Decl(transitiveTypeArgumentInference1.ts, 0, 20))
>value : T, Symbol(value, Decl(transitiveTypeArgumentInference1.ts, 1, 3))
>T : T, Symbol(T, Decl(transitiveTypeArgumentInference1.ts, 0, 13))
>U : U, Symbol(U, Decl(transitiveTypeArgumentInference1.ts, 0, 15))
}

var i: I1<boolean, string> = null;
>i : I1<boolean, string>, Symbol(i, Decl(transitiveTypeArgumentInference1.ts, 4, 3))
>I1 : I1<T, U>, Symbol(I1, Decl(transitiveTypeArgumentInference1.ts, 0, 0))
>null : null

class C<T> {
>C : C<T>, Symbol(C, Decl(transitiveTypeArgumentInference1.ts, 4, 34))
>T : T, Symbol(T, Decl(transitiveTypeArgumentInference1.ts, 6, 8))

	constructor(p: I1<boolean, T>) {
>p : I1<boolean, T>, Symbol(p, Decl(transitiveTypeArgumentInference1.ts, 7, 13))
>I1 : I1<T, U>, Symbol(I1, Decl(transitiveTypeArgumentInference1.ts, 0, 0))
>T : T, Symbol(T, Decl(transitiveTypeArgumentInference1.ts, 6, 8))
	}
}

var c = new C(i);
>c : C<string>, Symbol(c, Decl(transitiveTypeArgumentInference1.ts, 11, 3))
>new C(i) : C<string>
>C : typeof C, Symbol(C, Decl(transitiveTypeArgumentInference1.ts, 4, 34))
>i : I1<boolean, string>, Symbol(i, Decl(transitiveTypeArgumentInference1.ts, 4, 3))

