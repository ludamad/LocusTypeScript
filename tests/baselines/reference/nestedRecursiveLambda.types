=== tests/cases/compiler/nestedRecursiveLambda.ts ===
function f(a:any) {
>f : (a: any) => void, Symbol(f, Decl(nestedRecursiveLambda.ts, 0, 0))
>a : any, Symbol(a, Decl(nestedRecursiveLambda.ts, 0, 11))

void (r =>(r => r));
>void (r =>(r => r)) : undefined
>(r =>(r => r)) : (r: any) => (r: any) => any
>r =>(r => r) : (r: any) => (r: any) => any
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 1, 6))
>(r => r) : (r: any) => any
>r => r : (r: any) => any
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 1, 11))
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 1, 11))
}
f((r =>(r => r)));
>f((r =>(r => r))) : void
>f : (a: any) => void, Symbol(f, Decl(nestedRecursiveLambda.ts, 0, 0))
>(r =>(r => r)) : (r: any) => (r: any) => any
>r =>(r => r) : (r: any) => (r: any) => any
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 3, 3))
>(r => r) : (r: any) => any
>r => r : (r: any) => any
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 3, 8))
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 3, 8))

void(r =>(r => r));
>void(r =>(r => r)) : undefined
>(r =>(r => r)) : (r: any) => (r: any) => any
>r =>(r => r) : (r: any) => (r: any) => any
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 4, 5))
>(r => r) : (r: any) => any
>r => r : (r: any) => any
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 4, 10))
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 4, 10))

[(r =>(r => r))]
>[(r =>(r => r))] : ((r: any) => (r: any) => any)[]
>(r =>(r => r)) : (r: any) => (r: any) => any
>r =>(r => r) : (r: any) => (r: any) => any
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 5, 2))
>(r => r) : (r: any) => any
>r => r : (r: any) => any
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 5, 7))
>r : any, Symbol(r, Decl(nestedRecursiveLambda.ts, 5, 7))

