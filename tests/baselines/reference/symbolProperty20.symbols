=== tests/cases/conformance/es6/Symbols/symbolProperty20.ts ===
interface I {
>I : Symbol(I, Decl(symbolProperty20.ts, 0, 0))

    [Symbol.iterator]: (s: string) => string;
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.d.ts, 1249, 31))
>Symbol : Symbol(Symbol, Decl(lib.d.ts, 1199, 52), Decl(lib.d.ts, 1305, 11))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.d.ts, 1249, 31))
>s : Symbol(s, Decl(symbolProperty20.ts, 1, 24))

    [Symbol.toStringTag](s: number): number;
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.d.ts, 1291, 24))
>Symbol : Symbol(Symbol, Decl(lib.d.ts, 1199, 52), Decl(lib.d.ts, 1305, 11))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.d.ts, 1291, 24))
>s : Symbol(s, Decl(symbolProperty20.ts, 2, 25))
}

var i: I = {
>i : Symbol(i, Decl(symbolProperty20.ts, 5, 3))
>I : Symbol(I, Decl(symbolProperty20.ts, 0, 0))

    [Symbol.iterator]: s => s,
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.d.ts, 1249, 31))
>Symbol : Symbol(Symbol, Decl(lib.d.ts, 1199, 52), Decl(lib.d.ts, 1305, 11))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.d.ts, 1249, 31))
>s : Symbol(s, Decl(symbolProperty20.ts, 6, 22))
>s : Symbol(s, Decl(symbolProperty20.ts, 6, 22))

    [Symbol.toStringTag](n) { return n; }
>Symbol.toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.d.ts, 1291, 24))
>Symbol : Symbol(Symbol, Decl(lib.d.ts, 1199, 52), Decl(lib.d.ts, 1305, 11))
>toStringTag : Symbol(SymbolConstructor.toStringTag, Decl(lib.d.ts, 1291, 24))
>n : Symbol(n, Decl(symbolProperty20.ts, 7, 25))
>n : Symbol(n, Decl(symbolProperty20.ts, 7, 25))
}
