=== tests/cases/conformance/types/primitives/boolean/extendBooleanInterface.ts ===
interface Boolean {
>Boolean : Boolean, Symbol(Boolean, Decl(lib.d.ts, 443, 38), Decl(lib.d.ts, 456, 11), Decl(extendBooleanInterface.ts, 0, 0))

    doStuff(): string;
>doStuff : () => string, Symbol(doStuff, Decl(extendBooleanInterface.ts, 0, 19))

    doOtherStuff<T>(x: T): T;
>doOtherStuff : <T>(x: T) => T, Symbol(doOtherStuff, Decl(extendBooleanInterface.ts, 1, 22))
>T : T, Symbol(T, Decl(extendBooleanInterface.ts, 2, 17))
>x : T, Symbol(x, Decl(extendBooleanInterface.ts, 2, 20))
>T : T, Symbol(T, Decl(extendBooleanInterface.ts, 2, 17))
>T : T, Symbol(T, Decl(extendBooleanInterface.ts, 2, 17))
}

var x = true;
>x : boolean, Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))
>true : boolean

var a: string = x.doStuff();
>a : string, Symbol(a, Decl(extendBooleanInterface.ts, 6, 3))
>x.doStuff() : string
>x.doStuff : () => string, Symbol(Boolean.doStuff, Decl(extendBooleanInterface.ts, 0, 19))
>x : boolean, Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))
>doStuff : () => string, Symbol(Boolean.doStuff, Decl(extendBooleanInterface.ts, 0, 19))

var b: string = x.doOtherStuff('hm');
>b : string, Symbol(b, Decl(extendBooleanInterface.ts, 7, 3))
>x.doOtherStuff('hm') : string
>x.doOtherStuff : <T>(x: T) => T, Symbol(Boolean.doOtherStuff, Decl(extendBooleanInterface.ts, 1, 22))
>x : boolean, Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))
>doOtherStuff : <T>(x: T) => T, Symbol(Boolean.doOtherStuff, Decl(extendBooleanInterface.ts, 1, 22))
>'hm' : string

var c: string = x['doStuff']();
>c : string, Symbol(c, Decl(extendBooleanInterface.ts, 8, 3))
>x['doStuff']() : string
>x['doStuff'] : () => string
>x : boolean, Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))
>'doStuff' : string, Symbol(Boolean.doStuff, Decl(extendBooleanInterface.ts, 0, 19))

var d: string = x['doOtherStuff']('hm');
>d : string, Symbol(d, Decl(extendBooleanInterface.ts, 9, 3))
>x['doOtherStuff']('hm') : string
>x['doOtherStuff'] : <T>(x: T) => T
>x : boolean, Symbol(x, Decl(extendBooleanInterface.ts, 5, 3))
>'doOtherStuff' : string, Symbol(Boolean.doOtherStuff, Decl(extendBooleanInterface.ts, 1, 22))
>'hm' : string

