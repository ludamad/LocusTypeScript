==== tests/cases/compiler/overloadresolutionWithConstraintCheckingDeferred.ts (6 errors) ====
    interface A { x }
    interface B { x; y }
    interface C { z }
    interface D { q }
    
    class G<T extends A> {
        constructor(x: T) { }
    }
    
    declare function foo(arg: (x: D) => number): string;
    declare function foo(arg: (x: C) => any): string;
    declare function foo(arg: (x: B) => any): number;
    
    var result: number = foo(x => new G(x)); // No error, returns number
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! Type 'string' is not assignable to type 'number'.
                                  ~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    
    var result2: number = foo(x => new G<typeof x>(x)); // No error, returns number
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
                                         ~~~~~~~~
!!! Type 'D' does not satisfy the constraint 'A'.
    
    var result3: string = foo(x => { // returns string because the C overload is picked
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        var y: G<typeof x>; // error that C does not satisfy constraint
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
               ~~~~~~~~~~~
!!! Type 'D' does not satisfy the constraint 'A'.
        return y;
    ~~~~~~~~~~~~~
    });
    ~~
!!! Supplied parameters do not match any signature of call target.
    