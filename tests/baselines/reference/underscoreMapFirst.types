=== tests/cases/compiler/underscoreMapFirst.ts ===
declare module _ {
>_ : typeof _, Symbol(_,Decl(underscoreMapFirst.ts,0,0))

    interface Collection<T> { }
>Collection : Collection<T>, Symbol(Collection,Decl(underscoreMapFirst.ts,0,18))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,1,25))

    interface List<T> extends Collection<T> {
>List : List<T>, Symbol(List,Decl(underscoreMapFirst.ts,1,31))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,2,19))
>Collection : Collection<T>, Symbol(Collection,Decl(underscoreMapFirst.ts,0,18))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,2,19))

        [index: number]: T;
>index : number, Symbol(index,Decl(underscoreMapFirst.ts,3,9))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,2,19))

        length: number;
>length : number, Symbol(length,Decl(underscoreMapFirst.ts,3,27))
    }

    interface ListIterator<T, TResult> {
>ListIterator : ListIterator<T, TResult>, Symbol(ListIterator,Decl(underscoreMapFirst.ts,5,5))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,7,27))
>TResult : TResult, Symbol(TResult,Decl(underscoreMapFirst.ts,7,29))

        (value: T, index: number, list: T[]): TResult;
>value : T, Symbol(value,Decl(underscoreMapFirst.ts,8,9))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,7,27))
>index : number, Symbol(index,Decl(underscoreMapFirst.ts,8,18))
>list : T[], Symbol(list,Decl(underscoreMapFirst.ts,8,33))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,7,27))
>TResult : TResult, Symbol(TResult,Decl(underscoreMapFirst.ts,7,29))
    }

    interface Dictionary<T> extends Collection<T> {
>Dictionary : Dictionary<T>, Symbol(Dictionary,Decl(underscoreMapFirst.ts,9,5))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,11,25))
>Collection : Collection<T>, Symbol(Collection,Decl(underscoreMapFirst.ts,0,18))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,11,25))

        [index: string]: T;
>index : string, Symbol(index,Decl(underscoreMapFirst.ts,12,9))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,11,25))
    }
    export function pluck<T extends {}>(
>pluck : <T extends {}>(list: Collection<T>, propertyName: string) => any[], Symbol(pluck,Decl(underscoreMapFirst.ts,13,5))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,14,26))

        list: Collection<T>,
>list : Collection<T>, Symbol(list,Decl(underscoreMapFirst.ts,14,40))
>Collection : Collection<T>, Symbol(Collection,Decl(underscoreMapFirst.ts,0,18))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,14,26))

        propertyName: string): any[];
>propertyName : string, Symbol(propertyName,Decl(underscoreMapFirst.ts,15,28))

    export function map<T, TResult>(
>map : <T, TResult>(list: List<T>, iterator: ListIterator<T, TResult>, context?: any) => TResult[], Symbol(map,Decl(underscoreMapFirst.ts,16,37))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,18,24))
>TResult : TResult, Symbol(TResult,Decl(underscoreMapFirst.ts,18,26))

        list: List<T>,
>list : List<T>, Symbol(list,Decl(underscoreMapFirst.ts,18,36))
>List : List<T>, Symbol(List,Decl(underscoreMapFirst.ts,1,31))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,18,24))

        iterator: ListIterator<T, TResult>,
>iterator : ListIterator<T, TResult>, Symbol(iterator,Decl(underscoreMapFirst.ts,19,22))
>ListIterator : ListIterator<T, TResult>, Symbol(ListIterator,Decl(underscoreMapFirst.ts,5,5))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,18,24))
>TResult : TResult, Symbol(TResult,Decl(underscoreMapFirst.ts,18,26))

        context?: any): TResult[];
>context : any, Symbol(context,Decl(underscoreMapFirst.ts,20,43))
>TResult : TResult, Symbol(TResult,Decl(underscoreMapFirst.ts,18,26))

    export function first<T>(array: List<T>): T;
>first : <T>(array: List<T>) => T, Symbol(first,Decl(underscoreMapFirst.ts,21,34))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,23,26))
>array : List<T>, Symbol(array,Decl(underscoreMapFirst.ts,23,29))
>List : List<T>, Symbol(List,Decl(underscoreMapFirst.ts,1,31))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,23,26))
>T : T, Symbol(T,Decl(underscoreMapFirst.ts,23,26))
}

declare class View {
>View : View, Symbol(View,Decl(underscoreMapFirst.ts,24,1))

    model: any;
>model : any, Symbol(model,Decl(underscoreMapFirst.ts,26,20))
}

interface IData {
>IData : IData, Symbol(IData,Decl(underscoreMapFirst.ts,28,1))

    series: ISeries[];
>series : ISeries[], Symbol(series,Decl(underscoreMapFirst.ts,30,17))
>ISeries : ISeries, Symbol(ISeries,Decl(underscoreMapFirst.ts,32,1))
}

interface ISeries {
>ISeries : ISeries, Symbol(ISeries,Decl(underscoreMapFirst.ts,32,1))

    items: any[];
>items : any[], Symbol(items,Decl(underscoreMapFirst.ts,34,19))

    key: string;
>key : string, Symbol(key,Decl(underscoreMapFirst.ts,35,17))
}

class MyView extends View {
>MyView : MyView, Symbol(MyView,Decl(underscoreMapFirst.ts,37,1))
>View : View, Symbol(View,Decl(underscoreMapFirst.ts,24,1))

    public getDataSeries(): ISeries[] {
>getDataSeries : () => ISeries[], Symbol(getDataSeries,Decl(underscoreMapFirst.ts,39,27))
>ISeries : ISeries, Symbol(ISeries,Decl(underscoreMapFirst.ts,32,1))

        var data: IData[] = this.model.get("data");
>data : IData[], Symbol(data,Decl(underscoreMapFirst.ts,41,11))
>IData : IData, Symbol(IData,Decl(underscoreMapFirst.ts,28,1))
>this.model.get("data") : any
>this.model.get : any
>this.model : any, Symbol(View.model,Decl(underscoreMapFirst.ts,26,20))
>this : MyView, Symbol(MyView,Decl(underscoreMapFirst.ts,37,1))
>model : any, Symbol(View.model,Decl(underscoreMapFirst.ts,26,20))
>get : any
>"data" : string

        var allSeries: ISeries[][] = _.pluck(data, "series");
>allSeries : ISeries[][], Symbol(allSeries,Decl(underscoreMapFirst.ts,42,11))
>ISeries : ISeries, Symbol(ISeries,Decl(underscoreMapFirst.ts,32,1))
>_.pluck(data, "series") : any[]
>_.pluck : <T extends {}>(list: _.Collection<T>, propertyName: string) => any[], Symbol(_.pluck,Decl(underscoreMapFirst.ts,13,5))
>_ : typeof _, Symbol(_,Decl(underscoreMapFirst.ts,0,0))
>pluck : <T extends {}>(list: _.Collection<T>, propertyName: string) => any[], Symbol(_.pluck,Decl(underscoreMapFirst.ts,13,5))
>data : IData[], Symbol(data,Decl(underscoreMapFirst.ts,41,11))
>"series" : string

        return _.map(allSeries, _.first);
>_.map(allSeries, _.first) : ISeries[]
>_.map : <T, TResult>(list: _.List<T>, iterator: _.ListIterator<T, TResult>, context?: any) => TResult[], Symbol(_.map,Decl(underscoreMapFirst.ts,16,37))
>_ : typeof _, Symbol(_,Decl(underscoreMapFirst.ts,0,0))
>map : <T, TResult>(list: _.List<T>, iterator: _.ListIterator<T, TResult>, context?: any) => TResult[], Symbol(_.map,Decl(underscoreMapFirst.ts,16,37))
>allSeries : ISeries[][], Symbol(allSeries,Decl(underscoreMapFirst.ts,42,11))
>_.first : <T>(array: _.List<T>) => T, Symbol(_.first,Decl(underscoreMapFirst.ts,21,34))
>_ : typeof _, Symbol(_,Decl(underscoreMapFirst.ts,0,0))
>first : <T>(array: _.List<T>) => T, Symbol(_.first,Decl(underscoreMapFirst.ts,21,34))
    }
}

