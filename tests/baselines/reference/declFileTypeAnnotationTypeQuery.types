=== tests/cases/compiler/declFileTypeAnnotationTypeQuery.ts ===

class c {
>c : c, Symbol(c,Decl(declFileTypeAnnotationTypeQuery.ts,0,0))
}
module m {
>m : typeof m, Symbol(m,Decl(declFileTypeAnnotationTypeQuery.ts,2,1))

    export class c {
>c : c, Symbol(c,Decl(declFileTypeAnnotationTypeQuery.ts,3,10))
    }
    export class g<T> {
>g : g<T>, Symbol(g,Decl(declFileTypeAnnotationTypeQuery.ts,5,5))
>T : T, Symbol(T,Decl(declFileTypeAnnotationTypeQuery.ts,6,19))
    }
}
class g<T> {
>g : g<T>, Symbol(g,Decl(declFileTypeAnnotationTypeQuery.ts,8,1))
>T : T, Symbol(T,Decl(declFileTypeAnnotationTypeQuery.ts,9,8))
}

// Just the name
function foo(): typeof c {
>foo : () => typeof c, Symbol(foo,Decl(declFileTypeAnnotationTypeQuery.ts,10,1))
>c : typeof c, Symbol(c,Decl(declFileTypeAnnotationTypeQuery.ts,0,0))

    return c;
>c : typeof c, Symbol(c,Decl(declFileTypeAnnotationTypeQuery.ts,0,0))
}
function foo2() {
>foo2 : () => typeof c, Symbol(foo2,Decl(declFileTypeAnnotationTypeQuery.ts,15,1))

    return c;
>c : typeof c, Symbol(c,Decl(declFileTypeAnnotationTypeQuery.ts,0,0))
}

// Qualified name
function foo3(): typeof m.c {
>foo3 : () => typeof m.c, Symbol(foo3,Decl(declFileTypeAnnotationTypeQuery.ts,18,1))
>m.c : typeof m.c, Symbol(m.c,Decl(declFileTypeAnnotationTypeQuery.ts,3,10))
>m : typeof m, Symbol(m,Decl(declFileTypeAnnotationTypeQuery.ts,2,1))
>c : typeof m.c, Symbol(m.c,Decl(declFileTypeAnnotationTypeQuery.ts,3,10))

    return m.c;
>m.c : typeof m.c, Symbol(m.c,Decl(declFileTypeAnnotationTypeQuery.ts,3,10))
>m : typeof m, Symbol(m,Decl(declFileTypeAnnotationTypeQuery.ts,2,1))
>c : typeof m.c, Symbol(m.c,Decl(declFileTypeAnnotationTypeQuery.ts,3,10))
}
function foo4() {
>foo4 : () => typeof m.c, Symbol(foo4,Decl(declFileTypeAnnotationTypeQuery.ts,23,1))

    return m.c;
>m.c : typeof m.c, Symbol(m.c,Decl(declFileTypeAnnotationTypeQuery.ts,3,10))
>m : typeof m, Symbol(m,Decl(declFileTypeAnnotationTypeQuery.ts,2,1))
>c : typeof m.c, Symbol(m.c,Decl(declFileTypeAnnotationTypeQuery.ts,3,10))
}

// Just the name with type arguments
function foo5(): typeof g {
>foo5 : () => typeof g, Symbol(foo5,Decl(declFileTypeAnnotationTypeQuery.ts,26,1))
>g : typeof g, Symbol(g,Decl(declFileTypeAnnotationTypeQuery.ts,8,1))

    return g;
>g : typeof g, Symbol(g,Decl(declFileTypeAnnotationTypeQuery.ts,8,1))
}
function foo6() {
>foo6 : () => typeof g, Symbol(foo6,Decl(declFileTypeAnnotationTypeQuery.ts,31,1))

    return g;
>g : typeof g, Symbol(g,Decl(declFileTypeAnnotationTypeQuery.ts,8,1))
}

// Qualified name with type arguments
function foo7(): typeof m.g {
>foo7 : () => typeof m.g, Symbol(foo7,Decl(declFileTypeAnnotationTypeQuery.ts,34,1))
>m.g : typeof m.g, Symbol(m.g,Decl(declFileTypeAnnotationTypeQuery.ts,5,5))
>m : typeof m, Symbol(m,Decl(declFileTypeAnnotationTypeQuery.ts,2,1))
>g : typeof m.g, Symbol(m.g,Decl(declFileTypeAnnotationTypeQuery.ts,5,5))

    return m.g
>m.g : typeof m.g, Symbol(m.g,Decl(declFileTypeAnnotationTypeQuery.ts,5,5))
>m : typeof m, Symbol(m,Decl(declFileTypeAnnotationTypeQuery.ts,2,1))
>g : typeof m.g, Symbol(m.g,Decl(declFileTypeAnnotationTypeQuery.ts,5,5))
}
function foo8() {
>foo8 : () => typeof m.g, Symbol(foo8,Decl(declFileTypeAnnotationTypeQuery.ts,39,1))

    return m.g
>m.g : typeof m.g, Symbol(m.g,Decl(declFileTypeAnnotationTypeQuery.ts,5,5))
>m : typeof m, Symbol(m,Decl(declFileTypeAnnotationTypeQuery.ts,2,1))
>g : typeof m.g, Symbol(m.g,Decl(declFileTypeAnnotationTypeQuery.ts,5,5))
}
