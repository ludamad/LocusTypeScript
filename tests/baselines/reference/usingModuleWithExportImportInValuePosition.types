=== tests/cases/compiler/usingModuleWithExportImportInValuePosition.ts ===
module A {
>A : typeof A, Symbol(A, Decl(usingModuleWithExportImportInValuePosition.ts, 0, 0))

export var x = 'hello world'
>x : string, Symbol(x, Decl(usingModuleWithExportImportInValuePosition.ts, 1, 10))
>'hello world' : string

export class Point {
>Point : Point, Symbol(Point, Decl(usingModuleWithExportImportInValuePosition.ts, 1, 28))

        constructor(public x: number, public y: number) { }
>x : number, Symbol(x, Decl(usingModuleWithExportImportInValuePosition.ts, 3, 20))
>y : number, Symbol(y, Decl(usingModuleWithExportImportInValuePosition.ts, 3, 37))
    }
    export module B {
>B : any, Symbol(B, Decl(usingModuleWithExportImportInValuePosition.ts, 4, 5))

        export interface Id {
>Id : Id, Symbol(Id, Decl(usingModuleWithExportImportInValuePosition.ts, 5, 21))

            name: string;
>name : string, Symbol(name, Decl(usingModuleWithExportImportInValuePosition.ts, 6, 29))
        }
    }
}
module C {
>C : typeof C, Symbol(C, Decl(usingModuleWithExportImportInValuePosition.ts, 10, 1))

    export import a = A;
>a : typeof a, Symbol(a, Decl(usingModuleWithExportImportInValuePosition.ts, 11, 10))
>A : typeof a, Symbol(a, Decl(usingModuleWithExportImportInValuePosition.ts, 0, 0))
}

var a: string = C.a.x;
>a : string, Symbol(a, Decl(usingModuleWithExportImportInValuePosition.ts, 15, 3))
>C.a.x : string, Symbol(A.x, Decl(usingModuleWithExportImportInValuePosition.ts, 1, 10))
>C.a : typeof A, Symbol(C.a, Decl(usingModuleWithExportImportInValuePosition.ts, 11, 10))
>C : typeof C, Symbol(C, Decl(usingModuleWithExportImportInValuePosition.ts, 10, 1))
>a : typeof A, Symbol(C.a, Decl(usingModuleWithExportImportInValuePosition.ts, 11, 10))
>x : string, Symbol(A.x, Decl(usingModuleWithExportImportInValuePosition.ts, 1, 10))

var b: { x: number; y: number; } = new C.a.Point(0, 0);
>b : { x: number; y: number; }, Symbol(b, Decl(usingModuleWithExportImportInValuePosition.ts, 16, 3))
>x : number, Symbol(x, Decl(usingModuleWithExportImportInValuePosition.ts, 16, 8))
>y : number, Symbol(y, Decl(usingModuleWithExportImportInValuePosition.ts, 16, 19))
>new C.a.Point(0, 0) : A.Point
>C.a.Point : typeof A.Point, Symbol(A.Point, Decl(usingModuleWithExportImportInValuePosition.ts, 1, 28))
>C.a : typeof A, Symbol(C.a, Decl(usingModuleWithExportImportInValuePosition.ts, 11, 10))
>C : typeof C, Symbol(C, Decl(usingModuleWithExportImportInValuePosition.ts, 10, 1))
>a : typeof A, Symbol(C.a, Decl(usingModuleWithExportImportInValuePosition.ts, 11, 10))
>Point : typeof A.Point, Symbol(A.Point, Decl(usingModuleWithExportImportInValuePosition.ts, 1, 28))
>0 : number
>0 : number

var c: { name: string };
>c : { name: string; }, Symbol(c, Decl(usingModuleWithExportImportInValuePosition.ts, 17, 3), Decl(usingModuleWithExportImportInValuePosition.ts, 18, 3))
>name : string, Symbol(name, Decl(usingModuleWithExportImportInValuePosition.ts, 17, 8))

var c: C.a.B.Id;
>c : { name: string; }, Symbol(c, Decl(usingModuleWithExportImportInValuePosition.ts, 17, 3), Decl(usingModuleWithExportImportInValuePosition.ts, 18, 3))
>C : any, Symbol(C, Decl(usingModuleWithExportImportInValuePosition.ts, 10, 1))
>a : any, Symbol(C.a, Decl(usingModuleWithExportImportInValuePosition.ts, 11, 10))
>B : any, Symbol(A.B, Decl(usingModuleWithExportImportInValuePosition.ts, 4, 5))
>Id : A.B.Id, Symbol(A.B.Id, Decl(usingModuleWithExportImportInValuePosition.ts, 5, 21))

