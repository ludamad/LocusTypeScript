=== tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsBooleanType.ts ===
//Cond ? Expr1 : Expr2,  Cond is of boolean type, Expr1 and Expr2 have the same type
var condBoolean: boolean;
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))

var exprAny1: any;
>exprAny1 : any, Symbol(exprAny1,Decl(conditionalOperatorConditionIsBooleanType.ts,3,3))

var exprBoolean1: boolean;
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))

var exprNumber1: number;
>exprNumber1 : number, Symbol(exprNumber1,Decl(conditionalOperatorConditionIsBooleanType.ts,5,3))

var exprString1: string;
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))

var exprIsObject1: Object;
>exprIsObject1 : Object, Symbol(exprIsObject1,Decl(conditionalOperatorConditionIsBooleanType.ts,7,3))
>Object : Object, Symbol(Object,Decl(lib.d.ts,92,1),Decl(lib.d.ts,223,11))

var exprAny2: any;
>exprAny2 : any, Symbol(exprAny2,Decl(conditionalOperatorConditionIsBooleanType.ts,9,3))

var exprBoolean2: boolean;
>exprBoolean2 : boolean, Symbol(exprBoolean2,Decl(conditionalOperatorConditionIsBooleanType.ts,10,3))

var exprNumber2: number;
>exprNumber2 : number, Symbol(exprNumber2,Decl(conditionalOperatorConditionIsBooleanType.ts,11,3))

var exprString2: string;
>exprString2 : string, Symbol(exprString2,Decl(conditionalOperatorConditionIsBooleanType.ts,12,3))

var exprIsObject2: Object;
>exprIsObject2 : Object, Symbol(exprIsObject2,Decl(conditionalOperatorConditionIsBooleanType.ts,13,3))
>Object : Object, Symbol(Object,Decl(lib.d.ts,92,1),Decl(lib.d.ts,223,11))

//Cond is a boolean type variable
condBoolean ? exprAny1 : exprAny2;
>condBoolean ? exprAny1 : exprAny2 : any
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprAny1 : any, Symbol(exprAny1,Decl(conditionalOperatorConditionIsBooleanType.ts,3,3))
>exprAny2 : any, Symbol(exprAny2,Decl(conditionalOperatorConditionIsBooleanType.ts,9,3))

condBoolean ? exprBoolean1 : exprBoolean2;
>condBoolean ? exprBoolean1 : exprBoolean2 : boolean
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))
>exprBoolean2 : boolean, Symbol(exprBoolean2,Decl(conditionalOperatorConditionIsBooleanType.ts,10,3))

condBoolean ? exprNumber1 : exprNumber2;
>condBoolean ? exprNumber1 : exprNumber2 : number
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprNumber1 : number, Symbol(exprNumber1,Decl(conditionalOperatorConditionIsBooleanType.ts,5,3))
>exprNumber2 : number, Symbol(exprNumber2,Decl(conditionalOperatorConditionIsBooleanType.ts,11,3))

condBoolean ? exprString1 : exprString2;
>condBoolean ? exprString1 : exprString2 : string
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprString2 : string, Symbol(exprString2,Decl(conditionalOperatorConditionIsBooleanType.ts,12,3))

condBoolean ? exprIsObject1 : exprIsObject2;
>condBoolean ? exprIsObject1 : exprIsObject2 : Object
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprIsObject1 : Object, Symbol(exprIsObject1,Decl(conditionalOperatorConditionIsBooleanType.ts,7,3))
>exprIsObject2 : Object, Symbol(exprIsObject2,Decl(conditionalOperatorConditionIsBooleanType.ts,13,3))

condBoolean ? exprString1 : exprBoolean1; // union
>condBoolean ? exprString1 : exprBoolean1 : string | boolean
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))

//Cond is a boolean type literal
true ? exprAny1 : exprAny2;
>true ? exprAny1 : exprAny2 : any
>true : boolean
>exprAny1 : any, Symbol(exprAny1,Decl(conditionalOperatorConditionIsBooleanType.ts,3,3))
>exprAny2 : any, Symbol(exprAny2,Decl(conditionalOperatorConditionIsBooleanType.ts,9,3))

false ? exprBoolean1 : exprBoolean2;
>false ? exprBoolean1 : exprBoolean2 : boolean
>false : boolean
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))
>exprBoolean2 : boolean, Symbol(exprBoolean2,Decl(conditionalOperatorConditionIsBooleanType.ts,10,3))

true ? exprNumber1 : exprNumber2;
>true ? exprNumber1 : exprNumber2 : number
>true : boolean
>exprNumber1 : number, Symbol(exprNumber1,Decl(conditionalOperatorConditionIsBooleanType.ts,5,3))
>exprNumber2 : number, Symbol(exprNumber2,Decl(conditionalOperatorConditionIsBooleanType.ts,11,3))

false ? exprString1 : exprString2;
>false ? exprString1 : exprString2 : string
>false : boolean
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprString2 : string, Symbol(exprString2,Decl(conditionalOperatorConditionIsBooleanType.ts,12,3))

true ? exprIsObject1 : exprIsObject2;
>true ? exprIsObject1 : exprIsObject2 : Object
>true : boolean
>exprIsObject1 : Object, Symbol(exprIsObject1,Decl(conditionalOperatorConditionIsBooleanType.ts,7,3))
>exprIsObject2 : Object, Symbol(exprIsObject2,Decl(conditionalOperatorConditionIsBooleanType.ts,13,3))

true ? exprString1 : exprBoolean1; // union
>true ? exprString1 : exprBoolean1 : string | boolean
>true : boolean
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))

//Cond is a boolean type expression
!true ? exprAny1 : exprAny2;
>!true ? exprAny1 : exprAny2 : any
>!true : boolean
>true : boolean
>exprAny1 : any, Symbol(exprAny1,Decl(conditionalOperatorConditionIsBooleanType.ts,3,3))
>exprAny2 : any, Symbol(exprAny2,Decl(conditionalOperatorConditionIsBooleanType.ts,9,3))

typeof "123" == "string" ? exprBoolean1 : exprBoolean2;
>typeof "123" == "string" ? exprBoolean1 : exprBoolean2 : boolean
>typeof "123" == "string" : boolean
>typeof "123" : string
>"123" : string
>"string" : string
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))
>exprBoolean2 : boolean, Symbol(exprBoolean2,Decl(conditionalOperatorConditionIsBooleanType.ts,10,3))

2 > 1 ? exprNumber1 : exprNumber2;
>2 > 1 ? exprNumber1 : exprNumber2 : number
>2 > 1 : boolean
>2 : number
>1 : number
>exprNumber1 : number, Symbol(exprNumber1,Decl(conditionalOperatorConditionIsBooleanType.ts,5,3))
>exprNumber2 : number, Symbol(exprNumber2,Decl(conditionalOperatorConditionIsBooleanType.ts,11,3))

null === undefined ? exprString1 : exprString2;
>null === undefined ? exprString1 : exprString2 : string
>null === undefined : boolean
>null : null
>undefined : undefined, Symbol(undefined)
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprString2 : string, Symbol(exprString2,Decl(conditionalOperatorConditionIsBooleanType.ts,12,3))

true || false ? exprIsObject1 : exprIsObject2;
>true || false ? exprIsObject1 : exprIsObject2 : Object
>true || false : boolean
>true : boolean
>false : boolean
>exprIsObject1 : Object, Symbol(exprIsObject1,Decl(conditionalOperatorConditionIsBooleanType.ts,7,3))
>exprIsObject2 : Object, Symbol(exprIsObject2,Decl(conditionalOperatorConditionIsBooleanType.ts,13,3))

null === undefined ? exprString1 : exprBoolean1; // union
>null === undefined ? exprString1 : exprBoolean1 : string | boolean
>null === undefined : boolean
>null : null
>undefined : undefined, Symbol(undefined)
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))

//Results shoud be same as Expr1 and Expr2
var resultIsAny1 = condBoolean ? exprAny1 : exprAny2;
>resultIsAny1 : any, Symbol(resultIsAny1,Decl(conditionalOperatorConditionIsBooleanType.ts,40,3))
>condBoolean ? exprAny1 : exprAny2 : any
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprAny1 : any, Symbol(exprAny1,Decl(conditionalOperatorConditionIsBooleanType.ts,3,3))
>exprAny2 : any, Symbol(exprAny2,Decl(conditionalOperatorConditionIsBooleanType.ts,9,3))

var resultIsBoolean1 = condBoolean ? exprBoolean1 : exprBoolean2;
>resultIsBoolean1 : boolean, Symbol(resultIsBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,41,3))
>condBoolean ? exprBoolean1 : exprBoolean2 : boolean
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))
>exprBoolean2 : boolean, Symbol(exprBoolean2,Decl(conditionalOperatorConditionIsBooleanType.ts,10,3))

var resultIsNumber1 = condBoolean ? exprNumber1 : exprNumber2;
>resultIsNumber1 : number, Symbol(resultIsNumber1,Decl(conditionalOperatorConditionIsBooleanType.ts,42,3))
>condBoolean ? exprNumber1 : exprNumber2 : number
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprNumber1 : number, Symbol(exprNumber1,Decl(conditionalOperatorConditionIsBooleanType.ts,5,3))
>exprNumber2 : number, Symbol(exprNumber2,Decl(conditionalOperatorConditionIsBooleanType.ts,11,3))

var resultIsString1 = condBoolean ? exprString1 : exprString2;
>resultIsString1 : string, Symbol(resultIsString1,Decl(conditionalOperatorConditionIsBooleanType.ts,43,3))
>condBoolean ? exprString1 : exprString2 : string
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprString2 : string, Symbol(exprString2,Decl(conditionalOperatorConditionIsBooleanType.ts,12,3))

var resultIsObject1 = condBoolean ? exprIsObject1 : exprIsObject2;
>resultIsObject1 : Object, Symbol(resultIsObject1,Decl(conditionalOperatorConditionIsBooleanType.ts,44,3))
>condBoolean ? exprIsObject1 : exprIsObject2 : Object
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprIsObject1 : Object, Symbol(exprIsObject1,Decl(conditionalOperatorConditionIsBooleanType.ts,7,3))
>exprIsObject2 : Object, Symbol(exprIsObject2,Decl(conditionalOperatorConditionIsBooleanType.ts,13,3))

var resultIsStringOrBoolean1 = condBoolean ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean1 : string | boolean, Symbol(resultIsStringOrBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,45,3))
>condBoolean ? exprString1 : exprBoolean1 : string | boolean
>condBoolean : boolean, Symbol(condBoolean,Decl(conditionalOperatorConditionIsBooleanType.ts,1,3))
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))

var resultIsAny2 = true ? exprAny1 : exprAny2;
>resultIsAny2 : any, Symbol(resultIsAny2,Decl(conditionalOperatorConditionIsBooleanType.ts,47,3))
>true ? exprAny1 : exprAny2 : any
>true : boolean
>exprAny1 : any, Symbol(exprAny1,Decl(conditionalOperatorConditionIsBooleanType.ts,3,3))
>exprAny2 : any, Symbol(exprAny2,Decl(conditionalOperatorConditionIsBooleanType.ts,9,3))

var resultIsBoolean2 = false ? exprBoolean1 : exprBoolean2;
>resultIsBoolean2 : boolean, Symbol(resultIsBoolean2,Decl(conditionalOperatorConditionIsBooleanType.ts,48,3))
>false ? exprBoolean1 : exprBoolean2 : boolean
>false : boolean
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))
>exprBoolean2 : boolean, Symbol(exprBoolean2,Decl(conditionalOperatorConditionIsBooleanType.ts,10,3))

var resultIsNumber2 = true ? exprNumber1 : exprNumber2;
>resultIsNumber2 : number, Symbol(resultIsNumber2,Decl(conditionalOperatorConditionIsBooleanType.ts,49,3))
>true ? exprNumber1 : exprNumber2 : number
>true : boolean
>exprNumber1 : number, Symbol(exprNumber1,Decl(conditionalOperatorConditionIsBooleanType.ts,5,3))
>exprNumber2 : number, Symbol(exprNumber2,Decl(conditionalOperatorConditionIsBooleanType.ts,11,3))

var resultIsString2 = false ? exprString1 : exprString2;
>resultIsString2 : string, Symbol(resultIsString2,Decl(conditionalOperatorConditionIsBooleanType.ts,50,3))
>false ? exprString1 : exprString2 : string
>false : boolean
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprString2 : string, Symbol(exprString2,Decl(conditionalOperatorConditionIsBooleanType.ts,12,3))

var resultIsObject2 = true ? exprIsObject1 : exprIsObject2;
>resultIsObject2 : Object, Symbol(resultIsObject2,Decl(conditionalOperatorConditionIsBooleanType.ts,51,3))
>true ? exprIsObject1 : exprIsObject2 : Object
>true : boolean
>exprIsObject1 : Object, Symbol(exprIsObject1,Decl(conditionalOperatorConditionIsBooleanType.ts,7,3))
>exprIsObject2 : Object, Symbol(exprIsObject2,Decl(conditionalOperatorConditionIsBooleanType.ts,13,3))

var resultIsStringOrBoolean2 = true ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean2 : string | boolean, Symbol(resultIsStringOrBoolean2,Decl(conditionalOperatorConditionIsBooleanType.ts,52,3))
>true ? exprString1 : exprBoolean1 : string | boolean
>true : boolean
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))

var resultIsStringOrBoolean3 = false ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean3 : string | boolean, Symbol(resultIsStringOrBoolean3,Decl(conditionalOperatorConditionIsBooleanType.ts,53,3))
>false ? exprString1 : exprBoolean1 : string | boolean
>false : boolean
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))

var resultIsAny3 = !true ? exprAny1 : exprAny2;
>resultIsAny3 : any, Symbol(resultIsAny3,Decl(conditionalOperatorConditionIsBooleanType.ts,55,3))
>!true ? exprAny1 : exprAny2 : any
>!true : boolean
>true : boolean
>exprAny1 : any, Symbol(exprAny1,Decl(conditionalOperatorConditionIsBooleanType.ts,3,3))
>exprAny2 : any, Symbol(exprAny2,Decl(conditionalOperatorConditionIsBooleanType.ts,9,3))

var resultIsBoolean3 = typeof "123" == "string" ? exprBoolean1 : exprBoolean2;
>resultIsBoolean3 : boolean, Symbol(resultIsBoolean3,Decl(conditionalOperatorConditionIsBooleanType.ts,56,3))
>typeof "123" == "string" ? exprBoolean1 : exprBoolean2 : boolean
>typeof "123" == "string" : boolean
>typeof "123" : string
>"123" : string
>"string" : string
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))
>exprBoolean2 : boolean, Symbol(exprBoolean2,Decl(conditionalOperatorConditionIsBooleanType.ts,10,3))

var resultIsNumber3 = 2 > 1 ? exprNumber1 : exprNumber2;
>resultIsNumber3 : number, Symbol(resultIsNumber3,Decl(conditionalOperatorConditionIsBooleanType.ts,57,3))
>2 > 1 ? exprNumber1 : exprNumber2 : number
>2 > 1 : boolean
>2 : number
>1 : number
>exprNumber1 : number, Symbol(exprNumber1,Decl(conditionalOperatorConditionIsBooleanType.ts,5,3))
>exprNumber2 : number, Symbol(exprNumber2,Decl(conditionalOperatorConditionIsBooleanType.ts,11,3))

var resultIsString3 = null === undefined ? exprString1 : exprString2;
>resultIsString3 : string, Symbol(resultIsString3,Decl(conditionalOperatorConditionIsBooleanType.ts,58,3))
>null === undefined ? exprString1 : exprString2 : string
>null === undefined : boolean
>null : null
>undefined : undefined, Symbol(undefined)
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprString2 : string, Symbol(exprString2,Decl(conditionalOperatorConditionIsBooleanType.ts,12,3))

var resultIsObject3 = true || false ? exprIsObject1 : exprIsObject2;
>resultIsObject3 : Object, Symbol(resultIsObject3,Decl(conditionalOperatorConditionIsBooleanType.ts,59,3))
>true || false ? exprIsObject1 : exprIsObject2 : Object
>true || false : boolean
>true : boolean
>false : boolean
>exprIsObject1 : Object, Symbol(exprIsObject1,Decl(conditionalOperatorConditionIsBooleanType.ts,7,3))
>exprIsObject2 : Object, Symbol(exprIsObject2,Decl(conditionalOperatorConditionIsBooleanType.ts,13,3))

var resultIsStringOrBoolean4 = typeof "123" === "string" ? exprString1 : exprBoolean1; // union
>resultIsStringOrBoolean4 : string | boolean, Symbol(resultIsStringOrBoolean4,Decl(conditionalOperatorConditionIsBooleanType.ts,60,3))
>typeof "123" === "string" ? exprString1 : exprBoolean1 : string | boolean
>typeof "123" === "string" : boolean
>typeof "123" : string
>"123" : string
>"string" : string
>exprString1 : string, Symbol(exprString1,Decl(conditionalOperatorConditionIsBooleanType.ts,6,3))
>exprBoolean1 : boolean, Symbol(exprBoolean1,Decl(conditionalOperatorConditionIsBooleanType.ts,4,3))

