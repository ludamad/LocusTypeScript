=== tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedAndNonExportedInterfacesOfTheSameName.ts ===
module A {
>A : A

    export interface Point {
>Point : Point

        x: number;
>x : number

        y: number;
>y : number

        toCarth(): Point;
>toCarth : () => Point
>Point : Point
    }
}

module A {
>A : A

    interface Point {
>Point : Point

        fromCarth(): Point;
>fromCarth : () => Point
>Point : Point
    }
}

// ensure merges as expected
var p: { x: number; y: number; toCarth(): A.Point; };
>p : { x: number; y: number; toCarth(): A.Point; }
>x : number
>y : number
>toCarth : () => A.Point
>A : A
>Point : A.Point

var p: A.Point;
>p : { x: number; y: number; toCarth(): A.Point; }
>A : A
>Point : A.Point

module X.Y.Z {
>X : X
>Y : Y
>Z : Z

    export interface Line {
>Line : Line

        new (start: A.Point, end: A.Point);
>start : A.Point
>A : A
>Point : A.Point
>end : A.Point
>A : A
>Point : A.Point
    }
}

module X {
>X : X

    export module Y.Z {
>Y : Y
>Z : Z

        interface Line {
>Line : Line

            start: A.Point;
>start : A.Point
>A : A
>Point : A.Point

            end: A.Point;
>end : A.Point
>A : A
>Point : A.Point
        }
    }
}

// ensure merges as expected
var l: { new (s: A.Point, e: A.Point); }
>l : new (s: A.Point, e: A.Point) => any
>s : A.Point
>A : A
>Point : A.Point
>e : A.Point
>A : A
>Point : A.Point

var l: X.Y.Z.Line;
>l : new (s: A.Point, e: A.Point) => any
>X : X
>Y : X.Y
>Z : X.Y.Z
>Line : X.Y.Z.Line

