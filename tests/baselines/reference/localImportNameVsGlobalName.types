=== tests/cases/compiler/localImportNameVsGlobalName.ts ===
module Keyboard {
>Keyboard : typeof Keyboard, Symbol(Keyboard, Decl(localImportNameVsGlobalName.ts, 0, 0))

  export enum Key { UP, DOWN, LEFT, RIGHT }
>Key : Key, Symbol(Key, Decl(localImportNameVsGlobalName.ts, 0, 17))
>UP : Key, Symbol(Key.UP, Decl(localImportNameVsGlobalName.ts, 1, 19))
>DOWN : Key, Symbol(Key.DOWN, Decl(localImportNameVsGlobalName.ts, 1, 23))
>LEFT : Key, Symbol(Key.LEFT, Decl(localImportNameVsGlobalName.ts, 1, 29))
>RIGHT : Key, Symbol(Key.RIGHT, Decl(localImportNameVsGlobalName.ts, 1, 35))
}

module App {
>App : typeof App, Symbol(App, Decl(localImportNameVsGlobalName.ts, 2, 1))

  import Key = Keyboard.Key;
>Key : typeof Key, Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 12))
>Keyboard : typeof Keyboard, Symbol(Keyboard, Decl(localImportNameVsGlobalName.ts, 0, 0))
>Key : Key, Symbol(Key, Decl(localImportNameVsGlobalName.ts, 0, 17))

  export function foo(key: Key): void {}
>foo : (key: Key) => void, Symbol(foo, Decl(localImportNameVsGlobalName.ts, 5, 28))
>key : Key, Symbol(key, Decl(localImportNameVsGlobalName.ts, 7, 22))
>Key : Key, Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 12))

  foo(Key.UP);
>foo(Key.UP) : void
>foo : (key: Key) => void, Symbol(foo, Decl(localImportNameVsGlobalName.ts, 5, 28))
>Key.UP : Key, Symbol(Key.UP, Decl(localImportNameVsGlobalName.ts, 1, 19))
>Key : typeof Key, Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 12))
>UP : Key, Symbol(Key.UP, Decl(localImportNameVsGlobalName.ts, 1, 19))

  foo(Key.DOWN);
>foo(Key.DOWN) : void
>foo : (key: Key) => void, Symbol(foo, Decl(localImportNameVsGlobalName.ts, 5, 28))
>Key.DOWN : Key, Symbol(Key.DOWN, Decl(localImportNameVsGlobalName.ts, 1, 23))
>Key : typeof Key, Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 12))
>DOWN : Key, Symbol(Key.DOWN, Decl(localImportNameVsGlobalName.ts, 1, 23))

  foo(Key.LEFT);
>foo(Key.LEFT) : void
>foo : (key: Key) => void, Symbol(foo, Decl(localImportNameVsGlobalName.ts, 5, 28))
>Key.LEFT : Key, Symbol(Key.LEFT, Decl(localImportNameVsGlobalName.ts, 1, 29))
>Key : typeof Key, Symbol(Key, Decl(localImportNameVsGlobalName.ts, 4, 12))
>LEFT : Key, Symbol(Key.LEFT, Decl(localImportNameVsGlobalName.ts, 1, 29))
}
