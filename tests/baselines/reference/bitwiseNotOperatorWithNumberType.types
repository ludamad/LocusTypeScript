=== tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithNumberType.ts ===
// ~ operator on number type
var NUMBER: number;
>NUMBER : number, Symbol(NUMBER,Decl(bitwiseNotOperatorWithNumberType.ts,1,3))

var NUMBER1: number[] = [1, 2];
>NUMBER1 : number[], Symbol(NUMBER1,Decl(bitwiseNotOperatorWithNumberType.ts,2,3))
>[1, 2] : number[]
>1 : number
>2 : number

function foo(): number { return 1; }
>foo : () => number, Symbol(foo,Decl(bitwiseNotOperatorWithNumberType.ts,2,31))
>1 : number

class A {
>A : A, Symbol(A,Decl(bitwiseNotOperatorWithNumberType.ts,4,36))

    public a: number;
>a : number, Symbol(a,Decl(bitwiseNotOperatorWithNumberType.ts,6,9))

    static foo() { return 1; }
>foo : () => number, Symbol(A.foo,Decl(bitwiseNotOperatorWithNumberType.ts,7,21))
>1 : number
}
module M {
>M : typeof M, Symbol(M,Decl(bitwiseNotOperatorWithNumberType.ts,9,1))

    export var n: number;
>n : number, Symbol(n,Decl(bitwiseNotOperatorWithNumberType.ts,11,14))
}

var objA = new A();
>objA : A, Symbol(objA,Decl(bitwiseNotOperatorWithNumberType.ts,14,3))
>new A() : A
>A : typeof A, Symbol(A,Decl(bitwiseNotOperatorWithNumberType.ts,4,36))

// number type var
var ResultIsNumber1 = ~NUMBER;
>ResultIsNumber1 : number, Symbol(ResultIsNumber1,Decl(bitwiseNotOperatorWithNumberType.ts,17,3))
>~NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(bitwiseNotOperatorWithNumberType.ts,1,3))

var ResultIsNumber2 = ~NUMBER1;
>ResultIsNumber2 : number, Symbol(ResultIsNumber2,Decl(bitwiseNotOperatorWithNumberType.ts,18,3))
>~NUMBER1 : number
>NUMBER1 : number[], Symbol(NUMBER1,Decl(bitwiseNotOperatorWithNumberType.ts,2,3))

// number type literal
var ResultIsNumber3 = ~1;
>ResultIsNumber3 : number, Symbol(ResultIsNumber3,Decl(bitwiseNotOperatorWithNumberType.ts,21,3))
>~1 : number
>1 : number

var ResultIsNumber4 = ~{ x: 1, y: 2};
>ResultIsNumber4 : number, Symbol(ResultIsNumber4,Decl(bitwiseNotOperatorWithNumberType.ts,22,3))
>~{ x: 1, y: 2} : number
>{ x: 1, y: 2} : { x: number; y: number; }
>x : number, Symbol(x,Decl(bitwiseNotOperatorWithNumberType.ts,22,24))
>1 : number
>y : number, Symbol(y,Decl(bitwiseNotOperatorWithNumberType.ts,22,30))
>2 : number

var ResultIsNumber5 = ~{ x: 1, y: (n: number) => { return n; } };
>ResultIsNumber5 : number, Symbol(ResultIsNumber5,Decl(bitwiseNotOperatorWithNumberType.ts,23,3))
>~{ x: 1, y: (n: number) => { return n; } } : number
>{ x: 1, y: (n: number) => { return n; } } : { x: number; y: (n: number) => number; }
>x : number, Symbol(x,Decl(bitwiseNotOperatorWithNumberType.ts,23,24))
>1 : number
>y : (n: number) => number, Symbol(y,Decl(bitwiseNotOperatorWithNumberType.ts,23,30))
>(n: number) => { return n; } : (n: number) => number
>n : number, Symbol(n,Decl(bitwiseNotOperatorWithNumberType.ts,23,35))
>n : number, Symbol(n,Decl(bitwiseNotOperatorWithNumberType.ts,23,35))

// number type expressions
var ResultIsNumber6 = ~objA.a;
>ResultIsNumber6 : number, Symbol(ResultIsNumber6,Decl(bitwiseNotOperatorWithNumberType.ts,26,3))
>~objA.a : number
>objA.a : number, Symbol(A.a,Decl(bitwiseNotOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(bitwiseNotOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(bitwiseNotOperatorWithNumberType.ts,6,9))

var ResultIsNumber7 = ~M.n;
>ResultIsNumber7 : number, Symbol(ResultIsNumber7,Decl(bitwiseNotOperatorWithNumberType.ts,27,3))
>~M.n : number
>M.n : number, Symbol(M.n,Decl(bitwiseNotOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(bitwiseNotOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(bitwiseNotOperatorWithNumberType.ts,11,14))

var ResultIsNumber8 = ~NUMBER1[0];
>ResultIsNumber8 : number, Symbol(ResultIsNumber8,Decl(bitwiseNotOperatorWithNumberType.ts,28,3))
>~NUMBER1[0] : number
>NUMBER1[0] : number
>NUMBER1 : number[], Symbol(NUMBER1,Decl(bitwiseNotOperatorWithNumberType.ts,2,3))
>0 : number

var ResultIsNumber9 = ~foo();
>ResultIsNumber9 : number, Symbol(ResultIsNumber9,Decl(bitwiseNotOperatorWithNumberType.ts,29,3))
>~foo() : number
>foo() : number
>foo : () => number, Symbol(foo,Decl(bitwiseNotOperatorWithNumberType.ts,2,31))

var ResultIsNumber10 = ~A.foo();
>ResultIsNumber10 : number, Symbol(ResultIsNumber10,Decl(bitwiseNotOperatorWithNumberType.ts,30,3))
>~A.foo() : number
>A.foo() : number
>A.foo : () => number, Symbol(A.foo,Decl(bitwiseNotOperatorWithNumberType.ts,7,21))
>A : typeof A, Symbol(A,Decl(bitwiseNotOperatorWithNumberType.ts,4,36))
>foo : () => number, Symbol(A.foo,Decl(bitwiseNotOperatorWithNumberType.ts,7,21))

var ResultIsNumber11 = ~(NUMBER + NUMBER);
>ResultIsNumber11 : number, Symbol(ResultIsNumber11,Decl(bitwiseNotOperatorWithNumberType.ts,31,3))
>~(NUMBER + NUMBER) : number
>(NUMBER + NUMBER) : number
>NUMBER + NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(bitwiseNotOperatorWithNumberType.ts,1,3))
>NUMBER : number, Symbol(NUMBER,Decl(bitwiseNotOperatorWithNumberType.ts,1,3))

// multiple ~ operators
var ResultIsNumber12 = ~~NUMBER;
>ResultIsNumber12 : number, Symbol(ResultIsNumber12,Decl(bitwiseNotOperatorWithNumberType.ts,34,3))
>~~NUMBER : number
>~NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(bitwiseNotOperatorWithNumberType.ts,1,3))

var ResultIsNumber13 = ~~~(NUMBER + NUMBER);
>ResultIsNumber13 : number, Symbol(ResultIsNumber13,Decl(bitwiseNotOperatorWithNumberType.ts,35,3))
>~~~(NUMBER + NUMBER) : number
>~~(NUMBER + NUMBER) : number
>~(NUMBER + NUMBER) : number
>(NUMBER + NUMBER) : number
>NUMBER + NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(bitwiseNotOperatorWithNumberType.ts,1,3))
>NUMBER : number, Symbol(NUMBER,Decl(bitwiseNotOperatorWithNumberType.ts,1,3))

// miss assignment operators
~NUMBER;
>~NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(bitwiseNotOperatorWithNumberType.ts,1,3))

~NUMBER1;
>~NUMBER1 : number
>NUMBER1 : number[], Symbol(NUMBER1,Decl(bitwiseNotOperatorWithNumberType.ts,2,3))

~foo();
>~foo() : number
>foo() : number
>foo : () => number, Symbol(foo,Decl(bitwiseNotOperatorWithNumberType.ts,2,31))

~objA.a;
>~objA.a : number
>objA.a : number, Symbol(A.a,Decl(bitwiseNotOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(bitwiseNotOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(bitwiseNotOperatorWithNumberType.ts,6,9))

~M.n;
>~M.n : number
>M.n : number, Symbol(M.n,Decl(bitwiseNotOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(bitwiseNotOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(bitwiseNotOperatorWithNumberType.ts,11,14))

~objA.a, M.n;
>~objA.a, M.n : number
>~objA.a : number
>objA.a : number, Symbol(A.a,Decl(bitwiseNotOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(bitwiseNotOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(bitwiseNotOperatorWithNumberType.ts,6,9))
>M.n : number, Symbol(M.n,Decl(bitwiseNotOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(bitwiseNotOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(bitwiseNotOperatorWithNumberType.ts,11,14))

