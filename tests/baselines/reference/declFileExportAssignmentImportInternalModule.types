=== tests/cases/compiler/declFileExportAssignmentImportInternalModule.ts ===
module m3 {
>m3 : typeof m3, Symbol(m3,Decl(declFileExportAssignmentImportInternalModule.ts,0,0))

    export module m2 {
>m2 : any, Symbol(m2,Decl(declFileExportAssignmentImportInternalModule.ts,0,11))

        export interface connectModule {
>connectModule : connectModule, Symbol(connectModule,Decl(declFileExportAssignmentImportInternalModule.ts,1,22))

            (res, req, next): void;
>res : any, Symbol(res,Decl(declFileExportAssignmentImportInternalModule.ts,3,13))
>req : any, Symbol(req,Decl(declFileExportAssignmentImportInternalModule.ts,3,17))
>next : any, Symbol(next,Decl(declFileExportAssignmentImportInternalModule.ts,3,22))
        }
        export interface connectExport {
>connectExport : connectExport, Symbol(connectExport,Decl(declFileExportAssignmentImportInternalModule.ts,4,9))

            use: (mod: connectModule) => connectExport;
>use : (mod: connectModule) => connectExport, Symbol(use,Decl(declFileExportAssignmentImportInternalModule.ts,5,40))
>mod : connectModule, Symbol(mod,Decl(declFileExportAssignmentImportInternalModule.ts,6,18))
>connectModule : connectModule, Symbol(connectModule,Decl(declFileExportAssignmentImportInternalModule.ts,1,22))
>connectExport : connectExport, Symbol(connectExport,Decl(declFileExportAssignmentImportInternalModule.ts,4,9))

            listen: (port: number) => void;
>listen : (port: number) => void, Symbol(listen,Decl(declFileExportAssignmentImportInternalModule.ts,6,55))
>port : number, Symbol(port,Decl(declFileExportAssignmentImportInternalModule.ts,7,21))
        }

    }

    export var server: {
>server : { (): m2.connectExport; test1: m2.connectModule; test2(): m2.connectModule; }, Symbol(server,Decl(declFileExportAssignmentImportInternalModule.ts,12,14))

        (): m2.connectExport;
>m2 : any, Symbol(m2,Decl(declFileExportAssignmentImportInternalModule.ts,0,11))
>connectExport : m2.connectExport, Symbol(m2.connectExport,Decl(declFileExportAssignmentImportInternalModule.ts,4,9))

        test1: m2.connectModule;
>test1 : m2.connectModule, Symbol(test1,Decl(declFileExportAssignmentImportInternalModule.ts,13,29))
>m2 : any, Symbol(m2,Decl(declFileExportAssignmentImportInternalModule.ts,0,11))
>connectModule : m2.connectModule, Symbol(m2.connectModule,Decl(declFileExportAssignmentImportInternalModule.ts,1,22))

        test2(): m2.connectModule;
>test2 : () => m2.connectModule, Symbol(test2,Decl(declFileExportAssignmentImportInternalModule.ts,14,32))
>m2 : any, Symbol(m2,Decl(declFileExportAssignmentImportInternalModule.ts,0,11))
>connectModule : m2.connectModule, Symbol(m2.connectModule,Decl(declFileExportAssignmentImportInternalModule.ts,1,22))

    };
}

import m = m3
>m : typeof m3, Symbol(m,Decl(declFileExportAssignmentImportInternalModule.ts,17,1))
>m3 : typeof m3, Symbol(m3,Decl(declFileExportAssignmentImportInternalModule.ts,0,0))

export = m;
>m : typeof m3, Symbol(m,Decl(declFileExportAssignmentImportInternalModule.ts,17,1))

