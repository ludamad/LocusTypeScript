=== tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandNumberType.ts ===
var ANY: any;
>ANY : any, Symbol(ANY,Decl(commaOperatorWithSecondOperandNumberType.ts,0,3))

var BOOLEAN: boolean;
>BOOLEAN : boolean, Symbol(BOOLEAN,Decl(commaOperatorWithSecondOperandNumberType.ts,1,3))

var NUMBER: number;
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

var STRING: string;
>STRING : string, Symbol(STRING,Decl(commaOperatorWithSecondOperandNumberType.ts,3,3))

var OBJECT: Object;
>OBJECT : Object, Symbol(OBJECT,Decl(commaOperatorWithSecondOperandNumberType.ts,4,3))
>Object : Object, Symbol(Object,Decl(lib.d.ts,92,1),Decl(lib.d.ts,223,11))

//The second operand type is number
ANY, NUMBER;
>ANY, NUMBER : number
>ANY : any, Symbol(ANY,Decl(commaOperatorWithSecondOperandNumberType.ts,0,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

BOOLEAN, NUMBER;
>BOOLEAN, NUMBER : number
>BOOLEAN : boolean, Symbol(BOOLEAN,Decl(commaOperatorWithSecondOperandNumberType.ts,1,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

NUMBER, NUMBER;
>NUMBER, NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

STRING, NUMBER;
>STRING, NUMBER : number
>STRING : string, Symbol(STRING,Decl(commaOperatorWithSecondOperandNumberType.ts,3,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

OBJECT, NUMBER;
>OBJECT, NUMBER : number
>OBJECT : Object, Symbol(OBJECT,Decl(commaOperatorWithSecondOperandNumberType.ts,4,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

//Return type is number
var resultIsNumber1 = (ANY, NUMBER);
>resultIsNumber1 : number, Symbol(resultIsNumber1,Decl(commaOperatorWithSecondOperandNumberType.ts,14,3))
>(ANY, NUMBER) : number
>ANY, NUMBER : number
>ANY : any, Symbol(ANY,Decl(commaOperatorWithSecondOperandNumberType.ts,0,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

var resultIsNumber2 = (BOOLEAN, NUMBER);
>resultIsNumber2 : number, Symbol(resultIsNumber2,Decl(commaOperatorWithSecondOperandNumberType.ts,15,3))
>(BOOLEAN, NUMBER) : number
>BOOLEAN, NUMBER : number
>BOOLEAN : boolean, Symbol(BOOLEAN,Decl(commaOperatorWithSecondOperandNumberType.ts,1,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

var resultIsNumber3 = (NUMBER, NUMBER);
>resultIsNumber3 : number, Symbol(resultIsNumber3,Decl(commaOperatorWithSecondOperandNumberType.ts,16,3))
>(NUMBER, NUMBER) : number
>NUMBER, NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

var resultIsNumber4 = (STRING, NUMBER);
>resultIsNumber4 : number, Symbol(resultIsNumber4,Decl(commaOperatorWithSecondOperandNumberType.ts,17,3))
>(STRING, NUMBER) : number
>STRING, NUMBER : number
>STRING : string, Symbol(STRING,Decl(commaOperatorWithSecondOperandNumberType.ts,3,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

var resultIsNumber5 = (OBJECT, NUMBER);
>resultIsNumber5 : number, Symbol(resultIsNumber5,Decl(commaOperatorWithSecondOperandNumberType.ts,18,3))
>(OBJECT, NUMBER) : number
>OBJECT, NUMBER : number
>OBJECT : Object, Symbol(OBJECT,Decl(commaOperatorWithSecondOperandNumberType.ts,4,3))
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

//Literal and expression
null, NUMBER;
>null, NUMBER : number
>null : null
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

ANY = undefined, NUMBER;
>ANY = undefined, NUMBER : number
>ANY = undefined : undefined
>ANY : any, Symbol(ANY,Decl(commaOperatorWithSecondOperandNumberType.ts,0,3))
>undefined : undefined, Symbol(undefined)
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

true, 1;
>true, 1 : number
>true : boolean
>1 : number

BOOLEAN = false, 1;
>BOOLEAN = false, 1 : number
>BOOLEAN = false : boolean
>BOOLEAN : boolean, Symbol(BOOLEAN,Decl(commaOperatorWithSecondOperandNumberType.ts,1,3))
>false : boolean
>1 : number

"", NUMBER = 1;
>"", NUMBER = 1 : number
>"" : string
>NUMBER = 1 : number
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))
>1 : number

STRING.trim(), NUMBER = 1;
>STRING.trim(), NUMBER = 1 : number
>STRING.trim() : string
>STRING.trim : () => string, Symbol(String.trim,Decl(lib.d.ts,411,32))
>STRING : string, Symbol(STRING,Decl(commaOperatorWithSecondOperandNumberType.ts,3,3))
>trim : () => string, Symbol(String.trim,Decl(lib.d.ts,411,32))
>NUMBER = 1 : number
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))
>1 : number

var resultIsNumber6 = (null, NUMBER);
>resultIsNumber6 : number, Symbol(resultIsNumber6,Decl(commaOperatorWithSecondOperandNumberType.ts,28,3))
>(null, NUMBER) : number
>null, NUMBER : number
>null : null
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

var resultIsNumber7 = (ANY = undefined, NUMBER);
>resultIsNumber7 : number, Symbol(resultIsNumber7,Decl(commaOperatorWithSecondOperandNumberType.ts,29,3))
>(ANY = undefined, NUMBER) : number
>ANY = undefined, NUMBER : number
>ANY = undefined : undefined
>ANY : any, Symbol(ANY,Decl(commaOperatorWithSecondOperandNumberType.ts,0,3))
>undefined : undefined, Symbol(undefined)
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))

var resultIsNumber8 = (true, 1);
>resultIsNumber8 : number, Symbol(resultIsNumber8,Decl(commaOperatorWithSecondOperandNumberType.ts,30,3))
>(true, 1) : number
>true, 1 : number
>true : boolean
>1 : number

var resultIsNumber9 = (BOOLEAN = false, 1);
>resultIsNumber9 : number, Symbol(resultIsNumber9,Decl(commaOperatorWithSecondOperandNumberType.ts,31,3))
>(BOOLEAN = false, 1) : number
>BOOLEAN = false, 1 : number
>BOOLEAN = false : boolean
>BOOLEAN : boolean, Symbol(BOOLEAN,Decl(commaOperatorWithSecondOperandNumberType.ts,1,3))
>false : boolean
>1 : number

var resultIsNumber10 = ("", NUMBER = 1);
>resultIsNumber10 : number, Symbol(resultIsNumber10,Decl(commaOperatorWithSecondOperandNumberType.ts,32,3))
>("", NUMBER = 1) : number
>"", NUMBER = 1 : number
>"" : string
>NUMBER = 1 : number
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))
>1 : number

var resultIsNumber11 = (STRING.trim(), NUMBER = 1);
>resultIsNumber11 : number, Symbol(resultIsNumber11,Decl(commaOperatorWithSecondOperandNumberType.ts,33,3))
>(STRING.trim(), NUMBER = 1) : number
>STRING.trim(), NUMBER = 1 : number
>STRING.trim() : string
>STRING.trim : () => string, Symbol(String.trim,Decl(lib.d.ts,411,32))
>STRING : string, Symbol(STRING,Decl(commaOperatorWithSecondOperandNumberType.ts,3,3))
>trim : () => string, Symbol(String.trim,Decl(lib.d.ts,411,32))
>NUMBER = 1 : number
>NUMBER : number, Symbol(NUMBER,Decl(commaOperatorWithSecondOperandNumberType.ts,2,3))
>1 : number

