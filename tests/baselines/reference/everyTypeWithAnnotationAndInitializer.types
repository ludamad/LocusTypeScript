=== tests/cases/conformance/statements/VariableStatements/everyTypeWithAnnotationAndInitializer.ts ===
interface I {
>I : I, Symbol(I,Decl(everyTypeWithAnnotationAndInitializer.ts,0,0))

    id: number;
>id : number, Symbol(id,Decl(everyTypeWithAnnotationAndInitializer.ts,0,13))
}

class C implements I {
>C : C, Symbol(C,Decl(everyTypeWithAnnotationAndInitializer.ts,2,1))
>I : I, Symbol(I,Decl(everyTypeWithAnnotationAndInitializer.ts,0,0))

    id: number;
>id : number, Symbol(id,Decl(everyTypeWithAnnotationAndInitializer.ts,4,22))
}

class D<T>{
>D : D<T>, Symbol(D,Decl(everyTypeWithAnnotationAndInitializer.ts,6,1))
>T : T, Symbol(T,Decl(everyTypeWithAnnotationAndInitializer.ts,8,8))

    source: T;
>source : T, Symbol(source,Decl(everyTypeWithAnnotationAndInitializer.ts,8,11))
>T : T, Symbol(T,Decl(everyTypeWithAnnotationAndInitializer.ts,8,8))

    recurse: D<T>;
>recurse : D<T>, Symbol(recurse,Decl(everyTypeWithAnnotationAndInitializer.ts,9,14))
>D : D<T>, Symbol(D,Decl(everyTypeWithAnnotationAndInitializer.ts,6,1))
>T : T, Symbol(T,Decl(everyTypeWithAnnotationAndInitializer.ts,8,8))

    wrapped: D<D<T>>
>wrapped : D<D<T>>, Symbol(wrapped,Decl(everyTypeWithAnnotationAndInitializer.ts,10,18))
>D : D<T>, Symbol(D,Decl(everyTypeWithAnnotationAndInitializer.ts,6,1))
>D : D<T>, Symbol(D,Decl(everyTypeWithAnnotationAndInitializer.ts,6,1))
>T : T, Symbol(T,Decl(everyTypeWithAnnotationAndInitializer.ts,8,8))
}

function F(x: string): number { return 42; }
>F : (x: string) => number, Symbol(F,Decl(everyTypeWithAnnotationAndInitializer.ts,12,1))
>x : string, Symbol(x,Decl(everyTypeWithAnnotationAndInitializer.ts,14,11))
>42 : number

module M {
>M : typeof M, Symbol(M,Decl(everyTypeWithAnnotationAndInitializer.ts,14,44))

    export class A {
>A : A, Symbol(A,Decl(everyTypeWithAnnotationAndInitializer.ts,16,10))

        name: string;
>name : string, Symbol(name,Decl(everyTypeWithAnnotationAndInitializer.ts,17,20))
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : (x: number) => string, Symbol(F2,Decl(everyTypeWithAnnotationAndInitializer.ts,19,5))
>x : number, Symbol(x,Decl(everyTypeWithAnnotationAndInitializer.ts,21,23))
>x.toString() : string
>x.toString : (radix?: number) => string, Symbol(Number.toString,Decl(lib.d.ts,458,18))
>x : number, Symbol(x,Decl(everyTypeWithAnnotationAndInitializer.ts,21,23))
>toString : (radix?: number) => string, Symbol(Number.toString,Decl(lib.d.ts,458,18))
}

var aNumber: number = 9.9;
>aNumber : number, Symbol(aNumber,Decl(everyTypeWithAnnotationAndInitializer.ts,24,3))
>9.9 : number

var aString: string = 'this is a string';
>aString : string, Symbol(aString,Decl(everyTypeWithAnnotationAndInitializer.ts,25,3))
>'this is a string' : string

var aDate: Date = new Date(12);
>aDate : Date, Symbol(aDate,Decl(everyTypeWithAnnotationAndInitializer.ts,26,3))
>Date : Date, Symbol(Date,Decl(lib.d.ts,633,23),Decl(lib.d.ts,815,11))
>new Date(12) : Date
>Date : DateConstructor, Symbol(Date,Decl(lib.d.ts,633,23),Decl(lib.d.ts,815,11))
>12 : number

var anObject: Object = new Object();
>anObject : Object, Symbol(anObject,Decl(everyTypeWithAnnotationAndInitializer.ts,27,3))
>Object : Object, Symbol(Object,Decl(lib.d.ts,92,1),Decl(lib.d.ts,223,11))
>new Object() : Object
>Object : ObjectConstructor, Symbol(Object,Decl(lib.d.ts,92,1),Decl(lib.d.ts,223,11))

var anAny: any = null;
>anAny : any, Symbol(anAny,Decl(everyTypeWithAnnotationAndInitializer.ts,29,3))
>null : null

var aSecondAny: any = undefined;
>aSecondAny : any, Symbol(aSecondAny,Decl(everyTypeWithAnnotationAndInitializer.ts,30,3))
>undefined : undefined, Symbol(undefined)

var aVoid: void = undefined;
>aVoid : void, Symbol(aVoid,Decl(everyTypeWithAnnotationAndInitializer.ts,31,3))
>undefined : undefined, Symbol(undefined)

var anInterface: I = new C();
>anInterface : I, Symbol(anInterface,Decl(everyTypeWithAnnotationAndInitializer.ts,33,3))
>I : I, Symbol(I,Decl(everyTypeWithAnnotationAndInitializer.ts,0,0))
>new C() : C
>C : typeof C, Symbol(C,Decl(everyTypeWithAnnotationAndInitializer.ts,2,1))

var aClass: C = new C();
>aClass : C, Symbol(aClass,Decl(everyTypeWithAnnotationAndInitializer.ts,34,3))
>C : C, Symbol(C,Decl(everyTypeWithAnnotationAndInitializer.ts,2,1))
>new C() : C
>C : typeof C, Symbol(C,Decl(everyTypeWithAnnotationAndInitializer.ts,2,1))

var aGenericClass: D<string> = new D<string>();
>aGenericClass : D<string>, Symbol(aGenericClass,Decl(everyTypeWithAnnotationAndInitializer.ts,35,3))
>D : D<T>, Symbol(D,Decl(everyTypeWithAnnotationAndInitializer.ts,6,1))
>new D<string>() : D<string>
>D : typeof D, Symbol(D,Decl(everyTypeWithAnnotationAndInitializer.ts,6,1))

var anObjectLiteral: I = { id: 12 };
>anObjectLiteral : I, Symbol(anObjectLiteral,Decl(everyTypeWithAnnotationAndInitializer.ts,36,3))
>I : I, Symbol(I,Decl(everyTypeWithAnnotationAndInitializer.ts,0,0))
>{ id: 12 } : { id: number; }
>id : number, Symbol(id,Decl(everyTypeWithAnnotationAndInitializer.ts,36,26))
>12 : number

var anOtherObjectLiteral: { id: number } = new C();
>anOtherObjectLiteral : { id: number; }, Symbol(anOtherObjectLiteral,Decl(everyTypeWithAnnotationAndInitializer.ts,37,3))
>id : number, Symbol(id,Decl(everyTypeWithAnnotationAndInitializer.ts,37,27))
>new C() : C
>C : typeof C, Symbol(C,Decl(everyTypeWithAnnotationAndInitializer.ts,2,1))

var aFunction: typeof F = F;
>aFunction : (x: string) => number, Symbol(aFunction,Decl(everyTypeWithAnnotationAndInitializer.ts,39,3))
>F : (x: string) => number, Symbol(F,Decl(everyTypeWithAnnotationAndInitializer.ts,12,1))
>F : (x: string) => number, Symbol(F,Decl(everyTypeWithAnnotationAndInitializer.ts,12,1))

var anOtherFunction: (x: string) => number = F;
>anOtherFunction : (x: string) => number, Symbol(anOtherFunction,Decl(everyTypeWithAnnotationAndInitializer.ts,40,3))
>x : string, Symbol(x,Decl(everyTypeWithAnnotationAndInitializer.ts,40,22))
>F : (x: string) => number, Symbol(F,Decl(everyTypeWithAnnotationAndInitializer.ts,12,1))

var aLambda: typeof F = (x) => 2;
>aLambda : (x: string) => number, Symbol(aLambda,Decl(everyTypeWithAnnotationAndInitializer.ts,41,3))
>F : (x: string) => number, Symbol(F,Decl(everyTypeWithAnnotationAndInitializer.ts,12,1))
>(x) => 2 : (x: string) => number
>x : string, Symbol(x,Decl(everyTypeWithAnnotationAndInitializer.ts,41,25))
>2 : number

var aModule: typeof M = M;
>aModule : typeof M, Symbol(aModule,Decl(everyTypeWithAnnotationAndInitializer.ts,43,3))
>M : typeof M, Symbol(M,Decl(everyTypeWithAnnotationAndInitializer.ts,14,44))
>M : typeof M, Symbol(M,Decl(everyTypeWithAnnotationAndInitializer.ts,14,44))

var aClassInModule: M.A = new M.A();
>aClassInModule : M.A, Symbol(aClassInModule,Decl(everyTypeWithAnnotationAndInitializer.ts,44,3))
>M : any, Symbol(M,Decl(everyTypeWithAnnotationAndInitializer.ts,14,44))
>A : M.A, Symbol(M.A,Decl(everyTypeWithAnnotationAndInitializer.ts,16,10))
>new M.A() : M.A
>M.A : typeof M.A, Symbol(M.A,Decl(everyTypeWithAnnotationAndInitializer.ts,16,10))
>M : typeof M, Symbol(M,Decl(everyTypeWithAnnotationAndInitializer.ts,14,44))
>A : typeof M.A, Symbol(M.A,Decl(everyTypeWithAnnotationAndInitializer.ts,16,10))

var aFunctionInModule: typeof M.F2 = (x) => 'this is a string';
>aFunctionInModule : (x: number) => string, Symbol(aFunctionInModule,Decl(everyTypeWithAnnotationAndInitializer.ts,45,3))
>M.F2 : (x: number) => string, Symbol(M.F2,Decl(everyTypeWithAnnotationAndInitializer.ts,19,5))
>M : typeof M, Symbol(M,Decl(everyTypeWithAnnotationAndInitializer.ts,14,44))
>F2 : (x: number) => string, Symbol(M.F2,Decl(everyTypeWithAnnotationAndInitializer.ts,19,5))
>(x) => 'this is a string' : (x: number) => string
>x : number, Symbol(x,Decl(everyTypeWithAnnotationAndInitializer.ts,45,38))
>'this is a string' : string


