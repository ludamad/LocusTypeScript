=== tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesThatDifferOnlyByReturnType.ts ===
// Each pair of signatures in these types has a signature that should cause an error. 
// Overloads, generic or not, that differ only by return type are an error.
interface I {
>I : I, Symbol(I,Decl(callSignaturesThatDifferOnlyByReturnType.ts,0,0))

    (x): number;
>x : any, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,3,5))

    (x): void; // error
>x : any, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,4,5))

    <T>(x: T): number;
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,5,5))
>x : T, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,5,8))
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,5,5))

    <T>(x: T): string; // error
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,6,5))
>x : T, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,6,8))
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,6,5))
}

interface I2 {
>I2 : I2, Symbol(I2,Decl(callSignaturesThatDifferOnlyByReturnType.ts,7,1))

    <T>(x: T): number;
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,10,5))
>x : T, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,10,8))
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,10,5))

    <T>(x: T): string; // error
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,11,5))
>x : T, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,11,8))
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,11,5))
}

interface I3<T> {
>I3 : I3<T>, Symbol(I3,Decl(callSignaturesThatDifferOnlyByReturnType.ts,12,1))
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,14,13))

    (x: T): number;
>x : T, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,15,5))
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,14,13))

    (x: T): string; // error
>x : T, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,16,5))
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,14,13))
}

var a: {
>a : { (x: any, y: any): Object; (x: any, y: any): any; }, Symbol(a,Decl(callSignaturesThatDifferOnlyByReturnType.ts,19,3))

    (x, y): Object;
>x : any, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,20,5))
>y : any, Symbol(y,Decl(callSignaturesThatDifferOnlyByReturnType.ts,20,7))
>Object : Object, Symbol(Object,Decl(lib.d.ts,92,1),Decl(lib.d.ts,223,11))

    (x, y): any; // error
>x : any, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,21,5))
>y : any, Symbol(y,Decl(callSignaturesThatDifferOnlyByReturnType.ts,21,7))
}

var a2: {
>a2 : { <T>(x: T): number; <T>(x: T): string; }, Symbol(a2,Decl(callSignaturesThatDifferOnlyByReturnType.ts,24,3))

    <T>(x: T): number;
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,25,5))
>x : T, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,25,8))
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,25,5))

    <T>(x: T): string; // error
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,26,5))
>x : T, Symbol(x,Decl(callSignaturesThatDifferOnlyByReturnType.ts,26,8))
>T : T, Symbol(T,Decl(callSignaturesThatDifferOnlyByReturnType.ts,26,5))
}
