=== tests/cases/compiler/exportedInterfaceInaccessibleInCallbackInModule.ts ===
export interface ProgressCallback {
>ProgressCallback : ProgressCallback, Symbol(ProgressCallback,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,0,0))

	(progress:any):any;
>progress : any, Symbol(progress,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,1,2))
}	

// --- Generic promise
export declare class TPromise<V> {
>TPromise : TPromise<V>, Symbol(TPromise,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,2,1))
>V : V, Symbol(V,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,5,30))
	
	constructor(init:(complete: (value:V)=>void, error:(err:any)=>void, progress:ProgressCallback)=>void, oncancel?: any);
>init : (complete: (value: V) => void, error: (err: any) => void, progress: ProgressCallback) => void, Symbol(init,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,7,13))
>complete : (value: V) => void, Symbol(complete,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,7,19))
>value : V, Symbol(value,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,7,30))
>V : V, Symbol(V,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,5,30))
>error : (err: any) => void, Symbol(error,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,7,45))
>err : any, Symbol(err,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,7,53))
>progress : ProgressCallback, Symbol(progress,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,7,68))
>ProgressCallback : ProgressCallback, Symbol(ProgressCallback,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,0,0))
>oncancel : any, Symbol(oncancel,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,7,102))
	
    // removing this method fixes the error squiggle.....
	public then<U>(success?: (value:V)=>TPromise<U>, error?: (err:any)=>TPromise<U>, progress?:ProgressCallback): TPromise<U>;
>then : <U>(success?: (value: V) => TPromise<U>, error?: (err: any) => TPromise<U>, progress?: ProgressCallback) => TPromise<U>, Symbol(then,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,7,119))
>U : U, Symbol(U,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,10,13))
>success : (value: V) => TPromise<U>, Symbol(success,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,10,16))
>value : V, Symbol(value,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,10,27))
>V : V, Symbol(V,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,5,30))
>TPromise : TPromise<V>, Symbol(TPromise,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,2,1))
>U : U, Symbol(U,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,10,13))
>error : (err: any) => TPromise<U>, Symbol(error,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,10,49))
>err : any, Symbol(err,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,10,59))
>TPromise : TPromise<V>, Symbol(TPromise,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,2,1))
>U : U, Symbol(U,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,10,13))
>progress : ProgressCallback, Symbol(progress,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,10,81))
>ProgressCallback : ProgressCallback, Symbol(ProgressCallback,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,0,0))
>TPromise : TPromise<V>, Symbol(TPromise,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,2,1))
>U : U, Symbol(U,Decl(exportedInterfaceInaccessibleInCallbackInModule.ts,10,13))
}
