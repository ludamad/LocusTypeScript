=== tests/cases/compiler/baseIndexSignatureResolution.ts ===
class Base { private a: string; }
>Base : Base, Symbol(Base, Decl(baseIndexSignatureResolution.ts, 0, 0))
>a : string, Symbol(a, Decl(baseIndexSignatureResolution.ts, 0, 12))

class Derived extends Base { private b: string; }
>Derived : Derived, Symbol(Derived, Decl(baseIndexSignatureResolution.ts, 0, 33))
>Base : Base, Symbol(Base, Decl(baseIndexSignatureResolution.ts, 0, 0))
>b : string, Symbol(b, Decl(baseIndexSignatureResolution.ts, 1, 28))

// Note - commmenting "extends Foo" prevents the error
interface Foo {
>Foo : Foo, Symbol(Foo, Decl(baseIndexSignatureResolution.ts, 1, 49))

    [i: number]: Base;
>i : number, Symbol(i, Decl(baseIndexSignatureResolution.ts, 5, 5))
>Base : Base, Symbol(Base, Decl(baseIndexSignatureResolution.ts, 0, 0))
}
interface FooOf<TBase extends Base> extends Foo {
>FooOf : FooOf<TBase>, Symbol(FooOf, Decl(baseIndexSignatureResolution.ts, 6, 1))
>TBase : TBase, Symbol(TBase, Decl(baseIndexSignatureResolution.ts, 7, 16))
>Base : Base, Symbol(Base, Decl(baseIndexSignatureResolution.ts, 0, 0))
>Foo : Foo, Symbol(Foo, Decl(baseIndexSignatureResolution.ts, 1, 49))

    [i: number]: TBase;
>i : number, Symbol(i, Decl(baseIndexSignatureResolution.ts, 8, 5))
>TBase : TBase, Symbol(TBase, Decl(baseIndexSignatureResolution.ts, 7, 16))
}
var x: FooOf<Derived> = null;
>x : FooOf<Derived>, Symbol(x, Decl(baseIndexSignatureResolution.ts, 10, 3))
>FooOf : FooOf<TBase>, Symbol(FooOf, Decl(baseIndexSignatureResolution.ts, 6, 1))
>Derived : Derived, Symbol(Derived, Decl(baseIndexSignatureResolution.ts, 0, 33))
>null : null

var y: Derived = x[0];
>y : Derived, Symbol(y, Decl(baseIndexSignatureResolution.ts, 11, 3))
>Derived : Derived, Symbol(Derived, Decl(baseIndexSignatureResolution.ts, 0, 33))
>x[0] : Derived
>x : FooOf<Derived>, Symbol(x, Decl(baseIndexSignatureResolution.ts, 10, 3))
>0 : number

/*
// Note - the equivalent for normal interface methods works fine:
interface A {
    foo(): Base;
}
interface B<TBase extends Base> extends A {
    foo(): TBase;
}
var b: B<Derived> = null;
var z: Derived = b.foo();
*/
