=== tests/cases/compiler/downlevelLetConst14.ts ===
'use strict'
>'use strict' : string

declare function use(a: any);
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>a : any, Symbol(a, Decl(downlevelLetConst14.ts, 1, 21))

var x = 10;
>x : number, Symbol(x, Decl(downlevelLetConst14.ts, 3, 3))
>10 : number

var z0, z1, z2, z3;
>z0 : any, Symbol(z0, Decl(downlevelLetConst14.ts, 4, 3))
>z1 : any, Symbol(z1, Decl(downlevelLetConst14.ts, 4, 7))
>z2 : any, Symbol(z2, Decl(downlevelLetConst14.ts, 4, 11))
>z3 : any, Symbol(z3, Decl(downlevelLetConst14.ts, 4, 15))
{
    let x = 20;
>x : number, Symbol(x, Decl(downlevelLetConst14.ts, 6, 7))
>20 : number

    use(x);
>use(x) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>x : number, Symbol(x, Decl(downlevelLetConst14.ts, 6, 7))

    let [z0] = [1];
>z0 : number, Symbol(z0, Decl(downlevelLetConst14.ts, 9, 9))
>[1] : [number]
>1 : number

    use(z0);
>use(z0) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z0 : number, Symbol(z0, Decl(downlevelLetConst14.ts, 9, 9))

    let [z1] = [1]
>z1 : number, Symbol(z1, Decl(downlevelLetConst14.ts, 11, 9))
>[1] : [number]
>1 : number

    use(z1);
>use(z1) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z1 : number, Symbol(z1, Decl(downlevelLetConst14.ts, 11, 9))

    let {a: z2} = { a: 1 };
>a : any
>z2 : number, Symbol(z2, Decl(downlevelLetConst14.ts, 13, 9))
>{ a: 1 } : { a: number; }
>a : number, Symbol(a, Decl(downlevelLetConst14.ts, 13, 19))
>1 : number

    use(z2);
>use(z2) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z2 : number, Symbol(z2, Decl(downlevelLetConst14.ts, 13, 9))

    let {a: z3} = { a: 1 };
>a : any
>z3 : number, Symbol(z3, Decl(downlevelLetConst14.ts, 15, 9))
>{ a: 1 } : { a: number; }
>a : number, Symbol(a, Decl(downlevelLetConst14.ts, 15, 19))
>1 : number

    use(z3);
>use(z3) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z3 : number, Symbol(z3, Decl(downlevelLetConst14.ts, 15, 9))
}
use(x);
>use(x) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>x : number, Symbol(x, Decl(downlevelLetConst14.ts, 3, 3))

use(z0);
>use(z0) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z0 : any, Symbol(z0, Decl(downlevelLetConst14.ts, 4, 3))

use(z1);
>use(z1) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z1 : any, Symbol(z1, Decl(downlevelLetConst14.ts, 4, 7))

use(z2);
>use(z2) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z2 : any, Symbol(z2, Decl(downlevelLetConst14.ts, 4, 11))

use(z3);
>use(z3) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z3 : any, Symbol(z3, Decl(downlevelLetConst14.ts, 4, 15))

var z6;
>z6 : any, Symbol(z6, Decl(downlevelLetConst14.ts, 23, 3))

var y = true;
>y : boolean, Symbol(y, Decl(downlevelLetConst14.ts, 24, 3))
>true : boolean
{
    let y = "";
>y : string, Symbol(y, Decl(downlevelLetConst14.ts, 26, 7))
>"" : string

    let [z6] = [true]
>z6 : boolean, Symbol(z6, Decl(downlevelLetConst14.ts, 27, 9))
>[true] : [boolean]
>true : boolean
    {
        let y = 1;
>y : number, Symbol(y, Decl(downlevelLetConst14.ts, 29, 11))
>1 : number

        let {a: z6} = {a: 1}
>a : any
>z6 : number, Symbol(z6, Decl(downlevelLetConst14.ts, 30, 13))
>{a: 1} : { a: number; }
>a : number, Symbol(a, Decl(downlevelLetConst14.ts, 30, 23))
>1 : number

        use(y);
>use(y) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>y : number, Symbol(y, Decl(downlevelLetConst14.ts, 29, 11))

        use(z6);
>use(z6) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z6 : number, Symbol(z6, Decl(downlevelLetConst14.ts, 30, 13))
    }
    use(y);
>use(y) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>y : string, Symbol(y, Decl(downlevelLetConst14.ts, 26, 7))

    use(z6);
>use(z6) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z6 : boolean, Symbol(z6, Decl(downlevelLetConst14.ts, 27, 9))
}
use(y);
>use(y) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>y : boolean, Symbol(y, Decl(downlevelLetConst14.ts, 24, 3))

use(z6);
>use(z6) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z6 : any, Symbol(z6, Decl(downlevelLetConst14.ts, 23, 3))

var z = false;
>z : boolean, Symbol(z, Decl(downlevelLetConst14.ts, 40, 3))
>false : boolean

var z5 = 1;
>z5 : number, Symbol(z5, Decl(downlevelLetConst14.ts, 41, 3))
>1 : number
{
    let z = "";
>z : string, Symbol(z, Decl(downlevelLetConst14.ts, 43, 7))
>"" : string

    let [z5] = [5];
>z5 : number, Symbol(z5, Decl(downlevelLetConst14.ts, 44, 9))
>[5] : [number]
>5 : number
    {
        let _z = 1;
>_z : number, Symbol(_z, Decl(downlevelLetConst14.ts, 46, 11))
>1 : number

        let {a: _z5} = { a: 1 };
>a : any
>_z5 : number, Symbol(_z5, Decl(downlevelLetConst14.ts, 47, 13))
>{ a: 1 } : { a: number; }
>a : number, Symbol(a, Decl(downlevelLetConst14.ts, 47, 24))
>1 : number

        // try to step on generated name
        use(_z);
>use(_z) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>_z : number, Symbol(_z, Decl(downlevelLetConst14.ts, 46, 11))
    }
    use(z);
>use(z) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>z : string, Symbol(z, Decl(downlevelLetConst14.ts, 43, 7))
}
use(y);
>use(y) : any
>use : (a: any) => any, Symbol(use, Decl(downlevelLetConst14.ts, 0, 12))
>y : boolean, Symbol(y, Decl(downlevelLetConst14.ts, 24, 3))

