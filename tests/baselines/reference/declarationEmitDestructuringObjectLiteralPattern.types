=== tests/cases/compiler/declarationEmitDestructuringObjectLiteralPattern.ts ===

var { } = { x: 5, y: "hello" };
>{ x: 5, y: "hello" } : { x: number; y: string; }
>x : number
>y : string

var { x4 } = { x4: 5, y4: "hello" };
>x4 : number
>{ x4: 5, y4: "hello" } : { x4: number; y4: string; }
>x4 : number
>y4 : string

var { y5 } = { x5: 5, y5: "hello" };
>y5 : string
>{ x5: 5, y5: "hello" } : { x5: number; y5: string; }
>x5 : number
>y5 : string

var { x6, y6 } = { x6: 5, y6: "hello" };
>x6 : number
>y6 : string
>{ x6: 5, y6: "hello" } : { x6: number; y6: string; }
>x6 : number
>y6 : string

var { x7: a1 } = { x7: 5, y7: "hello" };
>x7 : unknown
>a1 : number
>{ x7: 5, y7: "hello" } : { x7: number; y7: string; }
>x7 : number
>y7 : string

var { y8: b1 } = { x8: 5, y8: "hello" };
>y8 : unknown
>b1 : string
>{ x8: 5, y8: "hello" } : { x8: number; y8: string; }
>x8 : number
>y8 : string

var { x9: a2, y9: b2 } = { x9: 5, y9: "hello" };
>x9 : unknown
>a2 : number
>y9 : unknown
>b2 : string
>{ x9: 5, y9: "hello" } : { x9: number; y9: string; }
>x9 : number
>y9 : string

var { a: x11, b: { a: y11, b: { a: z11 }}} = { a: 1, b: { a: "hello", b: { a: true } } };
>a : unknown
>x11 : number
>b : unknown
>a : unknown
>y11 : string
>b : unknown
>a : unknown
>z11 : boolean
>{ a: 1, b: { a: "hello", b: { a: true } } } : { a: number; b: { a: string; b: { a: boolean; }; }; }
>a : number
>b : { a: string; b: { a: boolean; }; }
>{ a: "hello", b: { a: true } } : { a: string; b: { a: boolean; }; }
>a : string
>b : { a: boolean; }
>{ a: true } : { a: boolean; }
>a : boolean

function f15() {
>f15 : () => { a4: string; b4: number; c4: boolean; }

    var a4 = "hello";
>a4 : string

    var b4 = 1;
>b4 : number

    var c4 = true;
>c4 : boolean

    return { a4, b4, c4 };
>{ a4, b4, c4 } : { a4: string; b4: number; c4: boolean; }
>a4 : string
>b4 : number
>c4 : boolean
}
var { a4, b4, c4 } = f15();
>a4 : string
>b4 : number
>c4 : boolean
>f15() : { a4: string; b4: number; c4: boolean; }
>f15 : () => { a4: string; b4: number; c4: boolean; }

module m {
>m : typeof m

    export var { a4, b4, c4 } = f15();
>a4 : string
>b4 : number
>c4 : boolean
>f15() : { a4: string; b4: number; c4: boolean; }
>f15 : () => { a4: string; b4: number; c4: boolean; }
}
