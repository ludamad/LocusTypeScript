=== tests/cases/compiler/overloadReturnTypes.ts ===
class Accessor {}
>Accessor : Accessor, Symbol(Accessor,Decl(overloadReturnTypes.ts,0,0))

function attr(name: string): string;
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }, Symbol(attr,Decl(overloadReturnTypes.ts,0,17),Decl(overloadReturnTypes.ts,2,36),Decl(overloadReturnTypes.ts,3,53),Decl(overloadReturnTypes.ts,4,34))
>name : string, Symbol(name,Decl(overloadReturnTypes.ts,2,14))

function attr(name: string, value: string): Accessor;
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }, Symbol(attr,Decl(overloadReturnTypes.ts,0,17),Decl(overloadReturnTypes.ts,2,36),Decl(overloadReturnTypes.ts,3,53),Decl(overloadReturnTypes.ts,4,34))
>name : string, Symbol(name,Decl(overloadReturnTypes.ts,3,14))
>value : string, Symbol(value,Decl(overloadReturnTypes.ts,3,27))
>Accessor : Accessor, Symbol(Accessor,Decl(overloadReturnTypes.ts,0,0))

function attr(map: any): Accessor;
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }, Symbol(attr,Decl(overloadReturnTypes.ts,0,17),Decl(overloadReturnTypes.ts,2,36),Decl(overloadReturnTypes.ts,3,53),Decl(overloadReturnTypes.ts,4,34))
>map : any, Symbol(map,Decl(overloadReturnTypes.ts,4,14))
>Accessor : Accessor, Symbol(Accessor,Decl(overloadReturnTypes.ts,0,0))

function attr(nameOrMap: any, value?: string): any {
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }, Symbol(attr,Decl(overloadReturnTypes.ts,0,17),Decl(overloadReturnTypes.ts,2,36),Decl(overloadReturnTypes.ts,3,53),Decl(overloadReturnTypes.ts,4,34))
>nameOrMap : any, Symbol(nameOrMap,Decl(overloadReturnTypes.ts,5,14))
>value : string, Symbol(value,Decl(overloadReturnTypes.ts,5,29))

    if (nameOrMap && typeof nameOrMap === "object") {
>nameOrMap && typeof nameOrMap === "object" : boolean
>nameOrMap : any, Symbol(nameOrMap,Decl(overloadReturnTypes.ts,5,14))
>typeof nameOrMap === "object" : boolean
>typeof nameOrMap : string
>nameOrMap : any, Symbol(nameOrMap,Decl(overloadReturnTypes.ts,5,14))
>"object" : string

        // handle map case
        return new Accessor;
>new Accessor : Accessor
>Accessor : typeof Accessor, Symbol(Accessor,Decl(overloadReturnTypes.ts,0,0))
    }
    else {
        // handle string case
        return "s";
>"s" : string
    }
}


interface IFace {
>IFace : IFace, Symbol(IFace,Decl(overloadReturnTypes.ts,14,1))

	attr(name:string):string;
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }, Symbol(attr,Decl(overloadReturnTypes.ts,17,17),Decl(overloadReturnTypes.ts,18,26),Decl(overloadReturnTypes.ts,19,45))
>name : string, Symbol(name,Decl(overloadReturnTypes.ts,18,6))

	attr(name: string, value: string): Accessor;
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }, Symbol(attr,Decl(overloadReturnTypes.ts,17,17),Decl(overloadReturnTypes.ts,18,26),Decl(overloadReturnTypes.ts,19,45))
>name : string, Symbol(name,Decl(overloadReturnTypes.ts,19,6))
>value : string, Symbol(value,Decl(overloadReturnTypes.ts,19,19))
>Accessor : Accessor, Symbol(Accessor,Decl(overloadReturnTypes.ts,0,0))

	attr(map: any): Accessor;
>attr : { (name: string): string; (name: string, value: string): Accessor; (map: any): Accessor; }, Symbol(attr,Decl(overloadReturnTypes.ts,17,17),Decl(overloadReturnTypes.ts,18,26),Decl(overloadReturnTypes.ts,19,45))
>map : any, Symbol(map,Decl(overloadReturnTypes.ts,20,6))
>Accessor : Accessor, Symbol(Accessor,Decl(overloadReturnTypes.ts,0,0))
}

