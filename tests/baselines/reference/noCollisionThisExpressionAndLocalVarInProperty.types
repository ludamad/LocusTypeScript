=== tests/cases/compiler/noCollisionThisExpressionAndLocalVarInProperty.ts ===
class class1 {
>class1 : class1, Symbol(class1, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 0, 0))

    public prop1 = {
>prop1 : { doStuff: (callback: any) => () => any; }, Symbol(prop1, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 0, 14))
>{        doStuff: (callback) => () => {            var _this = 2;            return callback(_this);        }    } : { doStuff: (callback: any) => () => any; }

        doStuff: (callback) => () => {
>doStuff : (callback: any) => () => any, Symbol(doStuff, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 1, 20))
>(callback) => () => {            var _this = 2;            return callback(_this);        } : (callback: any) => () => any
>callback : any, Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 2, 18))
>() => {            var _this = 2;            return callback(_this);        } : () => any

            var _this = 2;
>_this : number, Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 3, 15))
>2 : number

            return callback(_this);
>callback(_this) : any
>callback : any, Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 2, 18))
>_this : number, Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 3, 15))
        }
    }
}

class class2 {
>class2 : class2, Symbol(class2, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 7, 1))

    constructor() {
        var _this = 2;
>_this : number, Symbol(_this, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 11, 11))
>2 : number
    }
    public prop1 = {
>prop1 : { doStuff: (callback: any) => () => any; }, Symbol(prop1, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 12, 5))
>{        doStuff: (callback) => () => {            return callback(10);        }    } : { doStuff: (callback: any) => () => any; }

        doStuff: (callback) => () => {
>doStuff : (callback: any) => () => any, Symbol(doStuff, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 13, 20))
>(callback) => () => {            return callback(10);        } : (callback: any) => () => any
>callback : any, Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 14, 18))
>() => {            return callback(10);        } : () => any

            return callback(10);
>callback(10) : any
>callback : any, Symbol(callback, Decl(noCollisionThisExpressionAndLocalVarInProperty.ts, 14, 18))
>10 : number
        }
    }
}
