=== tests/cases/conformance/es6/templates/templateStringBinaryOperationsES6.ts ===
var a = 1 + `${ 3 }`;
>a : string, Symbol(a, Decl(templateStringBinaryOperationsES6.ts, 0, 3))
>1 + `${ 3 }` : string
>1 : number
>`${ 3 }` : string
>3 : number

var b = 1 + `2${ 3 }`;
>b : string, Symbol(b, Decl(templateStringBinaryOperationsES6.ts, 1, 3))
>1 + `2${ 3 }` : string
>1 : number
>`2${ 3 }` : string
>3 : number

var c = 1 + `${ 3 }4`;
>c : string, Symbol(c, Decl(templateStringBinaryOperationsES6.ts, 2, 3))
>1 + `${ 3 }4` : string
>1 : number
>`${ 3 }4` : string
>3 : number

var d = 1 + `2${ 3 }4`;
>d : string, Symbol(d, Decl(templateStringBinaryOperationsES6.ts, 3, 3))
>1 + `2${ 3 }4` : string
>1 : number
>`2${ 3 }4` : string
>3 : number

var e = `${ 3 }` + 5;
>e : string, Symbol(e, Decl(templateStringBinaryOperationsES6.ts, 4, 3))
>`${ 3 }` + 5 : string
>`${ 3 }` : string
>3 : number
>5 : number

var f = `2${ 3 }` + 5;
>f : string, Symbol(f, Decl(templateStringBinaryOperationsES6.ts, 5, 3))
>`2${ 3 }` + 5 : string
>`2${ 3 }` : string
>3 : number
>5 : number

var g = `${ 3 }4` + 5;
>g : string, Symbol(g, Decl(templateStringBinaryOperationsES6.ts, 6, 3))
>`${ 3 }4` + 5 : string
>`${ 3 }4` : string
>3 : number
>5 : number

var h = `2${ 3 }4` + 5;
>h : string, Symbol(h, Decl(templateStringBinaryOperationsES6.ts, 7, 3))
>`2${ 3 }4` + 5 : string
>`2${ 3 }4` : string
>3 : number
>5 : number

var i = 1 + `${ 3 }` + 5;
>i : string, Symbol(i, Decl(templateStringBinaryOperationsES6.ts, 8, 3))
>1 + `${ 3 }` + 5 : string
>1 + `${ 3 }` : string
>1 : number
>`${ 3 }` : string
>3 : number
>5 : number

var j = 1 + `2${ 3 }` + 5;
>j : string, Symbol(j, Decl(templateStringBinaryOperationsES6.ts, 9, 3))
>1 + `2${ 3 }` + 5 : string
>1 + `2${ 3 }` : string
>1 : number
>`2${ 3 }` : string
>3 : number
>5 : number

var k = 1 + `${ 3 }4` + 5;
>k : string, Symbol(k, Decl(templateStringBinaryOperationsES6.ts, 10, 3))
>1 + `${ 3 }4` + 5 : string
>1 + `${ 3 }4` : string
>1 : number
>`${ 3 }4` : string
>3 : number
>5 : number

var l = 1 + `2${ 3 }4` + 5;
>l : string, Symbol(l, Decl(templateStringBinaryOperationsES6.ts, 11, 3))
>1 + `2${ 3 }4` + 5 : string
>1 + `2${ 3 }4` : string
>1 : number
>`2${ 3 }4` : string
>3 : number
>5 : number

var a2 = 1 + `${ 3 - 4 }`;
>a2 : string, Symbol(a2, Decl(templateStringBinaryOperationsES6.ts, 13, 3))
>1 + `${ 3 - 4 }` : string
>1 : number
>`${ 3 - 4 }` : string
>3 - 4 : number
>3 : number
>4 : number

var b2 = 1 + `2${ 3 - 4 }`;
>b2 : string, Symbol(b2, Decl(templateStringBinaryOperationsES6.ts, 14, 3))
>1 + `2${ 3 - 4 }` : string
>1 : number
>`2${ 3 - 4 }` : string
>3 - 4 : number
>3 : number
>4 : number

var c2 = 1 + `${ 3 - 4 }5`;
>c2 : string, Symbol(c2, Decl(templateStringBinaryOperationsES6.ts, 15, 3))
>1 + `${ 3 - 4 }5` : string
>1 : number
>`${ 3 - 4 }5` : string
>3 - 4 : number
>3 : number
>4 : number

var d2 = 1 + `2${ 3 - 4 }5`;
>d2 : string, Symbol(d2, Decl(templateStringBinaryOperationsES6.ts, 16, 3))
>1 + `2${ 3 - 4 }5` : string
>1 : number
>`2${ 3 - 4 }5` : string
>3 - 4 : number
>3 : number
>4 : number

var e2 = `${ 3 - 4 }` + 6;
>e2 : string, Symbol(e2, Decl(templateStringBinaryOperationsES6.ts, 17, 3))
>`${ 3 - 4 }` + 6 : string
>`${ 3 - 4 }` : string
>3 - 4 : number
>3 : number
>4 : number
>6 : number

var f2 = `2${ 3 - 4 }` + 6;
>f2 : string, Symbol(f2, Decl(templateStringBinaryOperationsES6.ts, 18, 3))
>`2${ 3 - 4 }` + 6 : string
>`2${ 3 - 4 }` : string
>3 - 4 : number
>3 : number
>4 : number
>6 : number

var g2 = `${ 3 - 4 }5` + 6;
>g2 : string, Symbol(g2, Decl(templateStringBinaryOperationsES6.ts, 19, 3))
>`${ 3 - 4 }5` + 6 : string
>`${ 3 - 4 }5` : string
>3 - 4 : number
>3 : number
>4 : number
>6 : number

var h2 = `2${ 3 - 4 }5` + 6;
>h2 : string, Symbol(h2, Decl(templateStringBinaryOperationsES6.ts, 20, 3))
>`2${ 3 - 4 }5` + 6 : string
>`2${ 3 - 4 }5` : string
>3 - 4 : number
>3 : number
>4 : number
>6 : number

var i2 = 1 + `${ 3 - 4 }` + 6;
>i2 : string, Symbol(i2, Decl(templateStringBinaryOperationsES6.ts, 21, 3))
>1 + `${ 3 - 4 }` + 6 : string
>1 + `${ 3 - 4 }` : string
>1 : number
>`${ 3 - 4 }` : string
>3 - 4 : number
>3 : number
>4 : number
>6 : number

var j2 = 1 + `2${ 3 - 4 }` + 6;
>j2 : string, Symbol(j2, Decl(templateStringBinaryOperationsES6.ts, 22, 3))
>1 + `2${ 3 - 4 }` + 6 : string
>1 + `2${ 3 - 4 }` : string
>1 : number
>`2${ 3 - 4 }` : string
>3 - 4 : number
>3 : number
>4 : number
>6 : number

var k2 = 1 + `${ 3 - 4 }5` + 6;
>k2 : string, Symbol(k2, Decl(templateStringBinaryOperationsES6.ts, 23, 3))
>1 + `${ 3 - 4 }5` + 6 : string
>1 + `${ 3 - 4 }5` : string
>1 : number
>`${ 3 - 4 }5` : string
>3 - 4 : number
>3 : number
>4 : number
>6 : number

var l2 = 1 + `2${ 3 - 4 }5` + 6;
>l2 : string, Symbol(l2, Decl(templateStringBinaryOperationsES6.ts, 24, 3))
>1 + `2${ 3 - 4 }5` + 6 : string
>1 + `2${ 3 - 4 }5` : string
>1 : number
>`2${ 3 - 4 }5` : string
>3 - 4 : number
>3 : number
>4 : number
>6 : number

var a3 = 1 + `${ 3 * 4 }`;
>a3 : string, Symbol(a3, Decl(templateStringBinaryOperationsES6.ts, 26, 3))
>1 + `${ 3 * 4 }` : string
>1 : number
>`${ 3 * 4 }` : string
>3 * 4 : number
>3 : number
>4 : number

var b3 = 1 + `2${ 3 * 4 }`;
>b3 : string, Symbol(b3, Decl(templateStringBinaryOperationsES6.ts, 27, 3))
>1 + `2${ 3 * 4 }` : string
>1 : number
>`2${ 3 * 4 }` : string
>3 * 4 : number
>3 : number
>4 : number

var c3 = 1 + `${ 3 * 4 }5`;
>c3 : string, Symbol(c3, Decl(templateStringBinaryOperationsES6.ts, 28, 3))
>1 + `${ 3 * 4 }5` : string
>1 : number
>`${ 3 * 4 }5` : string
>3 * 4 : number
>3 : number
>4 : number

var d3 = 1 + `2${ 3 * 4 }5`;
>d3 : string, Symbol(d3, Decl(templateStringBinaryOperationsES6.ts, 29, 3))
>1 + `2${ 3 * 4 }5` : string
>1 : number
>`2${ 3 * 4 }5` : string
>3 * 4 : number
>3 : number
>4 : number

var e3 = `${ 3 * 4 }` + 6;
>e3 : string, Symbol(e3, Decl(templateStringBinaryOperationsES6.ts, 30, 3))
>`${ 3 * 4 }` + 6 : string
>`${ 3 * 4 }` : string
>3 * 4 : number
>3 : number
>4 : number
>6 : number

var f3 = `2${ 3 * 4 }` + 6;
>f3 : string, Symbol(f3, Decl(templateStringBinaryOperationsES6.ts, 31, 3))
>`2${ 3 * 4 }` + 6 : string
>`2${ 3 * 4 }` : string
>3 * 4 : number
>3 : number
>4 : number
>6 : number

var g3 = `${ 3 * 4 }5` + 6;
>g3 : string, Symbol(g3, Decl(templateStringBinaryOperationsES6.ts, 32, 3))
>`${ 3 * 4 }5` + 6 : string
>`${ 3 * 4 }5` : string
>3 * 4 : number
>3 : number
>4 : number
>6 : number

var h3 = `2${ 3 * 4 }5` + 6;
>h3 : string, Symbol(h3, Decl(templateStringBinaryOperationsES6.ts, 33, 3))
>`2${ 3 * 4 }5` + 6 : string
>`2${ 3 * 4 }5` : string
>3 * 4 : number
>3 : number
>4 : number
>6 : number

var i3 = 1 + `${ 3 * 4 }` + 6;
>i3 : string, Symbol(i3, Decl(templateStringBinaryOperationsES6.ts, 34, 3))
>1 + `${ 3 * 4 }` + 6 : string
>1 + `${ 3 * 4 }` : string
>1 : number
>`${ 3 * 4 }` : string
>3 * 4 : number
>3 : number
>4 : number
>6 : number

var j3 = 1 + `2${ 3 * 4 }` + 6;
>j3 : string, Symbol(j3, Decl(templateStringBinaryOperationsES6.ts, 35, 3))
>1 + `2${ 3 * 4 }` + 6 : string
>1 + `2${ 3 * 4 }` : string
>1 : number
>`2${ 3 * 4 }` : string
>3 * 4 : number
>3 : number
>4 : number
>6 : number

var k3 = 1 + `${ 3 * 4 }5` + 6;
>k3 : string, Symbol(k3, Decl(templateStringBinaryOperationsES6.ts, 36, 3))
>1 + `${ 3 * 4 }5` + 6 : string
>1 + `${ 3 * 4 }5` : string
>1 : number
>`${ 3 * 4 }5` : string
>3 * 4 : number
>3 : number
>4 : number
>6 : number

var l3 = 1 + `2${ 3 * 4 }5` + 6;
>l3 : string, Symbol(l3, Decl(templateStringBinaryOperationsES6.ts, 37, 3))
>1 + `2${ 3 * 4 }5` + 6 : string
>1 + `2${ 3 * 4 }5` : string
>1 : number
>`2${ 3 * 4 }5` : string
>3 * 4 : number
>3 : number
>4 : number
>6 : number

var a4 = 1 + `${ 3 & 4 }`;
>a4 : string, Symbol(a4, Decl(templateStringBinaryOperationsES6.ts, 39, 3))
>1 + `${ 3 & 4 }` : string
>1 : number
>`${ 3 & 4 }` : string
>3 & 4 : number
>3 : number
>4 : number

var b4 = 1 + `2${ 3 & 4 }`;
>b4 : string, Symbol(b4, Decl(templateStringBinaryOperationsES6.ts, 40, 3))
>1 + `2${ 3 & 4 }` : string
>1 : number
>`2${ 3 & 4 }` : string
>3 & 4 : number
>3 : number
>4 : number

var c4 = 1 + `${ 3 & 4 }5`;
>c4 : string, Symbol(c4, Decl(templateStringBinaryOperationsES6.ts, 41, 3))
>1 + `${ 3 & 4 }5` : string
>1 : number
>`${ 3 & 4 }5` : string
>3 & 4 : number
>3 : number
>4 : number

var d4 = 1 + `2${ 3 & 4 }5`;
>d4 : string, Symbol(d4, Decl(templateStringBinaryOperationsES6.ts, 42, 3))
>1 + `2${ 3 & 4 }5` : string
>1 : number
>`2${ 3 & 4 }5` : string
>3 & 4 : number
>3 : number
>4 : number

var e4 = `${ 3 & 4 }` + 6;
>e4 : string, Symbol(e4, Decl(templateStringBinaryOperationsES6.ts, 43, 3))
>`${ 3 & 4 }` + 6 : string
>`${ 3 & 4 }` : string
>3 & 4 : number
>3 : number
>4 : number
>6 : number

var f4 = `2${ 3 & 4 }` + 6;
>f4 : string, Symbol(f4, Decl(templateStringBinaryOperationsES6.ts, 44, 3))
>`2${ 3 & 4 }` + 6 : string
>`2${ 3 & 4 }` : string
>3 & 4 : number
>3 : number
>4 : number
>6 : number

var g4 = `${ 3 & 4 }5` + 6;
>g4 : string, Symbol(g4, Decl(templateStringBinaryOperationsES6.ts, 45, 3))
>`${ 3 & 4 }5` + 6 : string
>`${ 3 & 4 }5` : string
>3 & 4 : number
>3 : number
>4 : number
>6 : number

var h4 = `2${ 3 & 4 }5` + 6;
>h4 : string, Symbol(h4, Decl(templateStringBinaryOperationsES6.ts, 46, 3))
>`2${ 3 & 4 }5` + 6 : string
>`2${ 3 & 4 }5` : string
>3 & 4 : number
>3 : number
>4 : number
>6 : number

var i4 = 1 + `${ 3 & 4 }` + 6;
>i4 : string, Symbol(i4, Decl(templateStringBinaryOperationsES6.ts, 47, 3))
>1 + `${ 3 & 4 }` + 6 : string
>1 + `${ 3 & 4 }` : string
>1 : number
>`${ 3 & 4 }` : string
>3 & 4 : number
>3 : number
>4 : number
>6 : number

var j4 = 1 + `2${ 3 & 4 }` + 6;
>j4 : string, Symbol(j4, Decl(templateStringBinaryOperationsES6.ts, 48, 3))
>1 + `2${ 3 & 4 }` + 6 : string
>1 + `2${ 3 & 4 }` : string
>1 : number
>`2${ 3 & 4 }` : string
>3 & 4 : number
>3 : number
>4 : number
>6 : number

var k4 = 1 + `${ 3 & 4 }5` + 6;
>k4 : string, Symbol(k4, Decl(templateStringBinaryOperationsES6.ts, 49, 3))
>1 + `${ 3 & 4 }5` + 6 : string
>1 + `${ 3 & 4 }5` : string
>1 : number
>`${ 3 & 4 }5` : string
>3 & 4 : number
>3 : number
>4 : number
>6 : number

var l4 = 1 + `2${ 3 & 4 }5` + 6;
>l4 : string, Symbol(l4, Decl(templateStringBinaryOperationsES6.ts, 50, 3))
>1 + `2${ 3 & 4 }5` + 6 : string
>1 + `2${ 3 & 4 }5` : string
>1 : number
>`2${ 3 & 4 }5` : string
>3 & 4 : number
>3 : number
>4 : number
>6 : number

