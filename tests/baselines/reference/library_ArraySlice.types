=== tests/cases/compiler/library_ArraySlice.ts ===
// Array.prototype.slice can have zero, one, or two arguments
Array.prototype.slice();
>Array.prototype.slice() : any[]
>Array.prototype.slice : (start?: number, end?: number) => any[]
>Array.prototype : any[]
>Array : { (arrayLength?: number): Array<any>; <T>(arrayLength: number): Array<T>; <T>(...items: Array<T>): Array<T>; new (arrayLength?: number): Array<any>; new <T>(arrayLength: number): Array<T>; new <T>(...items: Array<T>): Array<T>; isArray(arg: any): boolean; prototype: Array<any>; }
>prototype : any[]
>slice : (start?: number, end?: number) => any[]

Array.prototype.slice(0);
>Array.prototype.slice(0) : any[]
>Array.prototype.slice : (start?: number, end?: number) => any[]
>Array.prototype : any[]
>Array : { (arrayLength?: number): Array<any>; <T>(arrayLength: number): Array<T>; <T>(...items: Array<T>): Array<T>; new (arrayLength?: number): Array<any>; new <T>(arrayLength: number): Array<T>; new <T>(...items: Array<T>): Array<T>; isArray(arg: any): boolean; prototype: Array<any>; }
>prototype : any[]
>slice : (start?: number, end?: number) => any[]

Array.prototype.slice(0, 1);
>Array.prototype.slice(0, 1) : any[]
>Array.prototype.slice : (start?: number, end?: number) => any[]
>Array.prototype : any[]
>Array : { (arrayLength?: number): Array<any>; <T>(arrayLength: number): Array<T>; <T>(...items: Array<T>): Array<T>; new (arrayLength?: number): Array<any>; new <T>(arrayLength: number): Array<T>; new <T>(...items: Array<T>): Array<T>; isArray(arg: any): boolean; prototype: Array<any>; }
>prototype : any[]
>slice : (start?: number, end?: number) => any[]

