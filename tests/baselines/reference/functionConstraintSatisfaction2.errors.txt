==== tests/cases/conformance/types/typeParameters/typeArgumentLists/functionConstraintSatisfaction2.ts (14 errors) ====
    // satisfaction of a constraint to Function, all of these invocations are errors unless otherwise noted
    
    function foo<T extends Function>(x: T): T { return x; }
    
    foo(1);
    ~~~~~~
!!! Supplied parameters do not match any signature of call target.
    foo(() => { }, 1);
    ~~~~~~~~~~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    foo(1, () => { });
    ~~~~~~~~~~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    
    function foo2<T extends (x: string) => string>(x: T): T { return x; }
    
    class C {
        foo: string;
    }
    
    var b: { new (x: string): string };
    
    class C2<T> {
        foo: T;
    }
    
    var b2: { new <T>(x: T): T };
    
    var r = foo2(new Function());
            ~~~~~~~~~~~~~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    var r2 = foo2((x: string[]) => x);
             ~~~~~~~~~~~~~~~~~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    var r6 = foo2(C);
             ~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    var r7 = foo2(b);
             ~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    var r8 = foo2(<U>(x: U) => x); // no error expected
    var r11 = foo2(<U, V>(x: U, y: V) => x);
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    var r13 = foo2(C2);
              ~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    var r14 = foo2(b2);
              ~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    
    interface F2 extends Function { foo: string; }
    var f2: F2;
    var r16 = foo2(f2);
              ~~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    
    function fff<T extends { (): void }, U extends T>(x: T, y: U) {
                                         ~~~~~~~~~~~
!!! Constraint of a type parameter cannot reference any type parameter from the same type parameter list.
        foo2(x);
        ~~~~~~~
!!! Supplied parameters do not match any signature of call target.
        foo2(y);
        ~~~~~~~
!!! Supplied parameters do not match any signature of call target.
    }
    