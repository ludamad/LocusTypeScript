=== tests/cases/compiler/APISample_compile.ts ===

/*
 * Note: This test is a public API sample. The sample sources can be found 
         at: https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#a-minimal-compiler
 *       Please log a "breaking change" issue for any API breaking change affecting this issue
 */

declare var process: any;
>process : Symbol(process, Decl(APISample_compile.ts, 7, 11))

declare var console: any;
>console : Symbol(console, Decl(APISample_compile.ts, 8, 11))

declare var os: any;
>os : Symbol(os, Decl(APISample_compile.ts, 9, 11))

import ts = require("typescript");
>ts : Symbol(ts, Decl(APISample_compile.ts, 9, 20))

export function compile(fileNames: string[], options: ts.CompilerOptions): void {
>compile : Symbol(compile, Decl(APISample_compile.ts, 11, 34))
>fileNames : Symbol(fileNames, Decl(APISample_compile.ts, 13, 24))
>options : Symbol(options, Decl(APISample_compile.ts, 13, 44))
>ts : Symbol(ts, Decl(APISample_compile.ts, 9, 20))
>CompilerOptions : Symbol(ts.CompilerOptions, Decl(typescript.d.ts, 1074, 5))

    var program = ts.createProgram(fileNames, options);
>program : Symbol(program, Decl(APISample_compile.ts, 14, 7))
>ts.createProgram : Symbol(ts.createProgram, Decl(typescript.d.ts, 1229, 113))
>ts : Symbol(ts, Decl(APISample_compile.ts, 9, 20))
>createProgram : Symbol(ts.createProgram, Decl(typescript.d.ts, 1229, 113))
>fileNames : Symbol(fileNames, Decl(APISample_compile.ts, 13, 24))
>options : Symbol(options, Decl(APISample_compile.ts, 13, 44))

    var emitResult = program.emit();
>emitResult : Symbol(emitResult, Decl(APISample_compile.ts, 15, 7))
>program.emit : Symbol(ts.Program.emit, Decl(typescript.d.ts, 767, 39))
>program : Symbol(program, Decl(APISample_compile.ts, 14, 7))
>emit : Symbol(ts.Program.emit, Decl(typescript.d.ts, 767, 39))

    var allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);
>allDiagnostics : Symbol(allDiagnostics, Decl(APISample_compile.ts, 17, 7))
>ts.getPreEmitDiagnostics(program).concat : Symbol(Array.concat, Decl(lib.d.ts, 1025, 13), Decl(lib.d.ts, 1030, 46))
>ts.getPreEmitDiagnostics : Symbol(ts.getPreEmitDiagnostics, Decl(typescript.d.ts, 1227, 98))
>ts : Symbol(ts, Decl(APISample_compile.ts, 9, 20))
>getPreEmitDiagnostics : Symbol(ts.getPreEmitDiagnostics, Decl(typescript.d.ts, 1227, 98))
>program : Symbol(program, Decl(APISample_compile.ts, 14, 7))
>concat : Symbol(Array.concat, Decl(lib.d.ts, 1025, 13), Decl(lib.d.ts, 1030, 46))
>emitResult.diagnostics : Symbol(ts.EmitResult.diagnostics, Decl(typescript.d.ts, 820, 29))
>emitResult : Symbol(emitResult, Decl(APISample_compile.ts, 15, 7))
>diagnostics : Symbol(ts.EmitResult.diagnostics, Decl(typescript.d.ts, 820, 29))

    allDiagnostics.forEach(diagnostic => {
>allDiagnostics.forEach : Symbol(Array.forEach, Decl(lib.d.ts, 1108, 95))
>allDiagnostics : Symbol(allDiagnostics, Decl(APISample_compile.ts, 17, 7))
>forEach : Symbol(Array.forEach, Decl(lib.d.ts, 1108, 95))
>diagnostic : Symbol(diagnostic, Decl(APISample_compile.ts, 19, 27))

        var { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
>line : Symbol(line, Decl(APISample_compile.ts, 20, 13))
>character : Symbol(character, Decl(APISample_compile.ts, 20, 19))
>diagnostic.file.getLineAndCharacterOfPosition : Symbol(ts.SourceFile.getLineAndCharacterOfPosition, Decl(typescript.d.ts, 1290, 26))
>diagnostic.file : Symbol(ts.Diagnostic.file, Decl(typescript.d.ts, 1062, 26))
>diagnostic : Symbol(diagnostic, Decl(APISample_compile.ts, 19, 27))
>file : Symbol(ts.Diagnostic.file, Decl(typescript.d.ts, 1062, 26))
>getLineAndCharacterOfPosition : Symbol(ts.SourceFile.getLineAndCharacterOfPosition, Decl(typescript.d.ts, 1290, 26))
>diagnostic.start : Symbol(ts.Diagnostic.start, Decl(typescript.d.ts, 1063, 25))
>diagnostic : Symbol(diagnostic, Decl(APISample_compile.ts, 19, 27))
>start : Symbol(ts.Diagnostic.start, Decl(typescript.d.ts, 1063, 25))

        var message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
>message : Symbol(message, Decl(APISample_compile.ts, 21, 11))
>ts.flattenDiagnosticMessageText : Symbol(ts.flattenDiagnosticMessageText, Decl(typescript.d.ts, 1228, 67))
>ts : Symbol(ts, Decl(APISample_compile.ts, 9, 20))
>flattenDiagnosticMessageText : Symbol(ts.flattenDiagnosticMessageText, Decl(typescript.d.ts, 1228, 67))
>diagnostic.messageText : Symbol(ts.Diagnostic.messageText, Decl(typescript.d.ts, 1065, 23))
>diagnostic : Symbol(diagnostic, Decl(APISample_compile.ts, 19, 27))
>messageText : Symbol(ts.Diagnostic.messageText, Decl(typescript.d.ts, 1065, 23))

        console.log(`${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);
>console : Symbol(console, Decl(APISample_compile.ts, 8, 11))
>diagnostic.file.fileName : Symbol(ts.SourceFile.fileName, Decl(typescript.d.ts, 743, 29))
>diagnostic.file : Symbol(ts.Diagnostic.file, Decl(typescript.d.ts, 1062, 26))
>diagnostic : Symbol(diagnostic, Decl(APISample_compile.ts, 19, 27))
>file : Symbol(ts.Diagnostic.file, Decl(typescript.d.ts, 1062, 26))
>fileName : Symbol(ts.SourceFile.fileName, Decl(typescript.d.ts, 743, 29))
>line : Symbol(line, Decl(APISample_compile.ts, 20, 13))
>character : Symbol(character, Decl(APISample_compile.ts, 20, 19))
>message : Symbol(message, Decl(APISample_compile.ts, 21, 11))

    });

    var exitCode = emitResult.emitSkipped ? 1 : 0;
>exitCode : Symbol(exitCode, Decl(APISample_compile.ts, 25, 7))
>emitResult.emitSkipped : Symbol(ts.EmitResult.emitSkipped, Decl(typescript.d.ts, 819, 26))
>emitResult : Symbol(emitResult, Decl(APISample_compile.ts, 15, 7))
>emitSkipped : Symbol(ts.EmitResult.emitSkipped, Decl(typescript.d.ts, 819, 26))

    console.log(`Process exiting with code '${exitCode}'.`);
>console : Symbol(console, Decl(APISample_compile.ts, 8, 11))
>exitCode : Symbol(exitCode, Decl(APISample_compile.ts, 25, 7))

    process.exit(exitCode);
>process : Symbol(process, Decl(APISample_compile.ts, 7, 11))
>exitCode : Symbol(exitCode, Decl(APISample_compile.ts, 25, 7))
}

compile(process.argv.slice(2), {
>compile : Symbol(compile, Decl(APISample_compile.ts, 11, 34))
>process : Symbol(process, Decl(APISample_compile.ts, 7, 11))

    noEmitOnError: true, noImplicitAny: true,
>noEmitOnError : Symbol(noEmitOnError, Decl(APISample_compile.ts, 30, 32))
>noImplicitAny : Symbol(noImplicitAny, Decl(APISample_compile.ts, 31, 24))

    target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS
>target : Symbol(target, Decl(APISample_compile.ts, 31, 45))
>ts.ScriptTarget.ES5 : Symbol(ts.ScriptTarget.ES5, Decl(typescript.d.ts, 1117, 16))
>ts.ScriptTarget : Symbol(ts.ScriptTarget, Decl(typescript.d.ts, 1115, 5))
>ts : Symbol(ts, Decl(APISample_compile.ts, 9, 20))
>ScriptTarget : Symbol(ts.ScriptTarget, Decl(typescript.d.ts, 1115, 5))
>ES5 : Symbol(ts.ScriptTarget.ES5, Decl(typescript.d.ts, 1117, 16))
>module : Symbol(module, Decl(APISample_compile.ts, 32, 32))
>ts.ModuleKind.CommonJS : Symbol(ts.ModuleKind.CommonJS, Decl(typescript.d.ts, 1108, 17))
>ts.ModuleKind : Symbol(ts.ModuleKind, Decl(typescript.d.ts, 1106, 5))
>ts : Symbol(ts, Decl(APISample_compile.ts, 9, 20))
>ModuleKind : Symbol(ts.ModuleKind, Decl(typescript.d.ts, 1106, 5))
>CommonJS : Symbol(ts.ModuleKind.CommonJS, Decl(typescript.d.ts, 1108, 17))

});
