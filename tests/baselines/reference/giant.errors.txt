==== tests/cases/compiler/giant.ts (227 errors) ====
    
    /*
        Prefixes
        p -> public
        r -> private
        i -> import
        e -> export
        a -> ambient
        t -> static
        s -> set
        g -> get
    
        MAX DEPTH 3 LEVELS
    */
    var V;
    function F() { };
    class C {
        constructor () { }
        public pV;
        private rV;
        public pF() { }
        private rF() { }
        public pgF() { }
        public get pgF()
                   ~~~
!!! error TS2300: Duplicate identifier 'pgF'.
                   ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
        public psF(param:any) { }
        ~~~~~~
!!! error TS1005: '{' expected.
        public set psF(param:any)
                   ~~~
!!! error TS2300: Duplicate identifier 'psF'.
        private rgF() { }
        ~~~~~~~
!!! error TS1005: '{' expected.
        private get rgF()
                    ~~~
!!! error TS2300: Duplicate identifier 'rgF'.
                    ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
        private rsF(param:any) { }
        ~~~~~~~
!!! error TS1005: '{' expected.
        private set rsF(param:any)
                    ~~~
!!! error TS2300: Duplicate identifier 'rsF'.
        static tV;
        ~~~~~~
!!! error TS1005: '{' expected.
        static tF() { }
        static tsF(param:any) { }
        static set tsF(param:any)
                   ~~~
!!! error TS2300: Duplicate identifier 'tsF'.
        static tgF() { }
        ~~~~~~
!!! error TS1005: '{' expected.
        static get tgF()
                   ~~~
!!! error TS2300: Duplicate identifier 'tgF'.
                   ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
    }
    ~
!!! error TS1005: '{' expected.
    interface I {
        //Call Signature
        ();
        (): number;
        (p);
        (p1: string);
        (p2?: string);
        (...p3: any[]);
        (p4: string, p5?: string);
        (p6: string, ...p7: any[]);
        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
        
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
        new (p2?: string);
        new (...p3: any[]);
        new (p4: string, p5?: string);
        new (p6: string, ...p7: any[]);
    
        //Index Signature
        [p];
         ~
!!! error TS1022: An index signature parameter must have a type annotation.
        [p1: string];
        ~~~~~~~~~~~~
!!! error TS1021: An index signature must have a type annotation.
        [p2: string, p3: number];
         ~~
!!! error TS1096: An index signature must have exactly one parameter.
    
        //Property Signature
        p;
        p1?;
        p2?: string;
        
        //Function Signature
        p3();
        p4? ();
        p5? (): void;
        p6(pa1): void;
        p7(pa1, pa2): void;
        p7? (pa1, pa2): void;
        ~~
!!! error TS2386: Overload signatures must all be optional or required.
    }
    module M {
        var V;
        function F() { };
        class C {
            constructor () { }
            public pV;
            private rV;
            public pF() { }
            private rF() { }
            public pgF() { }
            public get pgF()
                       ~~~
!!! error TS2300: Duplicate identifier 'pgF'.
                       ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
            public psF(param:any) { }
            ~~~~~~
!!! error TS1005: '{' expected.
            public set psF(param:any)
                       ~~~
!!! error TS2300: Duplicate identifier 'psF'.
            private rgF() { }
            ~~~~~~~
!!! error TS1005: '{' expected.
            private get rgF()
                        ~~~
!!! error TS2300: Duplicate identifier 'rgF'.
                        ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
            private rsF(param:any) { }
            ~~~~~~~
!!! error TS1005: '{' expected.
            private set rsF(param:any)
                        ~~~
!!! error TS2300: Duplicate identifier 'rsF'.
            static tV;
            ~~~~~~
!!! error TS1005: '{' expected.
            static tF() { }
            static tsF(param:any) { }
            static set tsF(param:any)
                       ~~~
!!! error TS2300: Duplicate identifier 'tsF'.
            static tgF() { }
            ~~~~~~
!!! error TS1005: '{' expected.
            static get tgF()
                       ~~~
!!! error TS2300: Duplicate identifier 'tgF'.
                       ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
        }
        ~
!!! error TS1005: '{' expected.
        interface I {
            //Call Signature
            ();
            (): number;
            (p);
            (p1: string);
            (p2?: string);
            (...p3: any[]);
            (p4: string, p5?: string);
            (p6: string, ...p7: any[]);
            //(p8?: string, ...p9: any[]);
            //(p10:string, p8?: string, ...p9: any[]);
        
            //Construct Signature
            new ();
            new (): number;
            new (p: string);
            new (p2?: string);
            new (...p3: any[]);
            new (p4: string, p5?: string);
            new (p6: string, ...p7: any[]);
    
            //Index Signature
            [p];
             ~
!!! error TS1022: An index signature parameter must have a type annotation.
            [p1: string];
            ~~~~~~~~~~~~
!!! error TS1021: An index signature must have a type annotation.
            [p2: string, p3: number];
             ~~
!!! error TS1096: An index signature must have exactly one parameter.
    
            //Property Signature
            p;
            p1?;
            p2?: string;
        
            //Function Signature
            p3();
            p4? ();
            p5? (): void;
            p6(pa1): void;
            p7(pa1, pa2): void;
            p7? (pa1, pa2): void;
            ~~
!!! error TS2386: Overload signatures must all be optional or required.
        }
        module M {
            var V;
            function F() { };
            class C { };
            interface I { };
            module M { };
            export var eV;
            export function eF() { };
            export class eC { };
            export interface eI { };
            export module eM { };
            export declare var eaV;
            export declare function eaF() { };
                                          ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            export declare class eaC { };
            export declare module eaM { };
        }
        export var eV;
        export function eF() { };
        export class eC {
            constructor () { }
            public pV;
            private rV;
            public pF() { }
            private rF() { }
            public pgF() { }
            public get pgF()
                       ~~~
!!! error TS2300: Duplicate identifier 'pgF'.
                       ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
            public psF(param:any) { }
            ~~~~~~
!!! error TS1005: '{' expected.
            public set psF(param:any)
                       ~~~
!!! error TS2300: Duplicate identifier 'psF'.
            private rgF() { }
            ~~~~~~~
!!! error TS1005: '{' expected.
            private get rgF()
                        ~~~
!!! error TS2300: Duplicate identifier 'rgF'.
                        ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
            private rsF(param:any) { }
            ~~~~~~~
!!! error TS1005: '{' expected.
            private set rsF(param:any)
                        ~~~
!!! error TS2300: Duplicate identifier 'rsF'.
            static tV;
            ~~~~~~
!!! error TS1005: '{' expected.
            static tF() { }
            static tsF(param:any) { }
            static set tsF(param:any)
                       ~~~
!!! error TS2300: Duplicate identifier 'tsF'.
            static tgF() { }
            ~~~~~~
!!! error TS1005: '{' expected.
            static get tgF()
                       ~~~
!!! error TS2300: Duplicate identifier 'tgF'.
                       ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
        }
        ~
!!! error TS1005: '{' expected.
        export interface eI {
            //Call Signature
            ();
            (): number;
            (p);
            (p1: string);
            (p2?: string);
            (...p3: any[]);
            (p4: string, p5?: string);
            (p6: string, ...p7: any[]);
            //(p8?: string, ...p9: any[]);
            //(p10:string, p8?: string, ...p9: any[]);
        
            //Construct Signature
            new ();
            new (): number;
            new (p: string);
            new (p2?: string);
            new (...p3: any[]);
            new (p4: string, p5?: string);
            new (p6: string, ...p7: any[]);
    
            //Index Signature
            [p];
             ~
!!! error TS1022: An index signature parameter must have a type annotation.
            [p1: string];
            ~~~~~~~~~~~~
!!! error TS1021: An index signature must have a type annotation.
            [p2: string, p3: number];
             ~~
!!! error TS1096: An index signature must have exactly one parameter.
    
            //Property Signature
            p;
            p1?;
            p2?: string;
        
            //Function Signature
            p3();
            p4? ();
            p5? (): void;
            p6(pa1): void;
            p7(pa1, pa2): void;
            p7? (pa1, pa2): void;
            ~~
!!! error TS2386: Overload signatures must all be optional or required.
        }
        export module eM {
            var V;
            function F() { };
            class C { };
            interface I { };
            module M { };
            export var eV;
            export function eF() { };
            export class eC { };
            export interface eI { };
            export module eM { };
            export declare var eaV;
            export declare function eaF() { };
                                          ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            export declare class eaC { };
            export declare module eaM { };
        }
        export declare var eaV;
        export declare function eaF() { };
                                      ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        export declare class eaC {
            constructor () { }
                           ~
!!! error TS1111: A constructor implementation cannot be declared in an ambient context.
            public pV;
            private rV;
            public pF() { }
                        ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            private rF() { }
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            public pgF() { }
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            public get pgF()
                       ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                       ~~~
!!! error TS2300: Duplicate identifier 'pgF'.
            public psF(param:any) { }
                                  ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            public set psF(param:any)
                       ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                       ~~~
!!! error TS2300: Duplicate identifier 'psF'.
            private rgF() { }
                          ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            private get rgF()
                        ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                        ~~~
!!! error TS2300: Duplicate identifier 'rgF'.
            private rsF(param:any) { }
                                   ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            private set rsF(param:any)
                        ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                        ~~~
!!! error TS2300: Duplicate identifier 'rsF'.
            static tV;
            static tF() { }
                        ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            static tsF(param:any) { }
                                  ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            static set tsF(param:any)
                       ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                       ~~~
!!! error TS2300: Duplicate identifier 'tsF'.
            static tgF() { }
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            static get tgF()
                       ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                       ~~~
!!! error TS2300: Duplicate identifier 'tgF'.
        }
        export declare module eaM {
            var V;
            function F() { };
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                            ~
!!! error TS1036: Statements are not allowed in ambient contexts.
            class C { }
            interface I { }
            module M { }
            export var eV;
            export function eF() { };
                                 ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                                    ~
!!! error TS1036: Statements are not allowed in ambient contexts.
            export class eC { }
            export interface eI { }
            export module eM { }
        }
    }
    export var eV;
    export function eF() { };
    export class eC {
        constructor () { }
        public pV;
        private rV;
        public pF() { }
        private rF() { }
        public pgF() { }
        public get pgF()
                   ~~~
!!! error TS2300: Duplicate identifier 'pgF'.
                   ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
        public psF(param:any) { }
        ~~~~~~
!!! error TS1005: '{' expected.
        public set psF(param:any)
                   ~~~
!!! error TS2300: Duplicate identifier 'psF'.
        private rgF() { }
        ~~~~~~~
!!! error TS1005: '{' expected.
        private get rgF()
                    ~~~
!!! error TS2300: Duplicate identifier 'rgF'.
                    ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
        private rsF(param:any) { }
        ~~~~~~~
!!! error TS1005: '{' expected.
        private set rsF(param:any)
                    ~~~
!!! error TS2300: Duplicate identifier 'rsF'.
        static tV;
        ~~~~~~
!!! error TS1005: '{' expected.
        static tF() { }
        static tsF(param:any) { }
        static set tsF(param:any)
                   ~~~
!!! error TS2300: Duplicate identifier 'tsF'.
        static tgF() { }
        ~~~~~~
!!! error TS1005: '{' expected.
        static get tgF()
                   ~~~
!!! error TS2300: Duplicate identifier 'tgF'.
                   ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
    }
    ~
!!! error TS1005: '{' expected.
    export interface eI {
        //Call Signature
        ();
        (): number;
        (p);
        (p1: string);
        (p2?: string);
        (...p3: any[]);
        (p4: string, p5?: string);
        (p6: string, ...p7: any[]);
        //(p8?: string, ...p9: any[]);
        //(p10:string, p8?: string, ...p9: any[]);
        
        //Construct Signature
        new ();
        new (): number;
        new (p: string);
        new (p2?: string);
        new (...p3: any[]);
        new (p4: string, p5?: string);
        new (p6: string, ...p7: any[]);
    
        //Index Signature
        [p];
         ~
!!! error TS1022: An index signature parameter must have a type annotation.
        [p1: string];
        ~~~~~~~~~~~~
!!! error TS1021: An index signature must have a type annotation.
        [p2: string, p3: number];
         ~~
!!! error TS1096: An index signature must have exactly one parameter.
    
        //Property Signature
        p;
        p1?;
        p2?: string;
        
        //Function Signature
        p3();
        p4? ();
        p5? (): void;
        p6(pa1): void;
        p7(pa1, pa2): void;
        p7? (pa1, pa2): void;
        ~~
!!! error TS2386: Overload signatures must all be optional or required.
    }
    export module eM {
        var V;
        function F() { };
        class C {
            constructor () { }
            public pV;
            private rV;
            public pF() { }
            private rF() { }
            public pgF() { }
            public get pgF()
                       ~~~
!!! error TS2300: Duplicate identifier 'pgF'.
                       ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
            public psF(param:any) { }
            ~~~~~~
!!! error TS1005: '{' expected.
            public set psF(param:any)
                       ~~~
!!! error TS2300: Duplicate identifier 'psF'.
            private rgF() { }
            ~~~~~~~
!!! error TS1005: '{' expected.
            private get rgF()
                        ~~~
!!! error TS2300: Duplicate identifier 'rgF'.
                        ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
            private rsF(param:any) { }
            ~~~~~~~
!!! error TS1005: '{' expected.
            private set rsF(param:any)
                        ~~~
!!! error TS2300: Duplicate identifier 'rsF'.
            static tV;
            ~~~~~~
!!! error TS1005: '{' expected.
            static tF() { }
            static tsF(param:any) { }
            static set tsF(param:any)
                       ~~~
!!! error TS2300: Duplicate identifier 'tsF'.
            static tgF() { }
            ~~~~~~
!!! error TS1005: '{' expected.
            static get tgF()
                       ~~~
!!! error TS2300: Duplicate identifier 'tgF'.
                       ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
        }
        ~
!!! error TS1005: '{' expected.
        interface I {
            //Call Signature
            ();
            (): number;
            (p);
            (p1: string);
            (p2?: string);
            (...p3: any[]);
            (p4: string, p5?: string);
            (p6: string, ...p7: any[]);
            //(p8?: string, ...p9: any[]);
            //(p10:string, p8?: string, ...p9: any[]);
        
            //Construct Signature
            new ();
            new (): number;
            new (p: string);
            new (p2?: string);
            new (...p3: any[]);
            new (p4: string, p5?: string);
            new (p6: string, ...p7: any[]);
    
            //Index Signature
            [p];
             ~
!!! error TS1022: An index signature parameter must have a type annotation.
            [p1: string];
            ~~~~~~~~~~~~
!!! error TS1021: An index signature must have a type annotation.
            [p2: string, p3: number];
             ~~
!!! error TS1096: An index signature must have exactly one parameter.
    
            //Property Signature
            p;
            p1?;
            p2?: string;
        
            //Function Signature
            p3();
            p4? ();
            p5? (): void;
            p6(pa1): void;
            p7(pa1, pa2): void;
            p7? (pa1, pa2): void;
            ~~
!!! error TS2386: Overload signatures must all be optional or required.
        }
        module M {
            var V;
            function F() { };
            class C { };
            interface I { };
            module M { };
            export var eV;
            export function eF() { };
            export class eC { };
            export interface eI { };
            export module eM { };
            export declare var eaV;
            export declare function eaF() { };
                                          ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            export declare class eaC { };
            export declare module eaM { };
        }
        export var eV;
        export function eF() { };
        export class eC {
            constructor () { }
            public pV;
            private rV;
            public pF() { }
            private rF() { }
            public pgF() { }
            public get pgF()
                       ~~~
!!! error TS2300: Duplicate identifier 'pgF'.
                       ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
            public psF(param:any) { }
            ~~~~~~
!!! error TS1005: '{' expected.
            public set psF(param:any)
                       ~~~
!!! error TS2300: Duplicate identifier 'psF'.
            private rgF() { }
            ~~~~~~~
!!! error TS1005: '{' expected.
            private get rgF()
                        ~~~
!!! error TS2300: Duplicate identifier 'rgF'.
                        ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
            private rsF(param:any) { }
            ~~~~~~~
!!! error TS1005: '{' expected.
            private set rsF(param:any)
                        ~~~
!!! error TS2300: Duplicate identifier 'rsF'.
            static tV;
            ~~~~~~
!!! error TS1005: '{' expected.
            static tF() { }
            static tsF(param:any) { }
            static set tsF(param:any)
                       ~~~
!!! error TS2300: Duplicate identifier 'tsF'.
            static tgF() { }
            ~~~~~~
!!! error TS1005: '{' expected.
            static get tgF()
                       ~~~
!!! error TS2300: Duplicate identifier 'tgF'.
                       ~~~
!!! error TS2378: A 'get' accessor must return a value or consist of a single 'throw' statement.
        }
        ~
!!! error TS1005: '{' expected.
        export interface eI {
            //Call Signature
            ();
            (): number;
            (p);
            (p1: string);
            (p2?: string);
            (...p3: any[]);
            (p4: string, p5?: string);
            (p6: string, ...p7: any[]);
            //(p8?: string, ...p9: any[]);
            //(p10:string, p8?: string, ...p9: any[]);
        
            //Construct Signature
            new ();
            new (): number;
            new (p: string);
            new (p2?: string);
            new (...p3: any[]);
            new (p4: string, p5?: string);
            new (p6: string, ...p7: any[]);
    
            //Index Signature
            [p];
             ~
!!! error TS1022: An index signature parameter must have a type annotation.
            [p1: string];
            ~~~~~~~~~~~~
!!! error TS1021: An index signature must have a type annotation.
            [p2: string, p3: number];
             ~~
!!! error TS1096: An index signature must have exactly one parameter.
    
            //Property Signature
            p;
            p1?;
            p2?: string;
        
            //Function Signature
            p3();
            p4? ();
            p5? (): void;
            p6(pa1): void;
            p7(pa1, pa2): void;
            p7? (pa1, pa2): void;
            ~~
!!! error TS2386: Overload signatures must all be optional or required.
        }
        export module eM {
            var V;
            function F() { };
            class C { };
            interface I { };
            module M { };
            export var eV;
            export function eF() { };
            export class eC { };
            export interface eI { };
            export module eM { };
            export declare var eaV;
            export declare function eaF() { };
                                          ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            export declare class eaC { };
            export declare module eaM { };
        }
        export declare var eaV;
        export declare function eaF() { };
                                      ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        export declare class eaC {
            constructor () { }
                           ~
!!! error TS1111: A constructor implementation cannot be declared in an ambient context.
            public pV;
            private rV;
            public pF() { }
                        ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            private rF() { }
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            public pgF() { }
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            public get pgF()
                       ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                       ~~~
!!! error TS2300: Duplicate identifier 'pgF'.
            public psF(param:any) { }
                                  ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            public set psF(param:any)
                       ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                       ~~~
!!! error TS2300: Duplicate identifier 'psF'.
            private rgF() { }
                          ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            private get rgF()
                        ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                        ~~~
!!! error TS2300: Duplicate identifier 'rgF'.
            private rsF(param:any) { }
                                   ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            private set rsF(param:any)
                        ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                        ~~~
!!! error TS2300: Duplicate identifier 'rsF'.
            static tV;
            static tF() { }
                        ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            static tsF(param:any) { }
                                  ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            static set tsF(param:any)
                       ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                       ~~~
!!! error TS2300: Duplicate identifier 'tsF'.
            static tgF() { }
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            static get tgF()
                       ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                       ~~~
!!! error TS2300: Duplicate identifier 'tgF'.
        }
        export declare module eaM {
            var V;
            function F() { };
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                            ~
!!! error TS1036: Statements are not allowed in ambient contexts.
            class C { }
            interface I { }
            module M { }
            export var eV;
            export function eF() { };
                                 ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                                    ~
!!! error TS1036: Statements are not allowed in ambient contexts.
            export class eC { }
            export interface eI { }
            export module eM { }
        }
    }
    export declare var eaV;
    export declare function eaF() { };
                                  ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
    export declare class eaC {
        constructor () { }
                       ~
!!! error TS1111: A constructor implementation cannot be declared in an ambient context.
        public pV;
        private rV;
        public pF() { }
                    ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        private rF() { }
                     ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        public pgF() { }
                     ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        public get pgF()
                   ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                   ~~~
!!! error TS2300: Duplicate identifier 'pgF'.
        public psF(param:any) { }
                              ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        public set psF(param:any)
                   ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                   ~~~
!!! error TS2300: Duplicate identifier 'psF'.
        private rgF() { }
                      ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        private get rgF()
                    ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                    ~~~
!!! error TS2300: Duplicate identifier 'rgF'.
        private rsF(param:any) { }
                               ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        private set rsF(param:any)
                    ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                    ~~~
!!! error TS2300: Duplicate identifier 'rsF'.
        static tV;
        static tF() { }
                    ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        static tsF(param:any) { }
                              ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        static set tsF(param:any)
                   ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                   ~~~
!!! error TS2300: Duplicate identifier 'tsF'.
        static tgF() { }
                     ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        static get tgF()
                   ~~~
!!! error TS1056: Accessors are only available when targeting ECMAScript 5 and higher.
                   ~~~
!!! error TS2300: Duplicate identifier 'tgF'.
    }
    export declare module eaM {
        var V;
        function F() { };
                     ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                        ~
!!! error TS1036: Statements are not allowed in ambient contexts.
        class C {
            constructor () { }
                           ~
!!! error TS1111: A constructor implementation cannot be declared in an ambient context.
            public pV;
            private rV;
            public pF() { }
                        ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            static tV;
            static tF() { }
                        ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        }
        interface I {
            //Call Signature
            ();
            (): number;
            (p: string);
            (p2?: string);
            (...p3: any[]);
            (p4: string, p5?: string);
            (p6: string, ...p7: any[]);
            //(p8?: string, ...p9: any[]);
            //(p10:string, p8?: string, ...p9: any[]);
        
            //Construct Signature
            new ();
            new (): number;
            new (p: string);
            new (p2?: string);
            new (...p3: any[]);
            new (p4: string, p5?: string);
            new (p6: string, ...p7: any[]);
    
            //Index Signature
            [p];
             ~
!!! error TS1022: An index signature parameter must have a type annotation.
            [p1: string];
            ~~~~~~~~~~~~
!!! error TS1021: An index signature must have a type annotation.
            [p2: string, p3: number];
             ~~
!!! error TS1096: An index signature must have exactly one parameter.
    
            //Property Signature
            p;
            p1?;
            p2?: string;
        
            //Function Signature
            p3();
            p4? ();
            p5? (): void;
            p6(pa1): void;
            p7(pa1, pa2): void;
            p7? (pa1, pa2): void;
            ~~
!!! error TS2386: Overload signatures must all be optional or required.
        }
        module M {
            var V;
            function F() { };
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                            ~
!!! error TS1036: Statements are not allowed in ambient contexts.
            class C { }
            interface I { }
            module M { }
            export var eV;
            export function eF() { };
                                 ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                                    ~
!!! error TS1036: Statements are not allowed in ambient contexts.
            export class eC { }
            export interface eI { }
            export module eM { }
            export declare var eaV
                   ~~~~~~~
!!! error TS1038: A 'declare' modifier cannot be used in an already ambient context.
            export declare function eaF() { };
                   ~~~~~~~
!!! error TS1038: A 'declare' modifier cannot be used in an already ambient context.
                                          ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                                             ~
!!! error TS1036: Statements are not allowed in ambient contexts.
            export declare class eaC { }
                   ~~~~~~~
!!! error TS1038: A 'declare' modifier cannot be used in an already ambient context.
            export declare module eaM { }
                   ~~~~~~~
!!! error TS1038: A 'declare' modifier cannot be used in an already ambient context.
        }
        export var eV;
        export function eF() { };
                             ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                                ~
!!! error TS1036: Statements are not allowed in ambient contexts.
        export class eC {
            constructor () { }
                           ~
!!! error TS1111: A constructor implementation cannot be declared in an ambient context.
            public pV;
            private rV;
            public pF() { }
                        ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
            static tV
            static tF() { }
                        ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
        }
        export interface eI {
            //Call Signature
            ();
            (): number;
            (p);
            (p1: string);
            (p2?: string);
            (...p3: any[]);
            (p4: string, p5?: string);
            (p6: string, ...p7: any[]);
            //(p8?: string, ...p9: any[]);
            //(p10:string, p8?: string, ...p9: any[]);
        
            //Construct Signature
            new ();
            new (): number;
            new (p: string);
            new (p2?: string);
            new (...p3: any[]);
            new (p4: string, p5?: string);
            new (p6: string, ...p7: any[]);
    
            //Index Signature
            [p];
             ~
!!! error TS1022: An index signature parameter must have a type annotation.
            [p1: string];
            ~~~~~~~~~~~~
!!! error TS1021: An index signature must have a type annotation.
            [p2: string, p3: number];
             ~~
!!! error TS1096: An index signature must have exactly one parameter.
    
            //Property Signature
            p;
            p1?;
            p2?: string;
        
            //Function Signature
            p3();
            p4? ();
            p5? (): void;
            p6(pa1): void;
            p7(pa1, pa2): void;
            p7? (pa1, pa2): void;
            ~~
!!! error TS2386: Overload signatures must all be optional or required.
        }
        export module eM {
            var V;
            function F() { };
                         ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                            ~
!!! error TS1036: Statements are not allowed in ambient contexts.
            class C { }
            module M { }
            export var eV;
            export function eF() { };
                                 ~
!!! error TS1037: A function implementation cannot be declared in an ambient context.
                                    ~
!!! error TS1036: Statements are not allowed in ambient contexts.
            export class eC { }
            export interface eI { }
            export module eM { }
        }
    }