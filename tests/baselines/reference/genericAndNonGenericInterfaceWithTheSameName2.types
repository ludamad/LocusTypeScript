=== tests/cases/conformance/interfaces/declarationMerging/genericAndNonGenericInterfaceWithTheSameName2.ts ===
// generic and non-generic interfaces with the same name do not merge

module M {
>M : any, Symbol(M,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,0,0))

    interface A<T> {
>A : A<T>, Symbol(A,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,2,10))
>T : T, Symbol(T,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,3,16))

        bar: T;
>bar : T, Symbol(bar,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,3,20))
>T : T, Symbol(T,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,3,16))
    }
}

module M2 {
>M2 : any, Symbol(M2,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,6,1))

    interface A { // ok
>A : A, Symbol(A,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,8,11))

        foo: string;
>foo : string, Symbol(foo,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,9,17))
    }
}

module N {
>N : any, Symbol(N,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,12,1))

    module M {
>M : any, Symbol(M,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,14,10))

        interface A<T> {
>A : A<T>, Symbol(A,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,15,14))
>T : T, Symbol(T,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,16,20))

            bar: T;
>bar : T, Symbol(bar,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,16,24))
>T : T, Symbol(T,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,16,20))
        }
    }

    module M2 {
>M2 : any, Symbol(M2,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,19,5))

        interface A { // ok
>A : A, Symbol(A,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,21,15))

            foo: string;
>foo : string, Symbol(foo,Decl(genericAndNonGenericInterfaceWithTheSameName2.ts,22,21))
        }
    }
}
