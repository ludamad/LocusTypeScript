=== tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithNumberType.ts ===
// typeof  operator on number type
var NUMBER: number;
>NUMBER : number, Symbol(NUMBER,Decl(typeofOperatorWithNumberType.ts,1,3))

var NUMBER1: number[] = [1, 2];
>NUMBER1 : number[], Symbol(NUMBER1,Decl(typeofOperatorWithNumberType.ts,2,3))
>[1, 2] : number[]
>1 : number
>2 : number

function foo(): number { return 1; }
>foo : () => number, Symbol(foo,Decl(typeofOperatorWithNumberType.ts,2,31))
>1 : number

class A {
>A : A, Symbol(A,Decl(typeofOperatorWithNumberType.ts,4,36))

    public a: number;
>a : number, Symbol(a,Decl(typeofOperatorWithNumberType.ts,6,9))

    static foo() { return 1; }
>foo : () => number, Symbol(A.foo,Decl(typeofOperatorWithNumberType.ts,7,21))
>1 : number
}
module M {
>M : typeof M, Symbol(M,Decl(typeofOperatorWithNumberType.ts,9,1))

    export var n: number;
>n : number, Symbol(n,Decl(typeofOperatorWithNumberType.ts,11,14))
}

var objA = new A();
>objA : A, Symbol(objA,Decl(typeofOperatorWithNumberType.ts,14,3))
>new A() : A
>A : typeof A, Symbol(A,Decl(typeofOperatorWithNumberType.ts,4,36))

// number type var
var ResultIsString1 = typeof NUMBER;
>ResultIsString1 : string, Symbol(ResultIsString1,Decl(typeofOperatorWithNumberType.ts,17,3))
>typeof NUMBER : string
>NUMBER : number, Symbol(NUMBER,Decl(typeofOperatorWithNumberType.ts,1,3))

var ResultIsString2 = typeof NUMBER1;
>ResultIsString2 : string, Symbol(ResultIsString2,Decl(typeofOperatorWithNumberType.ts,18,3))
>typeof NUMBER1 : string
>NUMBER1 : number[], Symbol(NUMBER1,Decl(typeofOperatorWithNumberType.ts,2,3))

// number type literal
var ResultIsString3 = typeof 1;
>ResultIsString3 : string, Symbol(ResultIsString3,Decl(typeofOperatorWithNumberType.ts,21,3))
>typeof 1 : string
>1 : number

var ResultIsString4 = typeof { x: 1, y: 2};
>ResultIsString4 : string, Symbol(ResultIsString4,Decl(typeofOperatorWithNumberType.ts,22,3))
>typeof { x: 1, y: 2} : string
>{ x: 1, y: 2} : { x: number; y: number; }
>x : number, Symbol(x,Decl(typeofOperatorWithNumberType.ts,22,30))
>1 : number
>y : number, Symbol(y,Decl(typeofOperatorWithNumberType.ts,22,36))
>2 : number

var ResultIsString5 = typeof { x: 1, y: (n: number) => { return n; } };
>ResultIsString5 : string, Symbol(ResultIsString5,Decl(typeofOperatorWithNumberType.ts,23,3))
>typeof { x: 1, y: (n: number) => { return n; } } : string
>{ x: 1, y: (n: number) => { return n; } } : { x: number; y: (n: number) => number; }
>x : number, Symbol(x,Decl(typeofOperatorWithNumberType.ts,23,30))
>1 : number
>y : (n: number) => number, Symbol(y,Decl(typeofOperatorWithNumberType.ts,23,36))
>(n: number) => { return n; } : (n: number) => number
>n : number, Symbol(n,Decl(typeofOperatorWithNumberType.ts,23,41))
>n : number, Symbol(n,Decl(typeofOperatorWithNumberType.ts,23,41))

// number type expressions
var ResultIsString6 = typeof objA.a;
>ResultIsString6 : string, Symbol(ResultIsString6,Decl(typeofOperatorWithNumberType.ts,26,3))
>typeof objA.a : string
>objA.a : number, Symbol(A.a,Decl(typeofOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(typeofOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(typeofOperatorWithNumberType.ts,6,9))

var ResultIsString7 = typeof M.n;
>ResultIsString7 : string, Symbol(ResultIsString7,Decl(typeofOperatorWithNumberType.ts,27,3))
>typeof M.n : string
>M.n : number, Symbol(M.n,Decl(typeofOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(typeofOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(typeofOperatorWithNumberType.ts,11,14))

var ResultIsString8 = typeof NUMBER1[0];
>ResultIsString8 : string, Symbol(ResultIsString8,Decl(typeofOperatorWithNumberType.ts,28,3))
>typeof NUMBER1[0] : string
>NUMBER1[0] : number
>NUMBER1 : number[], Symbol(NUMBER1,Decl(typeofOperatorWithNumberType.ts,2,3))
>0 : number

var ResultIsString9 = typeof foo();
>ResultIsString9 : string, Symbol(ResultIsString9,Decl(typeofOperatorWithNumberType.ts,29,3))
>typeof foo() : string
>foo() : number
>foo : () => number, Symbol(foo,Decl(typeofOperatorWithNumberType.ts,2,31))

var ResultIsString10 = typeof A.foo();
>ResultIsString10 : string, Symbol(ResultIsString10,Decl(typeofOperatorWithNumberType.ts,30,3))
>typeof A.foo() : string
>A.foo() : number
>A.foo : () => number, Symbol(A.foo,Decl(typeofOperatorWithNumberType.ts,7,21))
>A : typeof A, Symbol(A,Decl(typeofOperatorWithNumberType.ts,4,36))
>foo : () => number, Symbol(A.foo,Decl(typeofOperatorWithNumberType.ts,7,21))

var ResultIsString11 = typeof (NUMBER + NUMBER);
>ResultIsString11 : string, Symbol(ResultIsString11,Decl(typeofOperatorWithNumberType.ts,31,3))
>typeof (NUMBER + NUMBER) : string
>(NUMBER + NUMBER) : number
>NUMBER + NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(typeofOperatorWithNumberType.ts,1,3))
>NUMBER : number, Symbol(NUMBER,Decl(typeofOperatorWithNumberType.ts,1,3))

// multiple typeof  operators
var ResultIsString12 = typeof typeof NUMBER;
>ResultIsString12 : string, Symbol(ResultIsString12,Decl(typeofOperatorWithNumberType.ts,34,3))
>typeof typeof NUMBER : string
>typeof NUMBER : string
>NUMBER : number, Symbol(NUMBER,Decl(typeofOperatorWithNumberType.ts,1,3))

var ResultIsString13 = typeof typeof typeof (NUMBER + NUMBER);
>ResultIsString13 : string, Symbol(ResultIsString13,Decl(typeofOperatorWithNumberType.ts,35,3))
>typeof typeof typeof (NUMBER + NUMBER) : string
>typeof typeof (NUMBER + NUMBER) : string
>typeof (NUMBER + NUMBER) : string
>(NUMBER + NUMBER) : number
>NUMBER + NUMBER : number
>NUMBER : number, Symbol(NUMBER,Decl(typeofOperatorWithNumberType.ts,1,3))
>NUMBER : number, Symbol(NUMBER,Decl(typeofOperatorWithNumberType.ts,1,3))

// miss assignment operators
typeof 1;
>typeof 1 : string
>1 : number

typeof NUMBER;
>typeof NUMBER : string
>NUMBER : number, Symbol(NUMBER,Decl(typeofOperatorWithNumberType.ts,1,3))

typeof NUMBER1;
>typeof NUMBER1 : string
>NUMBER1 : number[], Symbol(NUMBER1,Decl(typeofOperatorWithNumberType.ts,2,3))

typeof foo();
>typeof foo() : string
>foo() : number
>foo : () => number, Symbol(foo,Decl(typeofOperatorWithNumberType.ts,2,31))

typeof objA.a;
>typeof objA.a : string
>objA.a : number, Symbol(A.a,Decl(typeofOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(typeofOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(typeofOperatorWithNumberType.ts,6,9))

typeof M.n;
>typeof M.n : string
>M.n : number, Symbol(M.n,Decl(typeofOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(typeofOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(typeofOperatorWithNumberType.ts,11,14))

typeof objA.a, M.n;
>typeof objA.a, M.n : number
>typeof objA.a : string
>objA.a : number, Symbol(A.a,Decl(typeofOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(typeofOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(typeofOperatorWithNumberType.ts,6,9))
>M.n : number, Symbol(M.n,Decl(typeofOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(typeofOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(typeofOperatorWithNumberType.ts,11,14))

// use typeof in type query
var z: number;
>z : number, Symbol(z,Decl(typeofOperatorWithNumberType.ts,47,3))

var x: number[];
>x : number[], Symbol(x,Decl(typeofOperatorWithNumberType.ts,48,3))

z: typeof NUMBER;
>z : any
>typeof NUMBER : string
>NUMBER : number, Symbol(NUMBER,Decl(typeofOperatorWithNumberType.ts,1,3))

x: typeof NUMBER1;
>x : any
>typeof NUMBER1 : string
>NUMBER1 : number[], Symbol(NUMBER1,Decl(typeofOperatorWithNumberType.ts,2,3))

r: typeof foo;
>r : any
>typeof foo : string
>foo : () => number, Symbol(foo,Decl(typeofOperatorWithNumberType.ts,2,31))

var y = { a: 1, b: 2 };
>y : { a: number; b: number; }, Symbol(y,Decl(typeofOperatorWithNumberType.ts,52,3))
>{ a: 1, b: 2 } : { a: number; b: number; }
>a : number, Symbol(a,Decl(typeofOperatorWithNumberType.ts,52,9))
>1 : number
>b : number, Symbol(b,Decl(typeofOperatorWithNumberType.ts,52,15))
>2 : number

z: typeof y.a;
>z : any
>typeof y.a : string
>y.a : number, Symbol(a,Decl(typeofOperatorWithNumberType.ts,52,9))
>y : { a: number; b: number; }, Symbol(y,Decl(typeofOperatorWithNumberType.ts,52,3))
>a : number, Symbol(a,Decl(typeofOperatorWithNumberType.ts,52,9))

z: typeof objA.a;
>z : any
>typeof objA.a : string
>objA.a : number, Symbol(A.a,Decl(typeofOperatorWithNumberType.ts,6,9))
>objA : A, Symbol(objA,Decl(typeofOperatorWithNumberType.ts,14,3))
>a : number, Symbol(A.a,Decl(typeofOperatorWithNumberType.ts,6,9))

z: typeof A.foo;
>z : any
>typeof A.foo : string
>A.foo : () => number, Symbol(A.foo,Decl(typeofOperatorWithNumberType.ts,7,21))
>A : typeof A, Symbol(A,Decl(typeofOperatorWithNumberType.ts,4,36))
>foo : () => number, Symbol(A.foo,Decl(typeofOperatorWithNumberType.ts,7,21))

z: typeof M.n;
>z : any
>typeof M.n : string
>M.n : number, Symbol(M.n,Decl(typeofOperatorWithNumberType.ts,11,14))
>M : typeof M, Symbol(M,Decl(typeofOperatorWithNumberType.ts,9,1))
>n : number, Symbol(M.n,Decl(typeofOperatorWithNumberType.ts,11,14))

