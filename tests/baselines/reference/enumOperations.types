=== tests/cases/compiler/enumOperations.ts ===
enum Enum { None = 0 }
>Enum : Enum, Symbol(Enum,Decl(enumOperations.ts,0,0))
>None : Enum, Symbol(Enum.None,Decl(enumOperations.ts,0,11))
>0 : number

var enumType: Enum = Enum.None;
>enumType : Enum, Symbol(enumType,Decl(enumOperations.ts,1,3))
>Enum : Enum, Symbol(Enum,Decl(enumOperations.ts,0,0))
>Enum.None : Enum, Symbol(Enum.None,Decl(enumOperations.ts,0,11))
>Enum : typeof Enum, Symbol(Enum,Decl(enumOperations.ts,0,0))
>None : Enum, Symbol(Enum.None,Decl(enumOperations.ts,0,11))

var numberType: number = 0;
>numberType : number, Symbol(numberType,Decl(enumOperations.ts,2,3))
>0 : number

var anyType: any = 0;
>anyType : any, Symbol(anyType,Decl(enumOperations.ts,3,3))
>0 : number
 
enumType ^ numberType;
>enumType ^ numberType : number
>enumType : Enum, Symbol(enumType,Decl(enumOperations.ts,1,3))
>numberType : number, Symbol(numberType,Decl(enumOperations.ts,2,3))

numberType ^ anyType;
>numberType ^ anyType : number
>numberType : number, Symbol(numberType,Decl(enumOperations.ts,2,3))
>anyType : any, Symbol(anyType,Decl(enumOperations.ts,3,3))
 
enumType & anyType;
>enumType & anyType : number
>enumType : Enum, Symbol(enumType,Decl(enumOperations.ts,1,3))
>anyType : any, Symbol(anyType,Decl(enumOperations.ts,3,3))

enumType | anyType;
>enumType | anyType : number
>enumType : Enum, Symbol(enumType,Decl(enumOperations.ts,1,3))
>anyType : any, Symbol(anyType,Decl(enumOperations.ts,3,3))

enumType ^ anyType;
>enumType ^ anyType : number
>enumType : Enum, Symbol(enumType,Decl(enumOperations.ts,1,3))
>anyType : any, Symbol(anyType,Decl(enumOperations.ts,3,3))

~anyType;
>~anyType : number
>anyType : any, Symbol(anyType,Decl(enumOperations.ts,3,3))

enumType <<anyType;
>enumType <<anyType : number
>enumType : Enum, Symbol(enumType,Decl(enumOperations.ts,1,3))
>anyType : any, Symbol(anyType,Decl(enumOperations.ts,3,3))

enumType >>anyType;
>enumType >>anyType : number
>enumType : Enum, Symbol(enumType,Decl(enumOperations.ts,1,3))
>anyType : any, Symbol(anyType,Decl(enumOperations.ts,3,3))

enumType >>>anyType;
>enumType >>>anyType : number
>enumType : Enum, Symbol(enumType,Decl(enumOperations.ts,1,3))
>anyType : any, Symbol(anyType,Decl(enumOperations.ts,3,3))

