=== tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendingClass.ts ===
class C {
>C : C, Symbol(C, Decl(classExtendingClass.ts, 0, 0))

    foo: string;
>foo : string, Symbol(foo, Decl(classExtendingClass.ts, 0, 9))

    thing() { }
>thing : () => void, Symbol(thing, Decl(classExtendingClass.ts, 1, 16))

    static other() { }
>other : () => void, Symbol(C.other, Decl(classExtendingClass.ts, 2, 15))
}

class D extends C {
>D : D, Symbol(D, Decl(classExtendingClass.ts, 4, 1))
>C : C, Symbol(C, Decl(classExtendingClass.ts, 0, 0))

    bar: string;
>bar : string, Symbol(bar, Decl(classExtendingClass.ts, 6, 19))
}

var d: D;
>d : D, Symbol(d, Decl(classExtendingClass.ts, 10, 3))
>D : D, Symbol(D, Decl(classExtendingClass.ts, 4, 1))

var r = d.foo;
>r : string, Symbol(r, Decl(classExtendingClass.ts, 11, 3))
>d.foo : string, Symbol(C.foo, Decl(classExtendingClass.ts, 0, 9))
>d : D, Symbol(d, Decl(classExtendingClass.ts, 10, 3))
>foo : string, Symbol(C.foo, Decl(classExtendingClass.ts, 0, 9))

var r2 = d.bar;
>r2 : string, Symbol(r2, Decl(classExtendingClass.ts, 12, 3))
>d.bar : string, Symbol(D.bar, Decl(classExtendingClass.ts, 6, 19))
>d : D, Symbol(d, Decl(classExtendingClass.ts, 10, 3))
>bar : string, Symbol(D.bar, Decl(classExtendingClass.ts, 6, 19))

var r3 = d.thing();
>r3 : void, Symbol(r3, Decl(classExtendingClass.ts, 13, 3))
>d.thing() : void
>d.thing : () => void, Symbol(C.thing, Decl(classExtendingClass.ts, 1, 16))
>d : D, Symbol(d, Decl(classExtendingClass.ts, 10, 3))
>thing : () => void, Symbol(C.thing, Decl(classExtendingClass.ts, 1, 16))

var r4 = D.other();
>r4 : void, Symbol(r4, Decl(classExtendingClass.ts, 14, 3))
>D.other() : void
>D.other : () => void, Symbol(C.other, Decl(classExtendingClass.ts, 2, 15))
>D : typeof D, Symbol(D, Decl(classExtendingClass.ts, 4, 1))
>other : () => void, Symbol(C.other, Decl(classExtendingClass.ts, 2, 15))

class C2<T> {
>C2 : C2<T>, Symbol(C2, Decl(classExtendingClass.ts, 14, 19))
>T : T, Symbol(T, Decl(classExtendingClass.ts, 16, 9))

    foo: T;
>foo : T, Symbol(foo, Decl(classExtendingClass.ts, 16, 13))
>T : T, Symbol(T, Decl(classExtendingClass.ts, 16, 9))

    thing(x: T) { }
>thing : (x: T) => void, Symbol(thing, Decl(classExtendingClass.ts, 17, 11))
>x : T, Symbol(x, Decl(classExtendingClass.ts, 18, 10))
>T : T, Symbol(T, Decl(classExtendingClass.ts, 16, 9))

    static other<T>(x: T) { }
>other : <T>(x: T) => void, Symbol(C2.other, Decl(classExtendingClass.ts, 18, 19))
>T : T, Symbol(T, Decl(classExtendingClass.ts, 19, 17))
>x : T, Symbol(x, Decl(classExtendingClass.ts, 19, 20))
>T : T, Symbol(T, Decl(classExtendingClass.ts, 19, 17))
}

class D2<T> extends C2<T> {
>D2 : D2<T>, Symbol(D2, Decl(classExtendingClass.ts, 20, 1))
>T : T, Symbol(T, Decl(classExtendingClass.ts, 22, 9))
>C2 : C2<T>, Symbol(C2, Decl(classExtendingClass.ts, 14, 19))
>T : T, Symbol(T, Decl(classExtendingClass.ts, 22, 9))

    bar: string;
>bar : string, Symbol(bar, Decl(classExtendingClass.ts, 22, 27))
}

var d2: D2<string>;
>d2 : D2<string>, Symbol(d2, Decl(classExtendingClass.ts, 26, 3))
>D2 : D2<T>, Symbol(D2, Decl(classExtendingClass.ts, 20, 1))

var r5 = d2.foo;
>r5 : string, Symbol(r5, Decl(classExtendingClass.ts, 27, 3))
>d2.foo : string, Symbol(C2.foo, Decl(classExtendingClass.ts, 16, 13))
>d2 : D2<string>, Symbol(d2, Decl(classExtendingClass.ts, 26, 3))
>foo : string, Symbol(C2.foo, Decl(classExtendingClass.ts, 16, 13))

var r6 = d2.bar;
>r6 : string, Symbol(r6, Decl(classExtendingClass.ts, 28, 3))
>d2.bar : string, Symbol(D2.bar, Decl(classExtendingClass.ts, 22, 27))
>d2 : D2<string>, Symbol(d2, Decl(classExtendingClass.ts, 26, 3))
>bar : string, Symbol(D2.bar, Decl(classExtendingClass.ts, 22, 27))

var r7 = d2.thing('');
>r7 : void, Symbol(r7, Decl(classExtendingClass.ts, 29, 3))
>d2.thing('') : void
>d2.thing : (x: string) => void, Symbol(C2.thing, Decl(classExtendingClass.ts, 17, 11))
>d2 : D2<string>, Symbol(d2, Decl(classExtendingClass.ts, 26, 3))
>thing : (x: string) => void, Symbol(C2.thing, Decl(classExtendingClass.ts, 17, 11))
>'' : string

var r8 = D2.other(1);
>r8 : void, Symbol(r8, Decl(classExtendingClass.ts, 30, 3))
>D2.other(1) : void
>D2.other : <T>(x: T) => void, Symbol(C2.other, Decl(classExtendingClass.ts, 18, 19))
>D2 : typeof D2, Symbol(D2, Decl(classExtendingClass.ts, 20, 1))
>other : <T>(x: T) => void, Symbol(C2.other, Decl(classExtendingClass.ts, 18, 19))
>1 : number

