=== tests/cases/compiler/m7Bugs.ts ===
// scenario 1
interface ISomething {
>ISomething : ISomething, Symbol(ISomething, Decl(m7Bugs.ts, 0, 0))

   something: number;
>something : number, Symbol(something, Decl(m7Bugs.ts, 1, 22))
}

var s: ISomething = <ISomething>({ });
>s : ISomething, Symbol(s, Decl(m7Bugs.ts, 5, 3))
>ISomething : ISomething, Symbol(ISomething, Decl(m7Bugs.ts, 0, 0))
><ISomething>({ }) : ISomething
>ISomething : ISomething, Symbol(ISomething, Decl(m7Bugs.ts, 0, 0))
>({ }) : {}
>{ } : {}


// scenario 2
interface A { x: string; }
>A : A, Symbol(A, Decl(m7Bugs.ts, 5, 38))
>x : string, Symbol(x, Decl(m7Bugs.ts, 9, 13))

interface B extends A { }
>B : B, Symbol(B, Decl(m7Bugs.ts, 9, 26))
>A : A, Symbol(A, Decl(m7Bugs.ts, 5, 38))

var x: B = <B>{ };
>x : B, Symbol(x, Decl(m7Bugs.ts, 13, 3))
>B : B, Symbol(B, Decl(m7Bugs.ts, 9, 26))
><B>{ } : B
>B : B, Symbol(B, Decl(m7Bugs.ts, 9, 26))
>{ } : {}

class C1 {
>C1 : C1, Symbol(C1, Decl(m7Bugs.ts, 13, 18))

	public x: string;
>x : string, Symbol(x, Decl(m7Bugs.ts, 15, 10))
}

class C2 extends C1 {}
>C2 : C2, Symbol(C2, Decl(m7Bugs.ts, 17, 1))
>C1 : C1, Symbol(C1, Decl(m7Bugs.ts, 13, 18))

var y1: C1 = new C2();
>y1 : C1, Symbol(y1, Decl(m7Bugs.ts, 21, 3))
>C1 : C1, Symbol(C1, Decl(m7Bugs.ts, 13, 18))
>new C2() : C2
>C2 : typeof C2, Symbol(C2, Decl(m7Bugs.ts, 17, 1))

var y2: C1 = <C1> new C2();
>y2 : C1, Symbol(y2, Decl(m7Bugs.ts, 22, 3))
>C1 : C1, Symbol(C1, Decl(m7Bugs.ts, 13, 18))
><C1> new C2() : C1
>C1 : C1, Symbol(C1, Decl(m7Bugs.ts, 13, 18))
>new C2() : C2
>C2 : typeof C2, Symbol(C2, Decl(m7Bugs.ts, 17, 1))

var y3: C1 = <C1> {};
>y3 : C1, Symbol(y3, Decl(m7Bugs.ts, 23, 3))
>C1 : C1, Symbol(C1, Decl(m7Bugs.ts, 13, 18))
><C1> {} : C1
>C1 : C1, Symbol(C1, Decl(m7Bugs.ts, 13, 18))
>{} : {}


