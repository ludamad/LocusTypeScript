=== tests/cases/compiler/promiseChaining.ts ===
class Chain<T> {
>Chain : Chain<T>, Symbol(Chain,Decl(promiseChaining.ts,0,0))
>T : T, Symbol(T,Decl(promiseChaining.ts,0,12))

    constructor(public value: T) { }
>value : T, Symbol(value,Decl(promiseChaining.ts,1,16))
>T : T, Symbol(T,Decl(promiseChaining.ts,0,12))

    then<S>(cb: (x: T) => S): Chain<S> {
>then : <S>(cb: (x: T) => S) => Chain<S>, Symbol(then,Decl(promiseChaining.ts,1,36))
>S : S, Symbol(S,Decl(promiseChaining.ts,2,9))
>cb : (x: T) => S, Symbol(cb,Decl(promiseChaining.ts,2,12))
>x : T, Symbol(x,Decl(promiseChaining.ts,2,17))
>T : T, Symbol(T,Decl(promiseChaining.ts,0,12))
>S : S, Symbol(S,Decl(promiseChaining.ts,2,9))
>Chain : Chain<T>, Symbol(Chain,Decl(promiseChaining.ts,0,0))
>S : S, Symbol(S,Decl(promiseChaining.ts,2,9))

        var result = cb(this.value);
>result : S, Symbol(result,Decl(promiseChaining.ts,3,11))
>cb(this.value) : S
>cb : (x: T) => S, Symbol(cb,Decl(promiseChaining.ts,2,12))
>this.value : T, Symbol(value,Decl(promiseChaining.ts,1,16))
>this : Chain<T>, Symbol(Chain,Decl(promiseChaining.ts,0,0))
>value : T, Symbol(value,Decl(promiseChaining.ts,1,16))

        // should get a fresh type parameter which each then call
        var z = this.then(x => result)/*S*/.then(x => "abc")/*string*/.then(x => x.length)/*number*/; // No error
>z : Chain<number>, Symbol(z,Decl(promiseChaining.ts,5,11))
>this.then(x => result)/*S*/.then(x => "abc")/*string*/.then(x => x.length) : Chain<number>
>this.then(x => result)/*S*/.then(x => "abc")/*string*/.then : <S>(cb: (x: string) => S) => Chain<S>, Symbol(Chain.then,Decl(promiseChaining.ts,1,36))
>this.then(x => result)/*S*/.then(x => "abc") : Chain<string>
>this.then(x => result)/*S*/.then : <S>(cb: (x: S) => S) => Chain<S>, Symbol(Chain.then,Decl(promiseChaining.ts,1,36))
>this.then(x => result) : Chain<S>
>this.then : <S>(cb: (x: T) => S) => Chain<S>, Symbol(then,Decl(promiseChaining.ts,1,36))
>this : Chain<T>, Symbol(Chain,Decl(promiseChaining.ts,0,0))
>then : <S>(cb: (x: T) => S) => Chain<S>, Symbol(then,Decl(promiseChaining.ts,1,36))
>x => result : (x: T) => S
>x : T, Symbol(x,Decl(promiseChaining.ts,5,26))
>result : S, Symbol(result,Decl(promiseChaining.ts,3,11))
>then : <S>(cb: (x: S) => S) => Chain<S>, Symbol(Chain.then,Decl(promiseChaining.ts,1,36))
>x => "abc" : (x: S) => string
>x : S, Symbol(x,Decl(promiseChaining.ts,5,49))
>"abc" : string
>then : <S>(cb: (x: string) => S) => Chain<S>, Symbol(Chain.then,Decl(promiseChaining.ts,1,36))
>x => x.length : (x: string) => number
>x : string, Symbol(x,Decl(promiseChaining.ts,5,76))
>x.length : number, Symbol(String.length,Decl(lib.d.ts,414,19))
>x : string, Symbol(x,Decl(promiseChaining.ts,5,76))
>length : number, Symbol(String.length,Decl(lib.d.ts,414,19))

        return new Chain(result);
>new Chain(result) : Chain<S>
>Chain : typeof Chain, Symbol(Chain,Decl(promiseChaining.ts,0,0))
>result : S, Symbol(result,Decl(promiseChaining.ts,3,11))
    }
}


