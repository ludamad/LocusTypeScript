=== tests/cases/compiler/returnTypeParameterWithModules.ts ===
module M1 {
>M1 : typeof M1, Symbol(M1,Decl(returnTypeParameterWithModules.ts,0,0))

    export function reduce<A>(ar, f, e?): Array<A> {
>reduce : <A>(ar: any, f: any, e?: any) => A[], Symbol(reduce,Decl(returnTypeParameterWithModules.ts,0,11))
>A : A, Symbol(A,Decl(returnTypeParameterWithModules.ts,1,27))
>ar : any, Symbol(ar,Decl(returnTypeParameterWithModules.ts,1,30))
>f : any, Symbol(f,Decl(returnTypeParameterWithModules.ts,1,33))
>e : any, Symbol(e,Decl(returnTypeParameterWithModules.ts,1,36))
>Array : T[], Symbol(Array,Decl(lib.d.ts,1000,23),Decl(lib.d.ts,1171,11))
>A : A, Symbol(A,Decl(returnTypeParameterWithModules.ts,1,27))

        return Array.prototype.reduce.apply(ar, e ? [f, e] : [f]);
>Array.prototype.reduce.apply(ar, e ? [f, e] : [f]) : any
>Array.prototype.reduce.apply : (thisArg: any, argArray?: any) => any, Symbol(Function.apply,Decl(lib.d.ts,228,20))
>Array.prototype.reduce : { (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue?: any): any; <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) => U, initialValue: U): U; }, Symbol(Array.reduce,Decl(lib.d.ts,1129,93),Decl(lib.d.ts,1136,120))
>Array.prototype : any[], Symbol(ArrayConstructor.prototype,Decl(lib.d.ts,1167,31))
>Array : ArrayConstructor, Symbol(Array,Decl(lib.d.ts,1000,23),Decl(lib.d.ts,1171,11))
>prototype : any[], Symbol(ArrayConstructor.prototype,Decl(lib.d.ts,1167,31))
>reduce : { (callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: any[]) => any, initialValue?: any): any; <U>(callbackfn: (previousValue: U, currentValue: any, currentIndex: number, array: any[]) => U, initialValue: U): U; }, Symbol(Array.reduce,Decl(lib.d.ts,1129,93),Decl(lib.d.ts,1136,120))
>apply : (thisArg: any, argArray?: any) => any, Symbol(Function.apply,Decl(lib.d.ts,228,20))
>ar : any, Symbol(ar,Decl(returnTypeParameterWithModules.ts,1,30))
>e ? [f, e] : [f] : any[]
>e : any, Symbol(e,Decl(returnTypeParameterWithModules.ts,1,36))
>[f, e] : any[]
>f : any, Symbol(f,Decl(returnTypeParameterWithModules.ts,1,33))
>e : any, Symbol(e,Decl(returnTypeParameterWithModules.ts,1,36))
>[f] : any[]
>f : any, Symbol(f,Decl(returnTypeParameterWithModules.ts,1,33))

    };
};
module M2 {
>M2 : typeof M2, Symbol(M2,Decl(returnTypeParameterWithModules.ts,4,2))

  import A = M1
>A : typeof A, Symbol(A,Decl(returnTypeParameterWithModules.ts,5,11))
>M1 : typeof A, Symbol(A,Decl(returnTypeParameterWithModules.ts,0,0))

  export function compose() {
>compose : () => void, Symbol(compose,Decl(returnTypeParameterWithModules.ts,6,15))

        A.reduce(arguments, compose2);
>A.reduce(arguments, compose2) : {}[]
>A.reduce : <A>(ar: any, f: any, e?: any) => A[], Symbol(A.reduce,Decl(returnTypeParameterWithModules.ts,0,11))
>A : typeof A, Symbol(A,Decl(returnTypeParameterWithModules.ts,5,11))
>reduce : <A>(ar: any, f: any, e?: any) => A[], Symbol(A.reduce,Decl(returnTypeParameterWithModules.ts,0,11))
>arguments : IArguments, Symbol(arguments)
>compose2 : <B, C, D>(g: (x: B) => C, f: (x: D) => B) => (x: D) => C, Symbol(compose2,Decl(returnTypeParameterWithModules.ts,9,6))

    };
    export function compose2<B, C, D>(g: (x: B) => C, f: (x: D) => B): (x: D) => C {
>compose2 : <B, C, D>(g: (x: B) => C, f: (x: D) => B) => (x: D) => C, Symbol(compose2,Decl(returnTypeParameterWithModules.ts,9,6))
>B : B, Symbol(B,Decl(returnTypeParameterWithModules.ts,10,29))
>C : C, Symbol(C,Decl(returnTypeParameterWithModules.ts,10,31))
>D : D, Symbol(D,Decl(returnTypeParameterWithModules.ts,10,34))
>g : (x: B) => C, Symbol(g,Decl(returnTypeParameterWithModules.ts,10,38))
>x : B, Symbol(x,Decl(returnTypeParameterWithModules.ts,10,42))
>B : B, Symbol(B,Decl(returnTypeParameterWithModules.ts,10,29))
>C : C, Symbol(C,Decl(returnTypeParameterWithModules.ts,10,31))
>f : (x: D) => B, Symbol(f,Decl(returnTypeParameterWithModules.ts,10,53))
>x : D, Symbol(x,Decl(returnTypeParameterWithModules.ts,10,58))
>D : D, Symbol(D,Decl(returnTypeParameterWithModules.ts,10,34))
>B : B, Symbol(B,Decl(returnTypeParameterWithModules.ts,10,29))
>x : D, Symbol(x,Decl(returnTypeParameterWithModules.ts,10,72))
>D : D, Symbol(D,Decl(returnTypeParameterWithModules.ts,10,34))
>C : C, Symbol(C,Decl(returnTypeParameterWithModules.ts,10,31))

    return function (x) { return g(f(x)); }
>function (x) { return g(f(x)); } : (x: D) => C
>x : D, Symbol(x,Decl(returnTypeParameterWithModules.ts,11,21))
>g(f(x)) : C
>g : (x: B) => C, Symbol(g,Decl(returnTypeParameterWithModules.ts,10,38))
>f(x) : B
>f : (x: D) => B, Symbol(f,Decl(returnTypeParameterWithModules.ts,10,53))
>x : D, Symbol(x,Decl(returnTypeParameterWithModules.ts,11,21))

  };
};
