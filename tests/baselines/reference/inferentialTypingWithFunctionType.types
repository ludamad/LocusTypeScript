=== tests/cases/compiler/inferentialTypingWithFunctionType.ts ===
declare function map<T, U>(x: T, f: (s: T) => U): U;
>map : <T, U>(x: T, f: (s: T) => U) => U, Symbol(map, Decl(inferentialTypingWithFunctionType.ts, 0, 0))
>T : T, Symbol(T, Decl(inferentialTypingWithFunctionType.ts, 0, 21))
>U : U, Symbol(U, Decl(inferentialTypingWithFunctionType.ts, 0, 23))
>x : T, Symbol(x, Decl(inferentialTypingWithFunctionType.ts, 0, 27))
>T : T, Symbol(T, Decl(inferentialTypingWithFunctionType.ts, 0, 21))
>f : (s: T) => U, Symbol(f, Decl(inferentialTypingWithFunctionType.ts, 0, 32))
>s : T, Symbol(s, Decl(inferentialTypingWithFunctionType.ts, 0, 37))
>T : T, Symbol(T, Decl(inferentialTypingWithFunctionType.ts, 0, 21))
>U : U, Symbol(U, Decl(inferentialTypingWithFunctionType.ts, 0, 23))
>U : U, Symbol(U, Decl(inferentialTypingWithFunctionType.ts, 0, 23))

declare function identity<V>(y: V): V;
>identity : <V>(y: V) => V, Symbol(identity, Decl(inferentialTypingWithFunctionType.ts, 0, 52))
>V : V, Symbol(V, Decl(inferentialTypingWithFunctionType.ts, 1, 26))
>y : V, Symbol(y, Decl(inferentialTypingWithFunctionType.ts, 1, 29))
>V : V, Symbol(V, Decl(inferentialTypingWithFunctionType.ts, 1, 26))
>V : V, Symbol(V, Decl(inferentialTypingWithFunctionType.ts, 1, 26))

var s = map("", identity);
>s : string, Symbol(s, Decl(inferentialTypingWithFunctionType.ts, 3, 3))
>map("", identity) : string
>map : <T, U>(x: T, f: (s: T) => U) => U, Symbol(map, Decl(inferentialTypingWithFunctionType.ts, 0, 0))
>"" : string
>identity : <V>(y: V) => V, Symbol(identity, Decl(inferentialTypingWithFunctionType.ts, 0, 52))

