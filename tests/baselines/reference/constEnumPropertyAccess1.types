=== tests/cases/conformance/constEnums/constEnumPropertyAccess1.ts ===

// constant enum declarations are completely erased in the emitted JavaScript code.
// it is an error to reference a constant enum object in any other context
// than a property access that selects one of the enum's members

const enum G {
>G : G, Symbol(G, Decl(constEnumPropertyAccess1.ts, 0, 0))

    A = 1,
>A : G, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))
>1 : number

    B = 2,
>B : G, Symbol(G.B, Decl(constEnumPropertyAccess1.ts, 6, 10))
>2 : number

    C = A + B,
>C : G, Symbol(G.C, Decl(constEnumPropertyAccess1.ts, 7, 10))
>A + B : number
>A : G, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))
>B : G, Symbol(G.B, Decl(constEnumPropertyAccess1.ts, 6, 10))

    D = A * 2
>D : G, Symbol(G.D, Decl(constEnumPropertyAccess1.ts, 8, 14))
>A * 2 : number
>A : G, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))
>2 : number
}

var o: {
>o : { [idx: number]: boolean; }, Symbol(o, Decl(constEnumPropertyAccess1.ts, 12, 3))

    [idx: number]: boolean
>idx : number, Symbol(idx, Decl(constEnumPropertyAccess1.ts, 13, 5))

} = {
>{        1: true    } : { [x: number]: boolean; 1: boolean; }

        1: true
>true : boolean

    };

var a = G.A;
>a : G, Symbol(a, Decl(constEnumPropertyAccess1.ts, 18, 3))
>G.A : G, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))
>G : typeof G, Symbol(G, Decl(constEnumPropertyAccess1.ts, 0, 0))
>A : G, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))

var a1 = G["A"];
>a1 : G, Symbol(a1, Decl(constEnumPropertyAccess1.ts, 19, 3))
>G["A"] : G
>G : typeof G, Symbol(G, Decl(constEnumPropertyAccess1.ts, 0, 0))
>"A" : string, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))

var g = o[G.A];
>g : boolean, Symbol(g, Decl(constEnumPropertyAccess1.ts, 20, 3))
>o[G.A] : boolean
>o : { [idx: number]: boolean; }, Symbol(o, Decl(constEnumPropertyAccess1.ts, 12, 3))
>G.A : G, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))
>G : typeof G, Symbol(G, Decl(constEnumPropertyAccess1.ts, 0, 0))
>A : G, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))

class C {
>C : C, Symbol(C, Decl(constEnumPropertyAccess1.ts, 20, 15))

    [G.A]() { }
>G.A : G, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))
>G : typeof G, Symbol(G, Decl(constEnumPropertyAccess1.ts, 0, 0))
>A : G, Symbol(G.A, Decl(constEnumPropertyAccess1.ts, 5, 14))

    get [G.B]() {
>G.B : G, Symbol(G.B, Decl(constEnumPropertyAccess1.ts, 6, 10))
>G : typeof G, Symbol(G, Decl(constEnumPropertyAccess1.ts, 0, 0))
>B : G, Symbol(G.B, Decl(constEnumPropertyAccess1.ts, 6, 10))

        return true;
>true : boolean
    }
    set [G.B](x: number) { }
>G.B : G, Symbol(G.B, Decl(constEnumPropertyAccess1.ts, 6, 10))
>G : typeof G, Symbol(G, Decl(constEnumPropertyAccess1.ts, 0, 0))
>B : G, Symbol(G.B, Decl(constEnumPropertyAccess1.ts, 6, 10))
>x : number, Symbol(x, Decl(constEnumPropertyAccess1.ts, 27, 14))
}


