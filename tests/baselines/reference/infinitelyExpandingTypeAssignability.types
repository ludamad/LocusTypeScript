=== tests/cases/compiler/infinitelyExpandingTypeAssignability.ts ===
interface A<T> {
>A : A<T>, Symbol(A, Decl(infinitelyExpandingTypeAssignability.ts, 0, 0))
>T : T, Symbol(T, Decl(infinitelyExpandingTypeAssignability.ts, 0, 12))

   x : T
>x : T, Symbol(x, Decl(infinitelyExpandingTypeAssignability.ts, 0, 16))
>T : T, Symbol(T, Decl(infinitelyExpandingTypeAssignability.ts, 0, 12))
}
 
interface B<T> extends A<B<B<B<T>>>> { }
>B : B<T>, Symbol(B, Decl(infinitelyExpandingTypeAssignability.ts, 2, 1))
>T : T, Symbol(T, Decl(infinitelyExpandingTypeAssignability.ts, 4, 12))
>A : A<T>, Symbol(A, Decl(infinitelyExpandingTypeAssignability.ts, 0, 0))
>B : B<T>, Symbol(B, Decl(infinitelyExpandingTypeAssignability.ts, 2, 1))
>B : B<T>, Symbol(B, Decl(infinitelyExpandingTypeAssignability.ts, 2, 1))
>B : B<T>, Symbol(B, Decl(infinitelyExpandingTypeAssignability.ts, 2, 1))
>T : T, Symbol(T, Decl(infinitelyExpandingTypeAssignability.ts, 4, 12))

interface C<T> extends A<C<C<C<T>>>> { }
>C : C<T>, Symbol(C, Decl(infinitelyExpandingTypeAssignability.ts, 4, 40))
>T : T, Symbol(T, Decl(infinitelyExpandingTypeAssignability.ts, 6, 12))
>A : A<T>, Symbol(A, Decl(infinitelyExpandingTypeAssignability.ts, 0, 0))
>C : C<T>, Symbol(C, Decl(infinitelyExpandingTypeAssignability.ts, 4, 40))
>C : C<T>, Symbol(C, Decl(infinitelyExpandingTypeAssignability.ts, 4, 40))
>C : C<T>, Symbol(C, Decl(infinitelyExpandingTypeAssignability.ts, 4, 40))
>T : T, Symbol(T, Decl(infinitelyExpandingTypeAssignability.ts, 6, 12))
 
var x : B<string>
>x : B<string>, Symbol(x, Decl(infinitelyExpandingTypeAssignability.ts, 8, 3))
>B : B<T>, Symbol(B, Decl(infinitelyExpandingTypeAssignability.ts, 2, 1))

var y : C<string> = x
>y : C<string>, Symbol(y, Decl(infinitelyExpandingTypeAssignability.ts, 9, 3))
>C : C<T>, Symbol(C, Decl(infinitelyExpandingTypeAssignability.ts, 4, 40))
>x : B<string>, Symbol(x, Decl(infinitelyExpandingTypeAssignability.ts, 8, 3))

