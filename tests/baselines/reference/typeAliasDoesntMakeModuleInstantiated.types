=== tests/cases/compiler/typeAliasDoesntMakeModuleInstantiated.ts ===
declare module m {
>m : IStatic, Symbol(m, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 0, 0), Decl(typeAliasDoesntMakeModuleInstantiated.ts, 9, 11))

    // type alias declaration here shouldnt make the module declaration instantiated
    type Selector = string| string[] |Function;
>Selector : string | Function | string[], Symbol(Selector, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 0, 18))
>Function : Function, Symbol(Function, Decl(lib.d.ts, 223, 38), Decl(lib.d.ts, 269, 11))

    export interface IStatic {
>IStatic : IStatic, Symbol(IStatic, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 2, 47))

        (selector: any /* Selector */): IInstance;
>selector : any, Symbol(selector, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 5, 9))
>IInstance : IInstance, Symbol(IInstance, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 6, 5))
    }
    export interface IInstance { }
>IInstance : IInstance, Symbol(IInstance, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 6, 5))
}
declare var m: m.IStatic; // Should be ok to have var 'm' as module is non instantiated
>m : m.IStatic, Symbol(m, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 0, 0), Decl(typeAliasDoesntMakeModuleInstantiated.ts, 9, 11))
>m : any, Symbol(m, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 0, 0), Decl(typeAliasDoesntMakeModuleInstantiated.ts, 9, 11))
>IStatic : m.IStatic, Symbol(m.IStatic, Decl(typeAliasDoesntMakeModuleInstantiated.ts, 2, 47))

