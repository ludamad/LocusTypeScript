=== tests/cases/compiler/file2.ts ===
import RT_ALIAS = require("file1");
>RT_ALIAS : typeof RT_ALIAS, Symbol(RT_ALIAS, Decl(file2.ts, 0, 0))

import ReferredTo = RT_ALIAS.elaborate.nested.mod.name.ReferredTo;
>ReferredTo : typeof ReferredTo, Symbol(ReferredTo, Decl(file2.ts, 0, 35))
>RT_ALIAS : typeof RT_ALIAS, Symbol(RT_ALIAS, Decl(file1.ts, 0, 0))
>elaborate : typeof RT_ALIAS.elaborate, Symbol(RT_ALIAS.elaborate, Decl(file1.ts, 0, 0))
>nested : typeof RT_ALIAS.elaborate.nested, Symbol(RT_ALIAS.elaborate.nested, Decl(file1.ts, 0, 24))
>mod : typeof RT_ALIAS.elaborate.nested.mod, Symbol(RT_ALIAS.elaborate.nested.mod, Decl(file1.ts, 0, 31))
>name : typeof RT_ALIAS.elaborate.nested.mod.name, Symbol(RT_ALIAS.elaborate.nested.mod.name, Decl(file1.ts, 0, 35))
>ReferredTo : ReferredTo, Symbol(ReferredTo, Decl(file1.ts, 0, 41))

export module ImportingModule {
>ImportingModule : typeof ImportingModule, Symbol(ImportingModule, Decl(file2.ts, 1, 66))

    class UsesReferredType {
>UsesReferredType : UsesReferredType, Symbol(UsesReferredType, Decl(file2.ts, 3, 31))

        constructor(private referred: ReferredTo) { }
>referred : ReferredTo, Symbol(referred, Decl(file2.ts, 5, 20))
>ReferredTo : ReferredTo, Symbol(ReferredTo, Decl(file2.ts, 0, 35))
    }
}
=== tests/cases/compiler/file1.ts ===
export module elaborate.nested.mod.name {
>elaborate : typeof elaborate, Symbol(elaborate, Decl(file1.ts, 0, 0))
>nested : typeof nested, Symbol(nested, Decl(file1.ts, 0, 24))
>mod : typeof mod, Symbol(mod, Decl(file1.ts, 0, 31))
>name : typeof name, Symbol(name, Decl(file1.ts, 0, 35))

    export class ReferredTo {
>ReferredTo : ReferredTo, Symbol(ReferredTo, Decl(file1.ts, 0, 41))

        doSomething(): void {
>doSomething : () => void, Symbol(doSomething, Decl(file1.ts, 1, 29))
        }
    }
}

