=== tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor4.ts ===
declare function dec<T>(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;
>dec : <T>(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>, Symbol(dec, Decl(decoratorOnClassAccessor4.ts, 0, 0))
>T : T, Symbol(T, Decl(decoratorOnClassAccessor4.ts, 0, 21))
>target : any, Symbol(target, Decl(decoratorOnClassAccessor4.ts, 0, 24))
>propertyKey : string, Symbol(propertyKey, Decl(decoratorOnClassAccessor4.ts, 0, 36))
>descriptor : TypedPropertyDescriptor<T>, Symbol(descriptor, Decl(decoratorOnClassAccessor4.ts, 0, 57))
>TypedPropertyDescriptor : TypedPropertyDescriptor<T>, Symbol(TypedPropertyDescriptor, Decl(lib.d.ts, 1171, 36))
>T : T, Symbol(T, Decl(decoratorOnClassAccessor4.ts, 0, 21))
>TypedPropertyDescriptor : TypedPropertyDescriptor<T>, Symbol(TypedPropertyDescriptor, Decl(lib.d.ts, 1171, 36))
>T : T, Symbol(T, Decl(decoratorOnClassAccessor4.ts, 0, 21))

class C {
>C : C, Symbol(C, Decl(decoratorOnClassAccessor4.ts, 0, 126))

    @dec set accessor(value: number) { }
>dec : <T>(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>, Symbol(dec, Decl(decoratorOnClassAccessor4.ts, 0, 0))
>accessor : number, Symbol(accessor, Decl(decoratorOnClassAccessor4.ts, 2, 9))
>value : number, Symbol(value, Decl(decoratorOnClassAccessor4.ts, 3, 22))
}
